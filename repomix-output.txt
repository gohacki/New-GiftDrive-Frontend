This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-02T23:39:59.455Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Directory Structure
================================================================
components/
  Cards/
    CardBarChart.js
    CardLineChart.js
    CardPageVisits.js
    CardPieChart.js
    CardSocialTraffic.js
    CardStats.js
    CardTable.js
    ChartWrapper.js
    ChildCard.js
    ChildList.js
    DriveCard.js
    DriveItemCard.js
    DriveItemList.js
    DriveListCard.js
    OrganizationCard.js
  Dropdowns/
    IndexDropdown.js
    NotificationDropdown.js
    PagesDropdown.js
    TableDropdown.js
    UserDropdown.js
  Footers/
    Footer.js
    FooterAdmin.js
    FooterSmall.js
  Headers/
    HeaderStats.js
  Maps/
    MapExample.js
  Modals/
    AddChildModal.js
    AddDriveModal.js
    ChildModal.js
    EditChildModal.js
    EditDriveModal.js
    ItemSelectionModal.js
    ModalRenderer.js
  Navbars/
    AdminNavbar.js
    AuthNavbar.js
  PageChange/
    PageChange.js
  Sidebar/
    Sidebar.js
  UI/
    Breadcrumbs.js
  ErrorBoundary.js
  Providers.js
contexts/
  AuthContext.js
  CartContext.js
  ModalContext.js
  StatisticsContext.js
layouts/
  Admin.js
  Auth.js
pages/
  admin/
    currentDrives.js
    dashboard.js
    editOrgInfo.js
    futureDrives.js
    help.js
    maps.js
    pastDrives.js
    superAdmin.js
    tables.js
  auth/
    login.js
    register.js
  visible/
    child/
      [id].js
    drive/
      [id].js
    organization/
      [id].js
    about.js
    cancel.js
    cart.js
    drivelist.js
    orglist.js
    profile.js
    registerdrive.js
    registerorg.js
    success.js
  _app.js
  _document.js
  _error.js
  404.js
  index.js
styles/
  index.css
.gitignore
eslint.config.mjs
jsconfig.json
next.config.js
package.json
postcss.config.js
tailwind.config.js

================================================================
Files
================================================================

================
File: components/Cards/CardBarChart.js
================
import React from "react";
import PropTypes from "prop-types";
import ChartWrapper from "./ChartWrapper";

const CardBarChart = ({ title, subtitle, data, labels, backgroundColor }) => {
  const chartData = {
    labels: labels,
    datasets: [
      {
        label: subtitle || "",
        data: data,
        backgroundColor: backgroundColor || "#ed64a6",
        borderColor: backgroundColor || "#ed64a6",
        borderWidth: 1,
        barThickness: 8,
      },
    ],
  };

  const chartOptions = {
    maintainAspectRatio: false,
    responsive: true,
    plugins: {
      legend: {
        labels: {
          color: "rgba(0,0,0,.4)",
        },
        align: "end",
        position: "bottom",
      },
      tooltip: {
        mode: "index",
        intersect: false,
        callbacks: {
          label: function (context) {
            return `$${context.parsed.y}`;
          },
        },
      },
    },
    scales: {
      x: {
        display: false,
        grid: {
          display: false,
        },
      },
      y: {
        display: true,
        ticks: {
          color: "rgba(0,0,0,.4)",
        },
        grid: {
          borderDash: [2],
          borderDashOffset: [2],
          color: "rgba(33, 37, 41, 0.3)",
          zeroLineColor: "rgba(33, 37, 41, 0.3)",
          zeroLineBorderDash: [2],
          zeroLineBorderDashOffset: [2],
        },
      },
    },
  };

  return (
    <ChartWrapper
      chartId={`bar-chart-${title}`}
      chartType="bar"
      data={chartData}
      options={chartOptions}
      title={title}
      subtitle={subtitle}
    />
  );
};

CardBarChart.propTypes = {
  title: PropTypes.string.isRequired,
  subtitle: PropTypes.string,
  data: PropTypes.arrayOf(PropTypes.number).isRequired,
  labels: PropTypes.arrayOf(PropTypes.string).isRequired,
  backgroundColor: PropTypes.string,
};

export default CardBarChart;

================
File: components/Cards/CardLineChart.js
================
import React from "react";
import PropTypes from "prop-types";
import ChartWrapper from "./ChartWrapper";

const CardLineChart = ({
  title,
  subtitle,
  data,
  labels,
  borderColor,
  backgroundColor,
}) => {
  const chartData = {
    labels: labels,
    datasets: [
      {
        label: subtitle || "",
        data: data,
        fill: false,
        borderColor: borderColor || "#4c51bf",
        backgroundColor: backgroundColor || "#4c51bf",
      },
    ],
  };

  const chartOptions = {
    maintainAspectRatio: false,
    responsive: true,
    plugins: {
      legend: {
        labels: {
          color: "#fff",
        },
        position: "bottom",
      },
      tooltip: {
        mode: "index",
        intersect: false,
      },
    },
    scales: {
      x: {
        ticks: {
          color: "#fff",
        },
        grid: {
          display: false,
        },
      },
      y: {
        ticks: {
          color: "#fff",
        },
        grid: {
          color: "rgba(255,255,255,0.2)",
        },
      },
    },
  };

  return (
    <ChartWrapper
      chartId={`line-chart-${title}`}
      chartType="line"
      data={chartData}
      options={chartOptions}
      title={title}
      subtitle={subtitle}
    />
  );
};

CardLineChart.propTypes = {
  title: PropTypes.string.isRequired,
  subtitle: PropTypes.string,
  data: PropTypes.arrayOf(PropTypes.number).isRequired,
  labels: PropTypes.arrayOf(PropTypes.string).isRequired,
  borderColor: PropTypes.string,
  backgroundColor: PropTypes.string,
};

export default CardLineChart;

================
File: components/Cards/CardPageVisits.js
================
// components/Cards/CardPageVisits.js

import React, { useEffect, useState, useContext } from "react";
import axios from "axios";
import PropTypes from "prop-types";
import { AuthContext } from "../../contexts/AuthContext";

export default function CardPageVisits({ apiUrl }) {
  const [pageVisits, setPageVisits] = useState([]);
  const { user } = useContext(AuthContext);

  useEffect(() => {
    const fetchPageVisits = async () => {
      try {
        if (user && user.org_id) {
          const response = await axios.get(`${apiUrl}/api/analytics/page-visits`, {
            params: {
              org_id: user.org_id,
            },
            withCredentials: true,
          });
          setPageVisits(response.data);
        }
      } catch (error) {
        console.error("Error fetching page visits:", error);
      }
    };

    fetchPageVisits();
  }, [apiUrl, user]);

  return (
    <>
      <div className="relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded">
        <div className="rounded-t mb-0 px-4 py-3 border-0">
          <div className="flex flex-wrap items-center">
            <div className="relative w-full px-4 max-w-full flex-grow flex-1">
              <h3 className="font-semibold text-base text-blueGray-700">Page Visits</h3>
            </div>
          </div>
        </div>
        <div className="block w-full overflow-x-auto">
          {/* Page Visits table */}
          <table className="items-center w-full bg-transparent border-collapse">
            <thead>
              <tr>
                <th className="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
                  Page Name
                </th>
                <th className="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
                  Visitors
                </th>
                <th className="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
                  Unique Users
                </th>
              </tr>
            </thead>
            <tbody>
              {pageVisits.length > 0 ? (
                pageVisits.map((visit) => (
                  <tr key={visit.pageName}>
                    <th className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-left">
                      {visit.pageName}
                    </th>
                    <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                      {visit.visitors}
                    </td>
                    <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                      {visit.uniqueUsers}
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td
                    colSpan="3"
                    className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-center"
                  >
                    No data available.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </>
  );
}

CardPageVisits.propTypes = {
  apiUrl: PropTypes.string.isRequired,
};

================
File: components/Cards/CardPieChart.js
================
import React from "react";
import PropTypes from "prop-types";
import ChartWrapper from "./ChartWrapper";

const CardPieChart = ({ title, data, labels, colors }) => {
  const chartData = {
    labels: labels,
    datasets: [
      {
        data: data,
        backgroundColor:
          colors || ["#0088FE", "#00C49F", "#FFBB28", "#FF8042"],
        hoverBackgroundColor:
          colors || ["#0088FE", "#00C49F", "#FFBB28", "#FF8042"],
      },
    ],
  };

  const chartOptions = {
    maintainAspectRatio: false,
    responsive: true,
    plugins: {
      legend: {
        position: "bottom",
        labels: {
          color: "#4a5568",
        },
      },
      tooltip: {
        callbacks: {
          label: function (context) {
            const label = context.label || "";
            const value = context.parsed;
            const total =
              context.chart._metasets[context.datasetIndex].total || 1;
            const percentage = ((value / total) * 100).toFixed(2);
            return `${label}: ${value} (${percentage}%)`;
          },
        },
      },
    },
  };

  return (
    <ChartWrapper
      chartId={`pie-chart-${title}`}
      chartType="pie"
      data={chartData}
      options={chartOptions}
      title={title}
    />
  );
};

CardPieChart.propTypes = {
  title: PropTypes.string.isRequired,
  data: PropTypes.arrayOf(PropTypes.number).isRequired,
  labels: PropTypes.arrayOf(PropTypes.string).isRequired,
  colors: PropTypes.arrayOf(PropTypes.string),
};

export default CardPieChart;

================
File: components/Cards/CardSocialTraffic.js
================
// components/Cards/CardSocialTraffic.js

import React, { useEffect, useState, useContext } from "react";
import axios from "axios";
import PropTypes from "prop-types";
import { AuthContext } from "../../contexts/AuthContext";

export default function CardSocialTraffic({ apiUrl }) {
  const [socialTraffic, setSocialTraffic] = useState([]);
  const { user } = useContext(AuthContext);

  useEffect(() => {
    const fetchSocialTraffic = async () => {
      try {
        if (user && user.org_id) {
          const response = await axios.get(`${apiUrl}/api/analytics/social-traffic`, {
            params: {
              org_id: user.org_id,
            },
            withCredentials: true,
          });
          setSocialTraffic(response.data);
        }
      } catch (error) {
        console.error("Error fetching social traffic:", error);
      }
    };

    fetchSocialTraffic();
  }, [apiUrl, user]);

  return (
    <>
      <div className="relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded">
        <div className="rounded-t mb-0 px-4 py-3 border-0">
          <div className="flex flex-wrap items-center">
            <div className="relative w-full px-4 max-w-full flex-grow flex-1">
              <h3 className="font-semibold text-base text-blueGray-700">Social Traffic</h3>
            </div>
          </div>
        </div>
        <div className="block w-full overflow-x-auto">
          {/* Social Traffic table */}
          <table className="items-center w-full bg-transparent border-collapse">
            <thead>
              <tr>
                <th className="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
                  Source
                </th>
                <th className="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
                  Visitors
                </th>
                <th className="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
                  Percentage
                </th>
              </tr>
            </thead>
            <tbody>
              {socialTraffic.length > 0 ? (
                socialTraffic.map((source) => (
                  <tr key={source.platform}>
                    <th className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-left">
                      {source.platform}
                    </th>
                    <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                      {source.visitors}
                    </td>
                    <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                      <div className="flex items-center">
                        <span className="mr-2">{source.percentage}%</span>
                        <div className="relative w-full">
                          <div className="overflow-hidden h-2 text-xs flex rounded bg-gray-200">
                            <div
                              style={{ width: `${source.percentage}%` }}
                              className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"
                            ></div>
                          </div>
                        </div>
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td
                    colSpan="3"
                    className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-center"
                  >
                    No data available.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </>
  );
}

CardSocialTraffic.propTypes = {
  apiUrl: PropTypes.string.isRequired,
};

================
File: components/Cards/CardStats.js
================
// components/Cards/CardStats.js

import React from "react";
import PropTypes from "prop-types";

export default function CardStats({
  statSubtitle,
  statTitle,
  statArrow,
  statPercent,
  statPercentColor,
  statDescripiron,
  statIconName,
  statIconColor,
}) {
  return (
    <>
      <div className="relative flex flex-col min-w-0 break-words bg-white rounded mb-6 xl:mb-0 shadow-lg">
        <div className="flex-auto p-4">
          <div className="flex flex-wrap">
            <div className="relative w-full pr-4 max-w-full flex-grow flex-1">
              <h5 className="uppercase text-blueGray-400 mb-1 text-xs font-semibold">
                {statSubtitle}
              </h5>
              <span className="font-semibold text-xl text-blueGray-700">
                {statTitle}
              </span>
            </div>
            <div className="relative w-auto pl-4 flex-initial">
              <div
                className={
                  "text-white p-3 text-center inline-flex items-center justify-center w-12 h-12 shadow-lg rounded-full " +
                  statIconColor
                }
              >
                <i className={statIconName}></i>
              </div>
            </div>
          </div>
          <p className="text-sm text-blueGray-400 mt-4">
            <span className={statPercentColor + " mr-2"}>
              <i
                className={
                  statArrow === "up"
                    ? "fas fa-arrow-up"
                    : statArrow === "down"
                    ? "fas fa-arrow-down"
                    : ""
                }
              ></i>{" "}
              {statPercent}%
            </span>
            <span className="whitespace-nowrap">{statDescripiron}</span>
          </p>
        </div>
      </div>
    </>
  );
}

CardStats.defaultProps = {
  statSubtitle: "Traffic",
  statTitle: "350,897",
  statArrow: "up",
  statPercent: "3.48",
  statPercentColor: "text-emerald-500",
  statDescripiron: "Since last month",
  statIconName: "far fa-chart-bar",
  statIconColor: "bg-red-500",
};

CardStats.propTypes = {
  statSubtitle: PropTypes.string,
  statTitle: PropTypes.string,
  statArrow: PropTypes.oneOf(["up", "down"]),
  statPercent: PropTypes.string,
  // can be any of the text color utilities from tailwindcss
  statPercentColor: PropTypes.string,
  statDescripiron: PropTypes.string,
  statIconName: PropTypes.string,
  // can be any of the background color utilities from tailwindcss
  statIconColor: PropTypes.string,
};

================
File: components/Cards/CardTable.js
================
import React from "react";
import PropTypes from "prop-types";

// components

import TableDropdown from "components/Dropdowns/TableDropdown.js";

export default function CardTable({ color }) {
  return (
    <>
      <div
        className={
          "relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded " +
          (color === "light" ? "bg-white" : "bg-blueGray-700 text-white")
        }
      >
        <div className="rounded-t mb-0 px-4 py-3 border-0">
          <div className="flex flex-wrap items-center">
            <div className="relative w-full px-4 max-w-full flex-grow flex-1">
              <h3
                className={
                  "font-semibold text-lg " +
                  (color === "light" ? "text-blueGray-700" : "text-white")
                }
              >
                Card Tables
              </h3>
            </div>
          </div>
        </div>
        <div className="block w-full overflow-x-auto">
          {/* Projects table */}
          <table className="items-center w-full bg-transparent border-collapse">
            <thead>
              <tr>
                <th
                  className={
                    "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left " +
                    (color === "light"
                      ? "bg-blueGray-50 text-blueGray-500 border-blueGray-100"
                      : "bg-blueGray-600 text-blueGray-200 border-blueGray-500")
                  }
                >
                  Project
                </th>
                <th
                  className={
                    "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left " +
                    (color === "light"
                      ? "bg-blueGray-50 text-blueGray-500 border-blueGray-100"
                      : "bg-blueGray-600 text-blueGray-200 border-blueGray-500")
                  }
                >
                  Budget
                </th>
                <th
                  className={
                    "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left " +
                    (color === "light"
                      ? "bg-blueGray-50 text-blueGray-500 border-blueGray-100"
                      : "bg-blueGray-600 text-blueGray-200 border-blueGray-500")
                  }
                >
                  Status
                </th>
                <th
                  className={
                    "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left " +
                    (color === "light"
                      ? "bg-blueGray-50 text-blueGray-500 border-blueGray-100"
                      : "bg-blueGray-600 text-blueGray-200 border-blueGray-500")
                  }
                >
                  Users
                </th>
                <th
                  className={
                    "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left " +
                    (color === "light"
                      ? "bg-blueGray-50 text-blueGray-500 border-blueGray-100"
                      : "bg-blueGray-600 text-blueGray-200 border-blueGray-500")
                  }
                >
                  Completion
                </th>
                <th
                  className={
                    "px-6 align-middle border border-solid py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left " +
                    (color === "light"
                      ? "bg-blueGray-50 text-blueGray-500 border-blueGray-100"
                      : "bg-blueGray-600 text-blueGray-200 border-blueGray-500")
                  }
                ></th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-left flex items-center">
                  <img
                    src="/img/bootstrap.jpg"
                    className="h-12 w-12 bg-white rounded-full border"
                    alt="..."
                  ></img>{" "}
                  <span
                    className={
                      "ml-3 font-bold " +
                      +(color === "light" ? "text-blueGray-600" : "text-white")
                    }
                  >
                    Argon Design System
                  </span>
                </th>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  $2,500 USD
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <i className="fas fa-circle text-orange-500 mr-2"></i> pending
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <div className="flex">
                    <img
                      src="/img/team-1-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow"
                    ></img>
                    <img
                      src="/img/team-2-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                    <img
                      src="/img/team-3-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                    <img
                      src="/img/team-4-470x470.png"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                  </div>
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <div className="flex items-center">
                    <span className="mr-2">60%</span>
                    <div className="relative w-full">
                      <div className="overflow-hidden h-2 text-xs flex rounded bg-red-200">
                        <div
                          style={{ width: "60%" }}
                          className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-red-500"
                        ></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-right">
                  <TableDropdown />
                </td>
              </tr>
              <tr>
                <th className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-left flex items-center">
                  <img
                    src="/img/angular.jpg"
                    className="h-12 w-12 bg-white rounded-full border"
                    alt="..."
                  ></img>{" "}
                  <span
                    className={
                      "ml-3 font-bold " +
                      +(color === "light" ? "text-blueGray-600" : "text-white")
                    }
                  >
                    Angular Now UI Kit PRO
                  </span>
                </th>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  $1,800 USD
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <i className="fas fa-circle text-emerald-500 mr-2"></i>{" "}
                  completed
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <div className="flex">
                    <img
                      src="/img/team-1-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow"
                    ></img>
                    <img
                      src="/img/team-2-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                    <img
                      src="/img/team-3-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                    <img
                      src="/img/team-4-470x470.png"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                  </div>
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <div className="flex items-center">
                    <span className="mr-2">100%</span>
                    <div className="relative w-full">
                      <div className="overflow-hidden h-2 text-xs flex rounded bg-emerald-200">
                        <div
                          style={{ width: "100%" }}
                          className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-emerald-500"
                        ></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-right">
                  <TableDropdown />
                </td>
              </tr>
              <tr>
                <th className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-left flex items-center">
                  <img
                    src="/img/sketch.jpg"
                    className="h-12 w-12 bg-white rounded-full border"
                    alt="..."
                  ></img>{" "}
                  <span
                    className={
                      "ml-3 font-bold " +
                      +(color === "light" ? "text-blueGray-600" : "text-white")
                    }
                  >
                    Black Dashboard Sketch
                  </span>
                </th>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  $3,150 USD
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <i className="fas fa-circle text-red-500 mr-2"></i> delayed
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <div className="flex">
                    <img
                      src="/img/team-1-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow"
                    ></img>
                    <img
                      src="/img/team-2-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                    <img
                      src="/img/team-3-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                    <img
                      src="/img/team-4-470x470.png"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                  </div>
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <div className="flex items-center">
                    <span className="mr-2">73%</span>
                    <div className="relative w-full">
                      <div className="overflow-hidden h-2 text-xs flex rounded bg-red-200">
                        <div
                          style={{ width: "73%" }}
                          className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-red-500"
                        ></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-right">
                  <TableDropdown />
                </td>
              </tr>
              <tr>
                <th className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-left flex items-center">
                  <img
                    src="/img/react.jpg"
                    className="h-12 w-12 bg-white rounded-full border"
                    alt="..."
                  ></img>{" "}
                  <span
                    className={
                      "ml-3 font-bold " +
                      +(color === "light" ? "text-blueGray-600" : "text-white")
                    }
                  >
                    React Material Dashboard
                  </span>
                </th>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  $4,400 USD
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <i className="fas fa-circle text-teal-500 mr-2"></i> on
                  schedule
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <div className="flex">
                    <img
                      src="/img/team-1-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow"
                    ></img>
                    <img
                      src="/img/team-2-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                    <img
                      src="/img/team-3-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                    <img
                      src="/img/team-4-470x470.png"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                  </div>
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <div className="flex items-center">
                    <span className="mr-2">90%</span>
                    <div className="relative w-full">
                      <div className="overflow-hidden h-2 text-xs flex rounded bg-teal-200">
                        <div
                          style={{ width: "90%" }}
                          className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-teal-500"
                        ></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-right">
                  <TableDropdown />
                </td>
              </tr>
              <tr>
                <th className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-left flex items-center">
                  <img
                    src="/img/vue.jpg"
                    className="h-12 w-12 bg-white rounded-full border"
                    alt="..."
                  ></img>{" "}
                  <span
                    className={
                      "ml-3 font-bold " +
                      +(color === "light" ? "text-blueGray-600" : "text-white")
                    }
                  >
                    React Material Dashboard
                  </span>
                </th>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  $2,200 USD
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <i className="fas fa-circle text-emerald-500 mr-2"></i>{" "}
                  completed
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <div className="flex">
                    <img
                      src="/img/team-1-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow"
                    ></img>
                    <img
                      src="/img/team-2-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                    <img
                      src="/img/team-3-800x800.jpg"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                    <img
                      src="/img/team-4-470x470.png"
                      alt="..."
                      className="w-10 h-10 rounded-full border-2 border-blueGray-50 shadow -ml-4"
                    ></img>
                  </div>
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                  <div className="flex items-center">
                    <span className="mr-2">100%</span>
                    <div className="relative w-full">
                      <div className="overflow-hidden h-2 text-xs flex rounded bg-emerald-200">
                        <div
                          style={{ width: "100%" }}
                          className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-emerald-500"
                        ></div>
                      </div>
                    </div>
                  </div>
                </td>
                <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-right">
                  <TableDropdown />
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </>
  );
}

CardTable.defaultProps = {
  color: "light",
};

CardTable.propTypes = {
  color: PropTypes.oneOf(["light", "dark"]),
};

================
File: components/Cards/ChartWrapper.js
================
import React, { useEffect, useRef } from "react";
import Chart from "chart.js";
import PropTypes from "prop-types";

const ChartWrapper = ({
  chartId,
  chartType,
  data,
  options,
  title,
  subtitle,
  children,
}) => {
  const chartRef = useRef(null);

  useEffect(() => {
    const canvas = document.getElementById(chartId);
    if (canvas) {
      const ctx = canvas.getContext("2d");

      // Destroy existing chart instance if it exists to prevent duplication
      if (chartRef.current) {
        chartRef.current.destroy();
      }

      // Initialize new Chart instance
      chartRef.current = new Chart(ctx, {
        type: chartType,
        data: data,
        options: options,
      });
    }

    // Cleanup on unmount
    return () => {
      if (chartRef.current) {
        chartRef.current.destroy();
      }
    };
  }, [chartId, chartType, data, options]);

  return (
    <div className="relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded">
      <div className="rounded-t mb-0 px-4 py-3 bg-transparent">
        <div className="flex flex-wrap items-center">
          <div className="relative w-full max-w-full flex-grow flex-1">
            {subtitle && (
              <h6 className="uppercase text-blueGray-400 mb-1 text-xs font-semibold">
                {subtitle}
              </h6>
            )}
            {title && (
              <h2 className="text-blueGray-700 text-xl font-semibold">
                {title}
              </h2>
            )}
          </div>
          {children}
        </div>
      </div>
      <div className="p-4 flex-auto">
        {/* Chart */}
        <div className="relative h-350-px">
          <canvas id={chartId}></canvas>
        </div>
      </div>
    </div>
  );
};

ChartWrapper.propTypes = {
  chartId: PropTypes.string.isRequired,
  chartType: PropTypes.oneOf(["bar", "line", "pie", "doughnut", "radar", "polarArea"]).isRequired,
  data: PropTypes.object.isRequired,
  options: PropTypes.object,
  title: PropTypes.string,
  subtitle: PropTypes.string,
  children: PropTypes.node,
};

ChartWrapper.defaultProps = {
  options: {},
  title: "",
  subtitle: "",
  children: null,
};

export default ChartWrapper;

================
File: components/Cards/ChildCard.js
================
// components/Cards/ChildCard.js
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { useModal, MODAL_TYPES } from '../../contexts/ModalContext';
import axios from 'axios';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

// Validate apiUrl
if (!apiUrl) {
  throw new Error('NEXT_PUBLIC_API_URL is not defined');
}

const ChildCard = ({ child, onDelete, onUpdateChild }) => {
  const { openModal } = useModal();
  const [loading, setLoading] = useState(false); // Optional: To handle loading state
  const [error, setError] = useState(null); // Optional: To handle errors

  /**
   * Handles the edit action by fetching the latest child data and opening the modal.
   */
  const handleEdit = async (e) => {
    // If this function is called from the card's onClick, prevent default behavior
    if (e) {
      e.stopPropagation(); // Prevent triggering other onClick events
    }
    setLoading(true);
    setError(null);

    try {
      // Fetch child details
      const childResponse = await axios.get(
        `${apiUrl}/api/children/${child.child_id}`,
        { withCredentials: true }
      );

      // Fetch child items
      const itemsResponse = await axios.get(
        `${apiUrl}/api/children/${child.child_id}/items`,
        { withCredentials: true }
      );

      const mergedChild = {
        ...childResponse.data,
        items: itemsResponse.data,
      };

      openModal(MODAL_TYPES.EDIT_CHILD, {
        child: mergedChild,
        onUpdateChild,
      });
    } catch (err) {
      console.error('Error fetching child data:', err);
      setError('Failed to load child data. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div
      className="bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow cursor-pointer"
      onClick={handleEdit} // Set onClick to handleEdit
    >
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-4">
          {child.child_photo && (
            <img
              src={child.child_photo}
              alt={`${child.child_name}'s profile`}
              className="w-16 h-16 object-cover rounded-full"
            />
          )}
          <h5 className="text-lg font-medium">{child.child_name}</h5>
        </div>
        <div
          className="flex items-center space-x-2"
          onClick={(e) => e.stopPropagation()} // Prevent triggering handleEdit
        >
          <button
            onClick={handleEdit}
            className="bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-600 disabled:opacity-50"
            disabled={loading}
          >
            {loading ? 'Loading...' : 'Edit'}
          </button>
          <button
            onClick={() => onDelete(child.child_id)}
            className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
          >
            Delete
          </button>
        </div>
      </div>

      {error && (
        <p className="text-red-500 mt-2" role="alert">
          {error}
        </p>
      )}
    </div>
  );
};

ChildCard.propTypes = {
  child: PropTypes.shape({
    child_id: PropTypes.number.isRequired,
    child_name: PropTypes.string.isRequired,
    child_photo: PropTypes.string,
    items: PropTypes.arrayOf(
      PropTypes.shape({
        child_item_id: PropTypes.number,
        child_id: PropTypes.number,
        item_id: PropTypes.number,
        item_name: PropTypes.string,
        description: PropTypes.string,
        price: PropTypes.number,
        item_photo: PropTypes.string,
        quantity: PropTypes.number,
        users_with_item_in_cart: PropTypes.number,
      })
    ),
  }).isRequired,
  onDelete: PropTypes.func.isRequired,
  onUpdateChild: PropTypes.func.isRequired,
};

export default ChildCard;

================
File: components/Cards/ChildList.js
================
// components/Cards/ChildList.js
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import ChildCard from './ChildCard';
import { useModal, MODAL_TYPES } from '../../contexts/ModalContext';
import axios from 'axios';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

// Validate apiUrl
if (!apiUrl) {
  throw new Error('NEXT_PUBLIC_API_URL is not defined');
}

const ChildList = ({ driveId }) => {
  const [children, setChildren] = useState([]);
  const { openModal } = useModal();
  const [loading, setLoading] = useState(true); // Optional: To handle loading state
  const [error, setError] = useState(null); // Optional: To handle errors

  useEffect(() => {
    fetchChildrenWithItems();
  }, [driveId]);

  /**
   * Fetches all children for the given driveId and their associated items.
   */
  const fetchChildrenWithItems = async () => {
    setLoading(true);
    setError(null);
    try {
      // Step 1: Fetch all children for the given driveId
      const response = await axios.get(`${apiUrl}/api/drives/${driveId}`, {
        withCredentials: true,
      });

      const childrenData = response.data.children;

      if (!Array.isArray(childrenData)) {
        throw new Error('Invalid children data format received from server.');
      }

      // Step 2: For each child, fetch their associated items
      const childrenWithItems = await Promise.all(
        childrenData.map(async (child) => {
          try {
            const itemsResponse = await axios.get(
              `${apiUrl}/api/children/${child.child_id}/items`,
              { withCredentials: true }
            );

            const itemsData = itemsResponse.data;

            // Ensure itemsData is an array
            if (!Array.isArray(itemsData)) {
              console.warn(
                `Invalid items data format for child_id ${child.child_id}. Expected an array.`
              );
              return { ...child, items: [] };
            }

            // Merge items into the child object
            return { ...child, items: itemsData };
          } catch (itemsError) {
            console.error(
              `Error fetching items for child_id ${child.child_id}:`,
              itemsError
            );
            // Optionally, you can set items to an empty array or keep previous items
            return { ...child, items: [] };
          }
        })
      );

      setChildren(childrenWithItems);
    } catch (err) {
      console.error('Error fetching children:', err);
      setError('Failed to load children. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  /**
   * Handles the update of a child (e.g., after editing items).
   * @param {Object} updatedChild - The updated child object returned from the server.
   */
  const handleUpdateChild = (updatedChild) => {
    setChildren((prevChildren) =>
      prevChildren.map((child) =>
        child.child_id === updatedChild.child_id ? updatedChild : child
      )
    );
  };

  /**
   * Handles the deletion of a child.
   * @param {number} childId - The ID of the child to delete.
   */
  const handleDeleteChild = async (childId) => {
    if (confirm('Are you sure you want to delete this child?')) {
      try {
        await axios.delete(`${apiUrl}/api/children/${childId}`, {
          withCredentials: true,
        });
        // Remove the deleted child from the state
        setChildren((prevChildren) =>
          prevChildren.filter((child) => child.child_id !== childId)
        );
      } catch (error) {
        console.error(`Error deleting child_id ${childId}:`, error);
        alert('Failed to delete child. Please try again.');
      }
    }
  };

  /**
   * Triggers the modal to add a new child.
   */
  const triggerAddChildModal = (e) => {
    e.stopPropagation()
    openModal(MODAL_TYPES.ADD_CHILD, {
      driveId,
      onAddChild: fetchChildrenWithItems, // Refresh the list after adding
    });
  };

  /**
   * Optional: Loading and Error Handling UI
   */
  if (loading) {
    return <p>Loading children...</p>;
  }

  if (error) {
    return <p className="text-red-500">{error}</p>;
  }

  return (
    <div className="mt-4">
      <div className="flex justify-between items-center mb-4">
        <h4 className="text-lg font-semibold">Children in this Drive</h4>
        <button
          onClick={triggerAddChildModal}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Add Child
        </button>
      </div>

      {children.length > 0 ? (
        <div className="grid grid-cols-1 gap-6">
          {children.map((child) => (
            <ChildCard
              key={child.child_id}
              child={child}
              onDelete={handleDeleteChild}
              onUpdateChild={handleUpdateChild} // Pass the handler to update specific child
            />
          ))}
        </div>
      ) : (
        <p className="text-gray-600">No children added to this drive yet.</p>
      )}
    </div>
  );
};

ChildList.propTypes = {
  driveId: PropTypes.number.isRequired,
};

export default ChildList;

================
File: components/Cards/DriveCard.js
================
// components/Cards/DriveCard.js

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import ChildList from './ChildList';
import DriveItemList from './DriveItemList';
import { useModal, MODAL_TYPES } from '../../contexts/ModalContext';

const DriveCard = ({ drive, onDelete, onUpdateDrive }) => {
  const [showDetails, setShowDetails] = useState(false);
  const { openModal } = useModal();

  const handleDelete = () => {
    if (confirm('Are you sure you want to delete this drive?')) {
      onDelete(drive.drive_id);
    }
  };

  const handleEdit = (e) => {
    e.stopPropagation();
    openModal(MODAL_TYPES.EDIT_DRIVE, {
      drive,
      onUpdateDrive,
    });
  };

  const toggleDetails = (e) => {
    if (!e.key || e.key === 'Enter') {
      setShowDetails((prev) => !prev);
    }
  };

  return (
    <div
      className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow cursor-pointer"
      onClick={toggleDetails}
      role="button"
      aria-expanded={showDetails}
      tabIndex={0}
      onKeyPress={toggleDetails}
    >
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-xl font-bold mb-2">{drive.name}</h3>
          <p className="text-gray-600">{drive.description}</p>
        </div>
        <div className="flex items-center space-x-2" onClick={(e) => e.stopPropagation()}>
          <button
            onClick={toggleDetails}
            aria-expanded={showDetails}
            tabIndex={0}
            onKeyPress={toggleDetails}
            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
          >
            Manage
          </button>
          <button
            onClick={handleEdit}
            className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600"
          >
            Edit
          </button>
          <button
            onClick={handleDelete}
            className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
          >
            Delete
          </button>
        </div>
      </div>

      {/* Expanded Details: Show both drive items and children */}
      {showDetails && (
        <div className="mt-6">
          <p>
            <strong>Start Date:</strong>{' '}
            {new Date(drive.start_date).toLocaleDateString()}
          </p>
          <p>
            <strong>End Date:</strong>{' '}
            {new Date(drive.end_date).toLocaleDateString()}
          </p>
          <div className="mt-4">
            <h4 className="text-lg font-semibold">Drive Items</h4>
            <DriveItemList driveId={drive.drive_id} />
          </div>
          <div className="mt-4">
            <h4 className="text-lg font-semibold">Children with Items</h4>
            <ChildList driveId={drive.drive_id} />
          </div>
        </div>
      )}
    </div>
  );
};

DriveCard.propTypes = {
  drive: PropTypes.shape({
    drive_id: PropTypes.number.isRequired,
    name: PropTypes.string.isRequired,
    description: PropTypes.string,
    start_date: PropTypes.string.isRequired,
    end_date: PropTypes.string.isRequired,
  }).isRequired,
  onDelete: PropTypes.func.isRequired,
  onUpdateDrive: PropTypes.func.isRequired,
};

export default DriveCard;

================
File: components/Cards/DriveItemCard.js
================
// components/Cards/DriveItemCard.js

import React from 'react';
import PropTypes from 'prop-types';

const DriveItemCard = ({ item, onDeleteItem, onUpdateQuantity }) => {
  const handleRemove = (e) => {
    e.stopPropagation();
    onDeleteItem(item.drive_item_id);
  };

  // Example for updating quantity (if you store quantity on drive_items):
  const increment = () => {
    if (onUpdateQuantity) {
      onUpdateQuantity(item.drive_item_id, item.quantity + 1);
    }
  };
  const decrement = () => {
    if (onUpdateQuantity && item.quantity > 1) {
      onUpdateQuantity(item.drive_item_id, item.quantity - 1);
    }
  };

  return (
    <div className="flex justify-between items-center bg-gray-50 p-4 rounded shadow hover:shadow-md transition-shadow">
      <div className="flex items-center space-x-4">
        {item.item_photo && (
          <img
            src={item.item_photo}
            alt={item.item_name}
            className="w-16 h-16 object-cover rounded"
          />
        )}
        <div>
          <h5 className="text-lg font-semibold">{item.item_name}</h5>
          <p className="text-gray-600 text-sm">{item.description}</p>
          {typeof item.price === 'number' && (
            <p className="text-gray-800 font-bold">${item.price.toFixed(2)}</p>
          )}
          {/* If quantity is relevant */}
          {item.quantity !== undefined && (
            <div className="mt-2 flex items-center space-x-2">
              <button
                onClick={decrement}
                className="px-2 py-1 bg-gray-300 rounded hover:bg-gray-400"
              >
                -
              </button>
              <span>{item.quantity}</span>
              <button
                onClick={increment}
                className="px-2 py-1 bg-gray-300 rounded hover:bg-gray-400"
              >
                +
              </button>
            </div>
          )}
        </div>
      </div>

      <button
        onClick={handleRemove}
        className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
      >
        Remove
      </button>
    </div>
  );
};

DriveItemCard.propTypes = {
  item: PropTypes.shape({
    drive_item_id: PropTypes.number.isRequired,
    item_id: PropTypes.number.isRequired,
    item_name: PropTypes.string.isRequired,
    item_photo: PropTypes.string,
    description: PropTypes.string,
    price: PropTypes.number,
    quantity: PropTypes.number, // if storing quantity in drive_items
  }).isRequired,
  onDeleteItem: PropTypes.func.isRequired,
  onUpdateQuantity: PropTypes.func, // optional
};

export default DriveItemCard;

================
File: components/Cards/DriveItemList.js
================
// components/Cards/DriveItemList.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import PropTypes from 'prop-types';
import DriveItemCard from './DriveItemCard';
import { useModal, MODAL_TYPES } from '../../contexts/ModalContext';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const DriveItemList = ({ driveId }) => {
  const [driveItems, setDriveItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { openModal } = useModal();

  useEffect(() => {
    fetchDriveItems();
  }, [driveId]);

  const fetchDriveItems = async () => {
    setLoading(true);
    setError(null);
    try {
      // GET /api/drives/:driveId/items
      const response = await axios.get(`${apiUrl}/api/drives/${driveId}/items`, {
        withCredentials: true,
      });
      setDriveItems(response.data);
    } catch (err) {
      console.error('Error fetching drive items:', err);
      setError('Failed to load drive items. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteItem = async (driveItemId) => {
    if (confirm('Remove this item from the drive?')) {
      try {
        await axios.delete(`${apiUrl}/api/drives/${driveId}/items/${driveItemId}`, {
          withCredentials: true,
        });
        setDriveItems((prev) =>
          prev.filter((item) => item.drive_item_id !== driveItemId)
        );
      } catch (err) {
        console.error('Error deleting drive item:', err);
        alert('Could not delete drive item. Please try again.');
      }
    }
  };

  // Optionally handle updating quantity if you store per-item needed amounts
  const handleUpdateQuantity = async (driveItemId, newQuantity) => {
    try {
      await axios.put(`${apiUrl}/api/drives/${driveId}/items/${driveItemId}`, { quantity: newQuantity });
      fetchDriveItems();
    } catch (err) {
      console.error('Error updating quantity:', err);
    }
  };

  const handleAddItem = (e) => {
    e.stopPropagation(); // Prevent the click from bubbling up
    openModal(MODAL_TYPES.ITEM_SELECTION, {
      driveId,
      onItemSelected: () => {
        fetchDriveItems();
      },
    });
  };
  

  if (loading) return <p>Loading items...</p>;
  if (error) return <p className="text-red-500">{error}</p>;

  return (
    <div>
      <div className="flex justify-between mb-4">
        <button
            onClick={handleAddItem}
            className="bg-blue-500 ml-auto text-white px-4 py-2 rounded hover:bg-blue-600"
            >
            Add Item
        </button>
      </div>
      {driveItems.length === 0 ? (
        <p className="text-gray-600">No items in this drive yet.</p>
      ) : (
        <div className="grid grid-cols-1 gap-6">
          {driveItems.map((item) => (
            <DriveItemCard
              key={item.drive_item_id}
              item={item}
              onDeleteItem={handleDeleteItem}
              onUpdateQuantity={handleUpdateQuantity}
            />
          ))}
        </div>
      )}
    </div>
  );
};

DriveItemList.propTypes = {
  driveId: PropTypes.number.isRequired,
};

export default DriveItemList;

================
File: components/Cards/DriveListCard.js
================
import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import PropTypes from 'prop-types';

import { ArrowRightIcon } from '@heroicons/react/24/solid';

const DriveListCard = ({ drive }) => {
  const {
    drive_id,
    photo,
    name,
    description,
    org_city,
    org_state,
    totalNeeded = 0,
    totalPurchased = 0,
  } = drive;

  // Calculate how many are left to go and progress percent
  const remaining = Math.max(totalNeeded - totalPurchased, 0);
  const progressPercent = totalNeeded > 0 ? (totalPurchased / totalNeeded) * 100 : 0;

  return (
    <Link href={`/visible/drive/${drive_id}`} className="block group">
      <div className="border border-ggreen rounded-lg shadow-md h-full transition-shadow duration-300 hover:shadow-lg bg-white flex flex-col">
        {/* Inset Image Container with Location Overlay */}
        <div className="relative mx-4 mt-4 h-40 overflow-hidden">
          <Image
            src={photo || '/img/default-drive.png'}
            alt={name}
            fill
            className="object-cover rounded-lg"
          />
          {(org_city && org_state) && (
            <div className="absolute bottom-2 left-2 bg-white/80 text-gray-800 px-3 py-1 rounded-full text-xs shadow">
              {org_city}, {org_state}
            </div>
          )}
        </div>

        {/* Card Content */}
        <div className="flex flex-col flex-grow p-4">
          {/* Drive Name */}
          <h4 className="text-lg font-semibold text-gray-800 mb-1">
            {name}
          </h4>

          {/* Description */}
          <p className="text-sm text-gray-600 mb-3 line-clamp-2">
            {description || 'No description available.'}
          </p>

          {/* Progress Bar */}
          <div className="w-full h-2 bg-gray-200 rounded-full mb-2">
            <div
              className="h-full bg-ggreen transition-all duration-300"
              style={{ width: `${progressPercent}%` }}
            />
          </div>

          {/* "X to go!" text */}
          <p className="text-sm text-gray-700 font-medium mb-3">
            {remaining} to go!
          </p>

          {/* "View Drive" Button */}
          <div className="mt-auto">
            <div className="inline-flex items-center bg-ggreen text-white px-4 py-2 rounded-md text-sm font-semibold hover:bg-green-700 transition-colors">
              View Drive
              <ArrowRightIcon className="w-4 h-4 ml-2" />
            </div>
          </div>
        </div>
      </div>
    </Link>
  );
};

DriveListCard.propTypes = {
  drive: PropTypes.shape({
    drive_id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    photo: PropTypes.string,
    name: PropTypes.string.isRequired,
    description: PropTypes.string,
    org_city: PropTypes.string,
    org_state: PropTypes.string,
    totalNeeded: PropTypes.number,
    totalPurchased: PropTypes.number,
  }).isRequired,
};

export default DriveListCard;

================
File: components/Cards/OrganizationCard.js
================
// components/Cards/OrganizationCard.js

import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import PropTypes from 'prop-types';

const OrganizationCard = ({ org }) => {
  return (
    <Link href={`/visible/organization/${org.org_id}`} className="block group">
      <div className="border border-ggreen rounded-lg shadow-md 
                      h-full transition-shadow duration-300 hover:shadow-lg 
                      bg-white flex flex-col">
        {/* Slightly inward image container */}
        <div className="relative mx-4 mt-4 h-40 overflow-hidden">
          {/* Organization Image with rounded bottom corners */}
          <Image
            src={org.photo}
            alt={org.name}
            fill
            className="object-cover rounded-b-lg"
            priority={false}
          />
          {/* Location pill in bottom-left corner (only if city & state exist) */}
          {org.city && org.state && (
            <div className="absolute bottom-2 left-2 bg-white/80 text-gray-800 px-3 py-1 rounded-full text-xs shadow">
              {org.city}, {org.state}
            </div>
          )}
        </div>

        <div className="flex flex-col flex-grow p-4">
  <h4 className="text-xl font-semibold text-gray-800 mb-2">
    {org.name}
  </h4>
  <p className="text-gray-600 line-clamp-3 flex-grow">
    {org.description || 'No description available.'}
  </p>
  
  {/* Button pinned at bottom */}
  <div className="mt-auto">
    <span className="inline-block bg-ggreen text-white px-4 py-2 
                    rounded-md text-sm font-semibold 
                    group-hover:bg-green-700 transition-colors">
      View Organization
    </span>
  </div>
</div>
      </div>
    </Link>
  );
};

OrganizationCard.propTypes = {
  org: PropTypes.shape({
    org_id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    photo: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired,
    description: PropTypes.string,
    city: PropTypes.string,
    state: PropTypes.string,
  }).isRequired,
};

export default OrganizationCard;

================
File: components/Dropdowns/IndexDropdown.js
================
import React from "react";
import Link from "next/link";
import { createPopper } from "@popperjs/core";

const IndexDropdown = () => {
  // dropdown props
  const [dropdownPopoverShow, setDropdownPopoverShow] = React.useState(false);
  const btnDropdownRef = React.createRef();
  const popoverDropdownRef = React.createRef();
  const openDropdownPopover = () => {
    createPopper(btnDropdownRef.current, popoverDropdownRef.current, {
      placement: "bottom-start",
    });
    setDropdownPopoverShow(true);
  };
  const closeDropdownPopover = () => {
    setDropdownPopoverShow(false);
  };
  return (<>
    <a
      className="hover:text-blueGray-500 text-blueGray-700 px-3 py-4 lg:py-2 flex items-center text-xs uppercase font-bold"
      href="#pablo"
      ref={btnDropdownRef}
      onClick={(e) => {
        e.preventDefault();
        dropdownPopoverShow ? closeDropdownPopover() : openDropdownPopover();
      }}
    >
      Demo Pages
    </a>
    <div
      ref={popoverDropdownRef}
      className={
        (dropdownPopoverShow ? "block " : "hidden ") +
        "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48"
      }
    >
      <span
        className={
          "text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-nowrap bg-transparent text-blueGray-400"
        }
      >
        Admin Layout
      </span>
      <Link
        href="/admin/dashboard"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Dashboard
        
      </Link>
      <Link
        href="/admin/settings"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Settings
        
      </Link>
      <Link
        href="/admin/tables"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Tables
        
      </Link>
      <Link
        href="/admin/maps"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Maps
        
      </Link>
      <div className="h-0 mx-4 my-2 border border-solid border-blueGray-100" />
      <span
        className={
          "text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-nowrap bg-transparent text-blueGray-400"
        }
      >
        Auth Layout
      </span>
      <Link
        href="/auth/login"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Login
        
      </Link>
      <Link
        href="/auth/register"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Register
        
      </Link>
      <div className="h-0 mx-4 my-2 border border-solid border-blueGray-100" />
      <span
        className={
          "text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-nowrap bg-transparent text-blueGray-400"
        }
      >
        No Layout
      </span>
      <Link
        href="/landing"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Landing
        
      </Link>
      <Link
        href="/profile"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Profile
        
      </Link>
    </div>
  </>);
};

export default IndexDropdown;

================
File: components/Dropdowns/NotificationDropdown.js
================
import React from "react";
import { createPopper } from "@popperjs/core";

const NotificationDropdown = () => {
  // dropdown props
  const [dropdownPopoverShow, setDropdownPopoverShow] = React.useState(false);
  const btnDropdownRef = React.createRef();
  const popoverDropdownRef = React.createRef();
  const openDropdownPopover = () => {
    createPopper(btnDropdownRef.current, popoverDropdownRef.current, {
      placement: "bottom-start",
    });
    setDropdownPopoverShow(true);
  };
  const closeDropdownPopover = () => {
    setDropdownPopoverShow(false);
  };
  return (
    <>
      <a
        className="text-blueGray-500 block py-1 px-3"
        href="#pablo"
        ref={btnDropdownRef}
        onClick={(e) => {
          e.preventDefault();
          dropdownPopoverShow ? closeDropdownPopover() : openDropdownPopover();
        }}
      >
        <i className="fas fa-bell"></i>
      </a>
      <div
        ref={popoverDropdownRef}
        className={
          (dropdownPopoverShow ? "block " : "hidden ") +
          "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48"
        }
      >
        <a
          href="#pablo"
          className={
            "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
          }
          onClick={(e) => e.preventDefault()}
        >
          Action
        </a>
        <a
          href="#pablo"
          className={
            "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
          }
          onClick={(e) => e.preventDefault()}
        >
          Another action
        </a>
        <a
          href="#pablo"
          className={
            "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
          }
          onClick={(e) => e.preventDefault()}
        >
          Something else here
        </a>
        <div className="h-0 my-2 border border-solid border-blueGray-100" />
        <a
          href="#pablo"
          className={
            "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
          }
          onClick={(e) => e.preventDefault()}
        >
          Seprated link
        </a>
      </div>
    </>
  );
};

export default NotificationDropdown;

================
File: components/Dropdowns/PagesDropdown.js
================
import React from "react";
import Link from "next/link";
import { createPopper } from "@popperjs/core";

const PagesDropdown = () => {
  // dropdown props
  const [dropdownPopoverShow, setDropdownPopoverShow] = React.useState(false);
  const btnDropdownRef = React.createRef();
  const popoverDropdownRef = React.createRef();
  const openDropdownPopover = () => {
    createPopper(btnDropdownRef.current, popoverDropdownRef.current, {
      placement: "bottom-start",
    });
    setDropdownPopoverShow(true);
  };
  const closeDropdownPopover = () => {
    setDropdownPopoverShow(false);
  };
  return (<>
    <a
      className="lg:text-white lg:hover:text-blueGray-200 text-blueGray-700 px-3 py-4 lg:py-2 flex items-center text-xs uppercase font-bold"
      href="#pablo"
      ref={btnDropdownRef}
      onClick={(e) => {
        e.preventDefault();
        dropdownPopoverShow ? closeDropdownPopover() : openDropdownPopover();
      }}
    >
      Demo Pages
    </a>
    <div
      ref={popoverDropdownRef}
      className={
        (dropdownPopoverShow ? "block " : "hidden ") +
        "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48"
      }
    >
      <span
        className={
          "text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-nowrap bg-transparent text-blueGray-400"
        }
      >
        Admin Layout
      </span>
      <Link
        href="/admin/dashboard"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Dashboard
        
      </Link>
      <Link
        href="/admin/settings"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Settings
        
      </Link>
      <Link
        href="/admin/tables"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Tables
        
      </Link>
      <Link
        href="/admin/maps"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Maps
        
      </Link>
      <div className="h-0 mx-4 my-2 border border-solid border-blueGray-100" />
      <span
        className={
          "text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-nowrap bg-transparent text-blueGray-400"
        }
      >
        Auth Layout
      </span>
      <Link
        href="/auth/login"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Login
        
      </Link>
      <Link
        href="/auth/register"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Register
        
      </Link>
      <div className="h-0 mx-4 my-2 border border-solid border-blueGray-100" />
      <span
        className={
          "text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-nowrap bg-transparent text-blueGray-400"
        }
      >
        No Layout
      </span>
      <Link
        href="/landing"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Landing
        
      </Link>
      <Link
        href="/profile"
        className={
          "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
        }>
        
          Profile
        
      </Link>
    </div>
  </>);
};

export default PagesDropdown;

================
File: components/Dropdowns/TableDropdown.js
================
import React from "react";
import { createPopper } from "@popperjs/core";

const NotificationDropdown = () => {
  // dropdown props
  const [dropdownPopoverShow, setDropdownPopoverShow] = React.useState(false);
  const btnDropdownRef = React.createRef();
  const popoverDropdownRef = React.createRef();
  const openDropdownPopover = () => {
    createPopper(btnDropdownRef.current, popoverDropdownRef.current, {
      placement: "left-start",
    });
    setDropdownPopoverShow(true);
  };
  const closeDropdownPopover = () => {
    setDropdownPopoverShow(false);
  };
  return (
    <>
      <a
        className="text-blueGray-500 py-1 px-3"
        href="#pablo"
        ref={btnDropdownRef}
        onClick={(e) => {
          e.preventDefault();
          dropdownPopoverShow ? closeDropdownPopover() : openDropdownPopover();
        }}
      >
        <i className="fas fa-ellipsis-v"></i>
      </a>
      <div
        ref={popoverDropdownRef}
        className={
          (dropdownPopoverShow ? "block " : "hidden ") +
          "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48"
        }
      >
        <a
          href="#pablo"
          className={
            "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
          }
          onClick={(e) => e.preventDefault()}
        >
          Action
        </a>
        <a
          href="#pablo"
          className={
            "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
          }
          onClick={(e) => e.preventDefault()}
        >
          Another action
        </a>
        <a
          href="#pablo"
          className={
            "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
          }
          onClick={(e) => e.preventDefault()}
        >
          Something else here
        </a>
      </div>
    </>
  );
};

export default NotificationDropdown;

================
File: components/Dropdowns/UserDropdown.js
================
import React from "react";
import { createPopper } from "@popperjs/core";

const UserDropdown = () => {
  // dropdown props
  const [dropdownPopoverShow, setDropdownPopoverShow] = React.useState(false);
  const btnDropdownRef = React.createRef();
  const popoverDropdownRef = React.createRef();
  const openDropdownPopover = () => {
    createPopper(btnDropdownRef.current, popoverDropdownRef.current, {
      placement: "bottom-start",
    });
    setDropdownPopoverShow(true);
  };
  const closeDropdownPopover = () => {
    setDropdownPopoverShow(false);
  };
  return (
    <>
      <a
        className="text-blueGray-500 block"
        href="#pablo"
        ref={btnDropdownRef}
        onClick={(e) => {
          e.preventDefault();
          dropdownPopoverShow ? closeDropdownPopover() : openDropdownPopover();
        }}
      >
        <div className="items-center flex">
          <span className="w-12 h-12 text-sm text-white bg-blueGray-200 inline-flex items-center justify-center rounded-full">
            <img
              alt="..."
              className="w-full rounded-full align-middle border-none shadow-lg"
              src="/img/team-1-800x800.jpg"
            />
          </span>
        </div>
      </a>
      <div
        ref={popoverDropdownRef}
        className={
          (dropdownPopoverShow ? "block " : "hidden ") +
          "bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48"
        }
      >
        <a
          href="#pablo"
          className={
            "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
          }
          onClick={(e) => e.preventDefault()}
        >
          Action
        </a>
        <a
          href="#pablo"
          className={
            "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
          }
          onClick={(e) => e.preventDefault()}
        >
          Another action
        </a>
        <a
          href="#pablo"
          className={
            "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
          }
          onClick={(e) => e.preventDefault()}
        >
          Something else here
        </a>
        <div className="h-0 my-2 border border-solid border-blueGray-100" />
        <a
          href="#pablo"
          className={
            "text-sm py-2 px-4 font-normal block w-full whitespace-nowrap bg-transparent text-blueGray-700"
          }
          onClick={(e) => e.preventDefault()}
        >
          Seprated link
        </a>
      </div>
    </>
  );
};

export default UserDropdown;

================
File: components/Footers/Footer.js
================
// src/components/Footers/Footer.js

import React from "react";
// If you want actual icons, install react-icons and uncomment the imports below:
// import { FaFacebookF, FaInstagram, FaTwitter } from "react-icons/fa";

export default function Footer() {
  return (
    <footer className="bg-ggreen text-white px-6 py-8">
      <div className="max-w-7xl mx-auto">
        {/* Top Section: 4 columns of links */}
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-8">
          <div>
            <h4 className="font-semibold mb-2">Start a Drive</h4>
            <ul className="space-y-1 text-sm">
              <li>
                <a href="#">Find a Drive</a>
              </li>
              <li>
                <a href="#">Testimonials</a>
              </li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold mb-2">Register</h4>
            <ul className="space-y-1 text-sm">
              <li>
                <a href="#">Login</a>
              </li>
              <li>
                <a href="#">Dashboard</a>
              </li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold mb-2">Help Center</h4>
            <ul className="space-y-1 text-sm">
              <li>
                <a href="#">Resources</a>
              </li>
              <li>
                <a href="#">Contact Us</a>
              </li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold mb-2">Privacy Policy</h4>
            <ul className="space-y-1 text-sm">
              <li>
                <a href="#">Terms of Service</a>
              </li>
              <li>
                <a href="#">About Us</a>
              </li>
            </ul>
          </div>
        </div>

        {/* Bottom Section: border, copyright, icons, and extra link */}
        <div className="border-t border-gray-700 mt-8 pt-4 flex flex-col sm:flex-row items-center justify-between text-sm">
          {/* Left: Copyright text */}
          <div className="mb-4 sm:mb-0">
            <p>© 2025 GiftDrive, LLC. All rights reserved.</p>
          </div>

          {/* Right: Icons + Extra Link */}
          <div className="flex items-center space-x-6">
            {/* Social Icons (replace # with your links) */}
            <div className="flex space-x-4">
              <a href="#" aria-label="Facebook">
                {/* <FaFacebookF /> */}
                FB
              </a>
              <a href="#" aria-label="Instagram">
                {/* <FaInstagram /> */}
                IG
              </a>
              <a href="#" aria-label="X">
                {/* <FaTwitter /> or another X icon */}
                X
              </a>
            </div>
            <a
              href="#"
              className="inline-flex items-center text-gray-300 hover:text-white"
            >
              Tips, tricks, and advice around donation drives &rarr;
            </a>
          </div>
        </div>
      </div>
    </footer>
  );
}

================
File: components/Footers/FooterAdmin.js
================
import React from "react";
import Link from "next/link";

export default function FooterAdmin() {
  return (
    <>
      <footer className="block py-4">
        <div className="container mx-auto px-4">
          <hr className="mb-4 border-b-1 border-blueGray-200" />
          <div className="flex flex-wrap items-center md:justify-between justify-center">
            <div className="w-full md:w-4/12 px-4">
              <div className="text-sm text-blueGray-500 font-semibold py-1 text-center md:text-left">
                Copyright © {new Date().getFullYear()}{" "}
                <Link
                  href="/"
                  className="text-blueGray-500 hover:text-blueGray-700 text-sm font-semibold py-1"
                >
                  GiftDrive
                </Link>
              </div>
            </div>
            <div className="w-full md:w-8/12 px-4">
              <ul className="flex flex-wrap list-none md:justify-end  justify-center">
                <li>
                  <Link
                    href="/visible/about"
                    className="text-blueGray-600 hover:text-blueGray-800 text-sm font-semibold block py-1 px-3"
                  >
                    About Us
                  </Link>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </footer>
    </>
  );
}

================
File: components/Footers/FooterSmall.js
================
// components/FooterSmall.js

import React from "react";
import Link from "next/link";
import PropTypes from 'prop-types';

const FooterSmall = (props) => {
  return (
    <>
      <footer
        className={
          (props.absolute
            ? "absolute w-full bottom-0 bg-blueGray-800"
            : "relative") + " pb-6"
        }
      >
        <div className="container mx-auto px-4">
          <hr className="mb-6 border-b-1 border-blueGray-600" />
          <div className="flex flex-wrap items-center md:justify-between justify-center">
            <div className="w-full md:w-4/12 px-4">
              <div className="text-sm text-blueGray-500 font-semibold py-1 text-center md:text-left">
                Copyright © {new Date().getFullYear()}{" "}
                <Link
                  href="/"
                  className="text-white hover:text-blueGray-300 text-sm font-semibold py-1"
                >
                  GiftDrive
                </Link>
              </div>
            </div>
            <div className="w-full md:w-8/12 px-4">
              <ul className="flex flex-wrap list-none md:justify-end justify-center">
                <li>
                  <Link
                    href="/"
                    className="text-white hover:text-blueGray-300 text-sm font-semibold block py-1 px-3"
                  >
                    About Us
                  </Link>
                </li>
                {/* Add more list items as needed */}
              </ul>
            </div>
          </div>
        </div>
      </footer>
    </>
  );
};

FooterSmall.propTypes = {
  absolute: PropTypes.bool,
};

FooterSmall.defaultProps = {
  absolute: false,
};

export default FooterSmall;

================
File: components/Headers/HeaderStats.js
================
// components/Headers/HeaderStats.js

import React, { useContext } from "react";
import CardStats from "components/Cards/CardStats.js";
import { StatisticsContext } from "../../contexts/StatisticsContext";

export default function HeaderStats() {
  const { statistics } = useContext(StatisticsContext);

  if (!statistics) {
    // Optionally, you can return a loading indicator or placeholders
    return (
      <div className="relative bg-blueGray-800 md:pt-32 pb-32 pt-12">
        <div className="px-4 md:px-10 mx-auto w-full">
          <div className="flex flex-wrap">
            <div className="w-full px-4">
              <div className="flex flex-wrap">
                {/* Total Kids */}
                <div className="w-full sm:w-6/12 lg:w-3/12 px-4">
                  <CardStats
                    statSubtitle="Total Donees"
                    statTitle="Loading..."
                    statArrow="up"
                    statPercent="0.00"
                    statPercentColor="text-emerald-500"
                    statDescripiron="Since last month"
                    statIconName="fas fa-users"
                    statIconColor="bg-red-500"
                  />
                </div>
                {/* Kids Fully Gifted */}
                <div className="w-full sm:w-6/12 lg:w-3/12 px-4">
                  <CardStats
                    statSubtitle="Fully Gifted"
                    statTitle="Loading..."
                    statArrow="up"
                    statPercent="0.00"
                    statPercentColor="text-emerald-500"
                    statDescripiron="Since last month"
                    statIconName="fas fa-check-circle"
                    statIconColor="bg-emerald-500"
                  />
                </div>
                {/* Kids Partially Gifted */}
                <div className="w-full sm:w-6/12 lg:w-3/12 px-4">
                  <CardStats
                    statSubtitle="Partially Gifted"
                    statTitle="Loading..."
                    statArrow="down"
                    statPercent="0.00"
                    statPercentColor="text-red-500"
                    statDescripiron="Since last month"
                    statIconName="fas fa-exclamation-triangle"
                    statIconColor="bg-yellow-500"
                  />
                </div>
                {/* Kids Ungifted */}
                <div className="w-full sm:w-6/12 lg:w-3/12 px-4">
                  <CardStats
                    statSubtitle="Ungifted"
                    statTitle="Loading..."
                    statArrow="down"
                    statPercent="0.00"
                    statPercentColor="text-red-500"
                    statDescripiron="Since last month"
                    statIconName="fas fa-times-circle"
                    statIconColor="bg-red-500"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Calculate percentage changes (ensure previous month data is available)
  const calculatePercentageChange = (current, previous) => {
    if (!previous || previous === 0) return 0;
    return ((current - previous) / previous) * 100;
  };

  const totalKidsChange = calculatePercentageChange(
    statistics.totalKids,
    statistics.totalKidsLastMonth
  );
  const kidsFullyGiftedChange = calculatePercentageChange(
    statistics.kidsFullyGifted,
    statistics.kidsFullyGiftedLastMonth
  );
  const kidsPartiallyGiftedChange = calculatePercentageChange(
    statistics.kidsPartiallyGifted,
    statistics.kidsPartiallyGiftedLastMonth
  );
  const kidsUngiftedChange = calculatePercentageChange(
    statistics.kidsUngifted,
    statistics.kidsUngiftedLastMonth
  );

  return (
    <>
      {/* Header */}
      <div className="relative bg-blueGray-800 md:pt-32 pb-32 pt-12">
        <div className="px-4 md:px-10 mx-auto w-full">
          <div>
            <div className="flex flex-wrap">
              {/* Total Kids */}
              <div className="w-full sm:w-6/12 lg:w-3/12 px-4">
                <CardStats
                  statSubtitle="Total Donees"
                  statTitle={statistics.totalKids.toString()}
                  statArrow={totalKidsChange >= 0 ? "up" : "down"}
                  statPercent={Math.abs(totalKidsChange).toFixed(2)}
                  statPercentColor={
                    totalKidsChange >= 0 ? "text-emerald-500" : "text-red-500"
                  }
                  statDescripiron="Since last month"
                  statIconName="fas fa-users"
                  statIconColor="bg-red-500"
                />
              </div>
              {/* Kids Fully Gifted */}
              <div className="w-full sm:w-6/12 lg:w-3/12 px-4">
                <CardStats
                  statSubtitle="Fully Gifted"
                  statTitle={statistics.kidsFullyGifted.toString()}
                  statArrow={kidsFullyGiftedChange >= 0 ? "up" : "down"}
                  statPercent={Math.abs(kidsFullyGiftedChange).toFixed(2)}
                  statPercentColor={
                    kidsFullyGiftedChange >= 0 ? "text-emerald-500" : "text-red-500"
                  }
                  statDescripiron="Since last month"
                  statIconName="fas fa-check-circle"
                  statIconColor="bg-emerald-500"
                />
              </div>
              {/* Kids Partially Gifted */}
              <div className="w-full sm:w-6/12 lg:w-3/12 px-4">
                <CardStats
                  statSubtitle="Partially Gifted"
                  statTitle={statistics.kidsPartiallyGifted.toString()}
                  statArrow={kidsPartiallyGiftedChange >= 0 ? "up" : "down"}
                  statPercent={Math.abs(kidsPartiallyGiftedChange).toFixed(2)}
                  statPercentColor={
                    kidsPartiallyGiftedChange >= 0 ? "text-emerald-500" : "text-red-500"
                  }
                  statDescripiron="Since last month"
                  statIconName="fas fa-exclamation-triangle"
                  statIconColor="bg-yellow-500"
                />
              </div>
              {/* Kids Ungifted */}
              <div className="w-full sm:w-6/12 lg:w-3/12 px-4">
                <CardStats
                  statSubtitle="Ungifted"
                  statTitle={statistics.kidsUngifted.toString()}
                  statArrow={kidsUngiftedChange >= 0 ? "up" : "down"}
                  statPercent={Math.abs(kidsUngiftedChange).toFixed(2)}
                  statPercentColor={
                    kidsUngiftedChange >= 0 ? "text-emerald-500" : "text-red-500"
                  }
                  statDescripiron="Since last month"
                  statIconName="fas fa-times-circle"
                  statIconColor="bg-red-500"
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

================
File: components/Maps/MapExample.js
================
import React from "react";

function MapExample() {
  const mapRef = React.useRef(null);
  React.useEffect(() => {
    let google = window.google;
    let map = mapRef.current;
    let lat = "40.748817";
    let lng = "-73.985428";
    const myLatlng = new google.maps.LatLng(lat, lng);
    const mapOptions = {
      zoom: 12,
      center: myLatlng,
      scrollwheel: false,
      zoomControl: true,
      styles: [
        {
          featureType: "administrative",
          elementType: "labels.text.fill",
          stylers: [{ color: "#444444" }],
        },
        {
          featureType: "landscape",
          elementType: "all",
          stylers: [{ color: "#f2f2f2" }],
        },
        {
          featureType: "poi",
          elementType: "all",
          stylers: [{ visibility: "off" }],
        },
        {
          featureType: "road",
          elementType: "all",
          stylers: [{ saturation: -100 }, { lightness: 45 }],
        },
        {
          featureType: "road.highway",
          elementType: "all",
          stylers: [{ visibility: "simplified" }],
        },
        {
          featureType: "road.arterial",
          elementType: "labels.icon",
          stylers: [{ visibility: "off" }],
        },
        {
          featureType: "transit",
          elementType: "all",
          stylers: [{ visibility: "off" }],
        },
        {
          featureType: "water",
          elementType: "all",
          stylers: [{ color: "#cbd5e0" }, { visibility: "on" }],
        },
      ],
    };

    map = new google.maps.Map(map, mapOptions);

    const marker = new google.maps.Marker({
      position: myLatlng,
      map: map,
      animation: google.maps.Animation.DROP,
      title: "Notus NextJS!",
    });

    const contentString =
      '<div class="info-window-content"><h2>Notus NextJS</h2>' +
      "<p>A free Admin for Tailwind CSS, React, React Hooks, and NextJS.</p></div>";

    const infowindow = new google.maps.InfoWindow({
      content: contentString,
    });

    google.maps.event.addListener(marker, "click", function () {
      infowindow.open(map, marker);
    });
  });
  return (
    <>
      <div className="relative w-full rounded h-600-px">
        <div className="rounded h-full" ref={mapRef} />
      </div>
    </>
  );
}

export default MapExample;

================
File: components/Modals/AddChildModal.js
================
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import PropTypes from 'prop-types'; // Import PropTypes

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const AddChildModal = ({ onClose, onAddChild, driveId }) => {
  const [defaultChildren, setDefaultChildren] = useState([]);
  const [selectedChildId, setSelectedChildId] = useState(null);
  const [defaultItems, setDefaultItems] = useState([]);
  const [selectedItemIds, setSelectedItemIds] = useState([]);

  useEffect(() => {
    fetchDefaultChildren();
    fetchDefaultItems();
  }, []);

  const fetchDefaultChildren = async () => {
    try {
      const response = await axios.get(`${apiUrl}/api/children/default`, {
        withCredentials: true,
      });
      setDefaultChildren(response.data);
    } catch (error) {
      console.error('Error fetching default children:', error);
    }
  };

  const fetchDefaultItems = async () => {
    try {
      const response = await axios.get(`${apiUrl}/api/items/`, {
        withCredentials: true,
      });
      setDefaultItems(response.data);
    } catch (error) {
      console.error('Error fetching default items:', error);
    }
  };

  const handleItemSelection = (e) => {
    const itemId = e.target.value;
    const isChecked = e.target.checked;
    if (isChecked) {
      setSelectedItemIds([...selectedItemIds, itemId]);
    } else {
      setSelectedItemIds(selectedItemIds.filter((id) => id !== itemId));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      await axios.post(
        `${apiUrl}/api/children`,
        {
          default_child_id: parseInt(selectedChildId, 10),
          item_ids: selectedItemIds.map(Number),
          drive_id: parseInt(driveId, 10),
        },
        { withCredentials: true }
      );

      onAddChild(); // Refresh the child list
      onClose(); // Close the modal
    } catch (error) {
      console.error('Error adding child:', error);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-lg p-6 max-w-lg w-full">
        <h2 className="text-xl font-semibold mb-4">Add Child to Drive</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block font-medium mb-1">Select Child:</label>
            <select
              value={selectedChildId || ''}
              onChange={(e) => setSelectedChildId(e.target.value)}
              className="w-full border border-gray-300 rounded p-2"
              required
            >
              <option value="" disabled>
                -- Select a Child --
              </option>
              {defaultChildren.map((child) => (
  <option key={child.default_child_id} value={child.default_child_id}>
    {child.name}
  </option>
))}

            </select>
          </div>

          <div className="mb-4">
            <label className="block font-medium mb-1">Select Items Needed:</label>
            <div className="space-y-2">
              {defaultItems.map((item) => (
                <div key={item.item_id} className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    value={item.item_id}
                    checked={selectedItemIds.includes(item.item_id.toString())}
                    onChange={handleItemSelection}
                    className="w-4 h-4"
                  />
                  <label>
                    {item.name} - ${Number(item.price).toFixed(2)}
                  </label>
                </div>
              ))}
            </div>
          </div>

          <div className="flex justify-end space-x-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Add Child
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

// PropTypes Validation
AddChildModal.propTypes = {
  driveId: PropTypes.string.isRequired, // Validate driveId as a string
  onClose: PropTypes.func.isRequired, // Ensure onClose is a function
  onAddChild: PropTypes.func.isRequired, // Ensure onAddChild is a function
};

export default AddChildModal;

================
File: components/Modals/AddDriveModal.js
================
import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import axios from 'axios';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const AddDriveModal = ({ onClose, onAddDrive }) => {
  const [driveData, setDriveData] = useState({
    name: '',
    description: '',
    photo: null,
    start_date: '',
    end_date: '',
    is_item_only: false, // NEW FIELD
  });

  const [errors, setErrors] = useState({});
  const modalRef = useRef(null);

  // Focus management for accessibility
  useEffect(() => {
    if (modalRef.current) {
      const firstInput = modalRef.current.querySelector('input, textarea, button');
      if (firstInput) {
        firstInput.focus();
      }
    }

    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };
    window.addEventListener('keydown', handleKeyDown);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [onClose]);

  // Handle form fields, including the checkbox
  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (type === 'checkbox') {
      setDriveData({ ...driveData, [name]: checked });
    } else {
      setDriveData({ ...driveData, [name]: value });
    }
  };

  const handleFileChange = (e) => {
    setDriveData({ ...driveData, photo: e.target.files[0] });
  };

  // Basic validations
  const validateForm = () => {
    const newErrors = {};

    if (!driveData.name || driveData.name.trim().length < 3) {
      newErrors.name = 'Drive name must be at least 3 characters long.';
    }
    if (driveData.description.length > 500) {
      newErrors.description = 'Description must be under 500 characters.';
    }
    if (!driveData.start_date) {
      newErrors.start_date = 'Start date is required.';
    }
    if (!driveData.end_date) {
      newErrors.end_date = 'End date is required.';
    } else if (driveData.end_date < driveData.start_date) {
      newErrors.end_date = 'End date cannot be before the start date.';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Submit the form (POST new drive)
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    // Build FormData
    const formData = new FormData();
    formData.append('name', driveData.name.trim());
    formData.append('description', driveData.description.trim());
    if (driveData.photo) {
      formData.append('photo', driveData.photo);
    }
    formData.append('start_date', driveData.start_date);
    formData.append('end_date', driveData.end_date);
    formData.append('is_item_only', driveData.is_item_only); // NEW LINE

    try {
      const response = await axios.post(`${apiUrl}/api/drives`, formData, {
        withCredentials: true,
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      onAddDrive(response.data);
      onClose();
    } catch (error) {
      console.error('Error adding drive:', error);
      // Optionally set a global or local error message here
    }
  };

  return (
    <div
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
      role="dialog"
      aria-modal="true"
      aria-labelledby="add-drive-modal-title"
      ref={modalRef}
    >
      <div className="bg-white rounded-lg shadow-lg p-6 max-w-lg w-full relative">
        {/* Close Button */}
        <button
          onClick={onClose}
          className="absolute top-3 right-3 text-gray-600 hover:text-gray-800"
          aria-label="Close modal"
        >
          &times;
        </button>

        <h2 id="add-drive-modal-title" className="text-xl font-semibold mb-4">
          Add New Drive
        </h2>
        <form onSubmit={handleSubmit} noValidate>
          {/* Drive Name */}
          <div className="mb-4">
            <label htmlFor="drive-name" className="block font-medium mb-1">
              Drive Name
            </label>
            <input
              type="text"
              id="drive-name"
              name="name"
              value={driveData.name}
              onChange={handleInputChange}
              className={`w-full border ${
                errors.name ? 'border-red-500' : 'border-gray-300'
              } rounded p-2`}
              required
              minLength={3}
              aria-invalid={errors.name ? 'true' : 'false'}
              aria-describedby={errors.name ? 'drive-name-error' : undefined}
            />
            {errors.name && (
              <p id="drive-name-error" className="text-red-500 text-sm">
                {errors.name}
              </p>
            )}
          </div>

          {/* Description */}
          <div className="mb-4">
            <label htmlFor="drive-description" className="block font-medium mb-1">
              Description
            </label>
            <textarea
              id="drive-description"
              name="description"
              value={driveData.description}
              onChange={handleInputChange}
              className={`w-full border ${
                errors.description ? 'border-red-500' : 'border-gray-300'
              } rounded p-2`}
              maxLength={500}
              aria-invalid={errors.description ? 'true' : 'false'}
              aria-describedby={
                errors.description ? 'drive-description-error' : undefined
              }
            />
            {errors.description && (
              <p id="drive-description-error" className="text-red-500 text-sm">
                {errors.description}
              </p>
            )}
          </div>

          {/* Photo */}
          <div className="mb-4">
            <label htmlFor="drive-photo" className="block font-medium mb-1">
              Photo
            </label>
            <input
              type="file"
              id="drive-photo"
              accept="image/*"
              onChange={handleFileChange}
              className="w-full"
            />
            {driveData.photo && (
              <div className="mt-2">
                <img
                  src={URL.createObjectURL(driveData.photo)}
                  alt="Drive Preview"
                  className="w-32 h-32 object-cover rounded"
                />
              </div>
            )}
          </div>

          {/* Dates */}
          <div className="mb-4">
            <label htmlFor="start-date" className="block font-medium mb-1">
              Start Date
            </label>
            <input
              type="date"
              id="start-date"
              name="start_date"
              value={driveData.start_date}
              onChange={handleInputChange}
              className={`w-full border ${
                errors.start_date ? 'border-red-500' : 'border-gray-300'
              } rounded p-2`}
              required
              aria-invalid={errors.start_date ? 'true' : 'false'}
              aria-describedby={
                errors.start_date ? 'start-date-error' : undefined
              }
            />
            {errors.start_date && (
              <p id="start-date-error" className="text-red-500 text-sm">
                {errors.start_date}
              </p>
            )}
          </div>

          <div className="mb-4">
            <label htmlFor="end-date" className="block font-medium mb-1">
              End Date
            </label>
            <input
              type="date"
              id="end-date"
              name="end_date"
              value={driveData.end_date}
              onChange={handleInputChange}
              className={`w-full border ${
                errors.end_date ? 'border-red-500' : 'border-gray-300'
              } rounded p-2`}
              required
              aria-invalid={errors.end_date ? 'true' : 'false'}
              aria-describedby={errors.end_date ? 'end-date-error' : undefined}
            />
            {errors.end_date && (
              <p id="end-date-error" className="text-red-500 text-sm">
                {errors.end_date}
              </p>
            )}
          </div>

          {/* NEW: Checkbox for "Item Only" */}
          <div className="mb-4">
            <label htmlFor="is_item_only" className="flex items-center space-x-2">
              <input
                type="checkbox"
                id="is_item_only"
                name="is_item_only"
                checked={driveData.is_item_only}
                onChange={handleInputChange}
                className="mr-2"
              />
              <span className="block font-medium">Is Item-Only Drive?</span>
            </label>
            <p className="text-sm text-gray-500">
              If checked, you’ll manage items directly for this drive instead of children.
            </p>
          </div>

          {/* Buttons */}
          <div className="flex justify-end space-x-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Add Drive
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

AddDriveModal.propTypes = {
  onClose: PropTypes.func.isRequired,
  onAddDrive: PropTypes.func.isRequired,
};

export default AddDriveModal;

================
File: components/Modals/ChildModal.js
================
// components/Modals/ChildModal.js
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { XMarkIcon } from '@heroicons/react/24/solid';
import Image from 'next/image';
import axios from 'axios';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export default function ChildModal({ isOpen, onClose, childId }) {
  const [childData, setChildData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Fetch child details whenever childId changes (and modal is open)
  useEffect(() => {
    if (!isOpen || !childId) return;
    const fetchChild = async () => {
      setLoading(true);
      setError(null);
      try {
        const childResponse = await axios.get(`${apiUrl}/api/children/${childId}`);
        const itemsResponse = await axios.get(`${apiUrl}/api/children/${childId}/items`);
        const fetchedChild = childResponse.data;
        const fetchedItems = itemsResponse.data || [];
        setChildData({
          ...fetchedChild,
          items: fetchedItems,
        });
      } catch (err) {
        console.error('Error fetching child data:', err);
        setError('Failed to load child data.');
      } finally {
        setLoading(false);
      }
    };
    fetchChild();
  }, [isOpen, childId]);

  if (!isOpen) return null;

  const handleClose = () => {
    // Optional: reset childData if you want
    setChildData(null);
    onClose();
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
      <div className="relative bg-white w-full max-w-3xl rounded-lg shadow-lg p-6">
        {/* Close Button */}
        <button
          onClick={handleClose}
          className="absolute top-3 right-3 text-gray-600 hover:text-gray-800"
        >
          <XMarkIcon className="h-6 w-6" />
        </button>

        {loading ? (
          <p className="text-center">Loading...</p>
        ) : error ? (
          <p className="text-center text-red-500">{error}</p>
        ) : childData ? (
          <>
            {/* Child Basic Info */}
            <div className="flex items-center mb-4">
              {childData.photo && (
                <div className="mr-4">
                  <Image
                    src={childData.photo || '/img/default-child.png'}
                    alt={childData.child_name}
                    width={80}
                    height={80}
                    className="object-cover rounded-full"
                  />
                </div>
              )}
              <div>
                <h2 className="text-2xl font-semibold text-ggreen">
                  {childData.child_name}
                </h2>
                {childData.age && <p>Age: {childData.age}</p>}
                {childData.gender && <p>Gender: {childData.gender}</p>}
              </div>
            </div>

            {/* Items Section */}
            <div>
              <h3 className="text-lg font-semibold mb-2 text-ggreen">
                Items Needed
              </h3>
              {childData.items.length > 0 ? (
                <ul className="space-y-3">
                  {childData.items.map((item) => (
                    <li
                      key={item.child_item_id}
                      className="p-3 border border-gray-300 rounded-md"
                    >
                      <div className="flex items-center">
                        {item.item_photo && (
                          <Image
                            src={item.item_photo || '/img/default-item.png'}
                            alt={item.item_name}
                            width={50}
                            height={50}
                            className="object-cover rounded mr-3"
                          />
                        )}
                        <div>
                          <p className="font-semibold">{item.item_name}</p>
                          <p className="text-sm text-gray-600">
                            ${Number(item.price).toFixed(2)}
                          </p>
                          <p className="text-xs text-gray-500">
                            Needed: {item.needed} | Purchased: {item.purchased} |{' '}
                            Remaining: {item.remaining}
                          </p>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-gray-600">No items for this child.</p>
              )}
            </div>
          </>
        ) : (
          <p>No child data.</p>
        )}
      </div>
    </div>
  );
}

ChildModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  childId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
};

================
File: components/Modals/EditChildModal.js
================
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import PropTypes from 'prop-types';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

// Validate apiUrl
if (!apiUrl) {
  throw new Error('NEXT_PUBLIC_API_URL is not defined');
}

const EditChildModal = ({ child, onClose, onUpdateChild }) => {
  // State to manage current items with quantities
  const [currentItems, setCurrentItems] = useState(
    child.items?.map((item) => ({
      child_item_id: Number(item.child_item_id),
      item_id: Number(item.item_id),
      item_name: item.item_name,
      price: Number(item.price),
      quantity: Number(item.quantity) || 1,
      item_photo: item.item_photo,
    })) || []
  );

  // State to manage all items fetched from the backend
  const [allItems, setAllItems] = useState([]);
  
  // State for search term
  const [searchTerm, setSearchTerm] = useState('');

  const [error, setError] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    fetchAllItems();
    fetchCurrentItems(); 
  }, []);

  const fetchAllItems = async () => {
    try {
      const response = await axios.get(`${apiUrl}/api/items/`, {
        withCredentials: true,
      });
      setAllItems(response.data);
    } catch (error) {
      console.error('Error fetching all items:', error);
      setError('Failed to load items. Please try again.');
    }
  };

  // Compute available items by excluding current items
  const availableItems = allItems.filter(
    (item) => !currentItems.some((ci) => ci.item_id === item.item_id)
  );

  // Handler to adjust quantity
  const handleQuantityChange = (childItemId, delta) => {
    setCurrentItems((prevItems) =>
      prevItems.map((item) =>
        item.child_item_id === childItemId
          ? {
              ...item,
              quantity: Math.max(item.quantity + delta, 1),
            }
          : item
      )
    );
  };

  // Handler to remove an item
  // Handler to remove an item
const handleRemoveItem = async (childItemId) => {
    try {
      const response = await axios.delete(
        `${apiUrl}/api/children/${child.child_id}/items/${childItemId}`,
        {
          withCredentials: true,
        }
      );

      console.log('Item removed successfully:', response.data);

      // Fetch the updated list of child items
      await fetchCurrentItems();
    } catch (error) {
      console.error('Error removing item from child:', error);
      setError(
        error.response?.data?.error ||
          'Failed to remove item. Please try again.'
      );
    }
};


  // Handler to add an item
  // Handler to add an item
  const handleAddItem = async (item) => {
    try {
      // Send POST request to add the item
      const response = await axios.post(
        `${apiUrl}/api/children/${child.child_id}/items`,
        {
          item_id: item.item_id,
          config_id: item.config_id || null, // Include config_id if applicable
          quantity: 1, // Default quantity
        },
        {
          headers: {
            'Content-Type': 'application/json',
          },
          withCredentials: true,
        }
      );

      console.log('Item added successfully:', response.data);

      // Fetch the updated list of child items
      await fetchCurrentItems();
    } catch (error) {
      console.error('Error adding item to child:', error);
      setError(
        error.response?.data?.error ||
          'Failed to add item to child. Please try again.'
      );
    }
  };

  // Function to fetch current items for the child
  const fetchCurrentItems = async () => {
    try {
      const response = await axios.get(
        `${apiUrl}/api/children/${child.child_id}/items`,
        {
          withCredentials: true,
        }
      );

      // Update the currentItems state with fetched data
      setCurrentItems(
        response.data.map((item) => ({
          child_item_id: Number(item.child_item_id),
          item_id: Number(item.item_id),
          item_name: item.item_name,
          price: Number(item.price),
          quantity: Number(item.quantity) || 1,
          item_photo: item.item_photo,
        }))
      );
    } catch (error) {
      console.error('Error fetching current items:', error);
      setError('Failed to load current items. Please try again.');
    }
  };



  // Handler for search input
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };
  

  // Filtered available items based on search term
  const filteredAvailableItems = availableItems.filter((item) =>
    item.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setIsSubmitting(true);
  
    try {
      const payload = {
        child_item_ids: currentItems.map((item) => item.child_item_id),
        quantities: currentItems.reduce((acc, item) => {
          acc[item.child_item_id] = item.quantity;
          return acc;
        }, {}),
      };
  
      const response = await axios.put(
        `${apiUrl}/api/children/${child.child_id}`,
        payload,
        {
          headers: {
            'Content-Type': 'application/json',
          },
          withCredentials: true,
        }
      );
  
      console.log('Child updated successfully:', response.data);
  
      onUpdateChild(response.data);
      onClose();
    } catch (error) {
      console.error('Error updating child:', error);
      setError(
        error.response?.data?.error ||
          'Failed to update child. Please check your inputs and try again.'
      );
    } finally {
      setIsSubmitting(false);
    }
  };
  

  return (
    <div
      role="dialog"
      aria-modal="true"
      aria-labelledby="edit-child-modal-title"
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 overflow-auto"
    >
      <div
        className="bg-white rounded-lg shadow-lg p-6 max-w-3xl w-full mx-4 my-8"
        role="document"
      >
        <h2 id="edit-child-modal-title" className="text-2xl font-semibold mb-6">
          Manage Child&apos;s Items
        </h2>
        <form onSubmit={handleSubmit}>
          {error && (
            <div className="mb-4 text-red-500" role="alert">
              {error}
            </div>
          )}

          {/* Current Items Section */}
          <div className="mb-6">
            <h3 className="text-xl font-medium mb-3">Current Items</h3>
            {currentItems.length === 0 ? (
              <p className="text-gray-600">No items currently associated with this child.</p>
            ) : (
              <ul className="space-y-4">
                {currentItems.map((item) => (
                  <li
                    key={item.child_item_id}
                    className="flex items-center justify-between bg-gray-100 p-4 rounded"
                  >
                    <div className="flex items-center space-x-4">
                      {item.item_photo && (
                        <img
                          src={item.item_photo}
                          alt={item.item_name}
                          className="w-16 h-16 object-cover rounded"
                        />
                      )}
                      <div>
                        <h4 className="text-lg font-semibold">{item.item_name}</h4>
                        <p className="text-gray-600">${item.price.toFixed(2)}</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-4">
                      <div className="flex items-center space-x-2">
                        <button
                          type="button"
                          onClick={() => handleQuantityChange(item.child_item_id, -1)}
                          className="px-2 py-1 bg-gray-300 rounded hover:bg-gray-400"
                          aria-label={`Decrease quantity of ${item.item_name}`}
                        >
                          -
                        </button>
                        <span>{item.quantity}</span>
                        <button
                          type="button"
                          onClick={() => handleQuantityChange(item.child_item_id, 1)}
                          className="px-2 py-1 bg-gray-300 rounded hover:bg-gray-400"
                          aria-label={`Increase quantity of ${item.item_name}`}
                        >
                          +
                        </button>
                      </div>
                      <button
                        type="button"
                        onClick={() => handleRemoveItem(item.child_item_id)}
                        className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600"
                        aria-label={`Remove ${item.item_name} from child`}
                      >
                        Remove
                      </button>
                    </div>
                  </li>
                ))}

              </ul>
            )}
          </div>

          {/* Available Items Section */}
          <div className="mb-6">
            <h3 className="text-xl font-medium mb-3">Available Items</h3>
            <div className="mb-4">
              <input
                type="text"
                placeholder="Search items..."
                value={searchTerm}
                onChange={handleSearchChange}
                className="w-full border border-gray-300 rounded p-2"
                aria-label="Search available items"
              />
            </div>
            {filteredAvailableItems.length === 0 ? (
              <p className="text-gray-600">No available items match your search.</p>
            ) : (
              <ul className="space-y-4 max-h-64 overflow-y-auto">
                {filteredAvailableItems.map((item) => (
                  <li
                    key={item.item_id}
                    className="flex items-center justify-between bg-gray-50 p-4 rounded"
                  >
                    <div className="flex items-center space-x-4">
                      {item.image_url && (
                        <img
                          src={item.image_url}
                          alt={item.name}
                          className="w-16 h-16 object-cover rounded"
                        />
                      )}
                      <div>
                        <h4 className="text-lg font-semibold">{item.name}</h4>
                        <p className="text-gray-600">${Number(item.price).toFixed(2)}</p>
                      </div>
                    </div>
                    <button
                      type="button"
                      onClick={() => handleAddItem(item)}
                      className="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600"
                      aria-label={`Add ${item.name} to child`}
                    >
                      Add
                    </button>
                  </li>
                ))}
              </ul>
            )}
          </div>

          {/* Submit and Cancel Buttons */}
          <div className="flex justify-end space-x-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className={`px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 ${
                isSubmitting ? 'opacity-50 cursor-not-allowed' : ''
              }`}
            >
              {isSubmitting ? 'Saving...' : 'Save Changes'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

// Enhanced PropTypes Validation
EditChildModal.propTypes = {
  child: PropTypes.shape({
    child_id: PropTypes.number.isRequired,
    child_name: PropTypes.string.isRequired,
    child_photo: PropTypes.string,
    items: PropTypes.arrayOf(
      PropTypes.shape({
        child_item_id: PropTypes.number,
        child_id: PropTypes.number,
        item_id: PropTypes.number,
        item_name: PropTypes.string,
        description: PropTypes.string,
        price: PropTypes.number,
        item_photo: PropTypes.string,
        quantity: PropTypes.number,
        users_with_item_in_cart: PropTypes.number,
      })
    ),
  }).isRequired,
  onClose: PropTypes.func.isRequired,
  onUpdateChild: PropTypes.func.isRequired,
};

export default EditChildModal;

================
File: components/Modals/EditDriveModal.js
================
import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import axios from 'axios';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const EditDriveModal = ({ drive, onClose, onUpdateDrive }) => {
  // We initialize from existing props
  const [driveData, setDriveData] = useState({
    name: drive.name || '',
    description: drive.description || '',
    photo: null, // New photo file if uploaded
    start_date: drive.start_date || '',
    end_date: drive.end_date || '',
    is_item_only: drive.is_item_only || false, // NEW
  });

  const [errors, setErrors] = useState({});
  const modalRef = useRef(null);

  // Focus management for accessibility
  useEffect(() => {
    if (modalRef.current) {
      const firstInput = modalRef.current.querySelector('input, textarea, button');
      if (firstInput) {
        firstInput.focus();
      }
    }

    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };
    window.addEventListener('keydown', handleKeyDown);

    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [onClose]);

  // Handle changes, including the checkbox
  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (type === 'checkbox') {
      setDriveData({ ...driveData, [name]: checked });
    } else {
      setDriveData({ ...driveData, [name]: value });
    }
  };

  const handleFileChange = (e) => {
    setDriveData({ ...driveData, photo: e.target.files[0] });
  };

  const validateForm = () => {
    const newErrors = {};

    if (!driveData.name || driveData.name.trim().length < 3) {
      newErrors.name = 'Drive name must be at least 3 characters long.';
    }
    if (driveData.description.length > 500) {
      newErrors.description = 'Description must be under 500 characters.';
    }
    if (!driveData.start_date) {
      newErrors.start_date = 'Start date is required.';
    }
    if (!driveData.end_date) {
      newErrors.end_date = 'End date is required.';
    } else if (driveData.end_date < driveData.start_date) {
      newErrors.end_date = 'End date cannot be before the start date.';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) return; // Prevent submission if validation fails

    const formData = new FormData();
    formData.append('name', driveData.name.trim());
    formData.append('description', driveData.description.trim());
    if (driveData.photo) {
      formData.append('photo', driveData.photo);
    }
    formData.append('start_date', driveData.start_date);
    formData.append('end_date', driveData.end_date);
    formData.append('is_item_only', driveData.is_item_only); // NEW

    try {
      const response = await axios.put(
        `${apiUrl}/api/drives/${drive.drive_id}`,
        formData,
        {
          withCredentials: true,
          headers: { 'Content-Type': 'multipart/form-data' },
        }
      );

      onUpdateDrive(response.data); // Update the drive in the parent
      onClose();
    } catch (error) {
      console.error('Error updating drive:', error);
      // Optionally set a global or local error message here
    }
  };

  return (
    <div
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
      role="dialog"
      aria-modal="true"
      aria-labelledby="edit-drive-modal-title"
      ref={modalRef}
    >
      <div className="bg-white rounded-lg shadow-lg p-6 max-w-lg w-full relative">
        {/* Close Button */}
        <button
          onClick={onClose}
          className="absolute top-3 right-3 text-gray-600 hover:text-gray-800"
          aria-label="Close modal"
        >
          &times;
        </button>

        <h2 id="edit-drive-modal-title" className="text-xl font-semibold mb-4">
          Edit Drive
        </h2>
        <form onSubmit={handleSubmit} noValidate>
          {/* Drive Name */}
          <div className="mb-4">
            <label htmlFor="drive-name" className="block font-medium mb-1">
              Drive Name
            </label>
            <input
              type="text"
              id="drive-name"
              name="name"
              value={driveData.name}
              onChange={handleInputChange}
              className={`w-full border ${
                errors.name ? 'border-red-500' : 'border-gray-300'
              } rounded p-2`}
              required
              minLength={3}
              aria-invalid={errors.name ? 'true' : 'false'}
              aria-describedby={errors.name ? 'drive-name-error' : undefined}
            />
            {errors.name && (
              <p id="drive-name-error" className="text-red-500 text-sm">
                {errors.name}
              </p>
            )}
          </div>

          {/* Description */}
          <div className="mb-4">
            <label htmlFor="drive-description" className="block font-medium mb-1">
              Description
            </label>
            <textarea
              id="drive-description"
              name="description"
              value={driveData.description}
              onChange={handleInputChange}
              className={`w-full border ${
                errors.description ? 'border-red-500' : 'border-gray-300'
              } rounded p-2`}
              maxLength={500}
              aria-invalid={errors.description ? 'true' : 'false'}
              aria-describedby={
                errors.description ? 'drive-description-error' : undefined
              }
            />
            {errors.description && (
              <p id="drive-description-error" className="text-red-500 text-sm">
                {errors.description}
              </p>
            )}
          </div>

          {/* Photo */}
          <div className="mb-4">
            <label htmlFor="drive-photo" className="block font-medium mb-1">
              Photo
            </label>
            <input
              type="file"
              id="drive-photo"
              accept="image/*"
              onChange={handleFileChange}
              className="w-full"
            />
            {/* If old photo exists and no new photo is chosen, show old one */}
            {drive.photo && !driveData.photo && (
              <div className="mt-2">
                <p>Current Photo:</p>
                <img
                  src={drive.photo}
                  alt={drive.name}
                  className="w-32 h-32 object-cover rounded"
                />
              </div>
            )}
            {/* Preview of new photo, if chosen */}
            {driveData.photo && (
              <div className="mt-2">
                <img
                  src={URL.createObjectURL(driveData.photo)}
                  alt="Drive Preview"
                  className="w-32 h-32 object-cover rounded"
                />
              </div>
            )}
          </div>

          {/* Dates */}
          <div className="mb-4">
            <label htmlFor="start-date" className="block font-medium mb-1">
              Start Date
            </label>
            <input
              type="date"
              id="start-date"
              name="start_date"
              value={driveData.start_date}
              onChange={handleInputChange}
              className={`w-full border ${
                errors.start_date ? 'border-red-500' : 'border-gray-300'
              } rounded p-2`}
              required
              aria-invalid={errors.start_date ? 'true' : 'false'}
              aria-describedby={
                errors.start_date ? 'start-date-error' : undefined
              }
            />
            {errors.start_date && (
              <p id="start-date-error" className="text-red-500 text-sm">
                {errors.start_date}
              </p>
            )}
          </div>

          <div className="mb-4">
            <label htmlFor="end-date" className="block font-medium mb-1">
              End Date
            </label>
            <input
              type="date"
              id="end-date"
              name="end_date"
              value={driveData.end_date}
              onChange={handleInputChange}
              className={`w-full border ${
                errors.end_date ? 'border-red-500' : 'border-gray-300'
              } rounded p-2`}
              required
              aria-invalid={errors.end_date ? 'true' : 'false'}
              aria-describedby={errors.end_date ? 'end-date-error' : undefined}
            />
            {errors.end_date && (
              <p id="end-date-error" className="text-red-500 text-sm">
                {errors.end_date}
              </p>
            )}
          </div>

          {/* NEW: is_item_only field */}
          <div className="mb-4">
            <label htmlFor="is_item_only" className="flex items-center space-x-2">
              <input
                type="checkbox"
                id="is_item_only"
                name="is_item_only"
                checked={driveData.is_item_only}
                onChange={handleInputChange}
                className="mr-2"
              />
              <span className="block font-medium">Is Item-Only Drive?</span>
            </label>
            <p className="text-sm text-gray-500">
              If checked, you manage items directly instead of children.
            </p>
          </div>

          {/* Buttons */}
          <div className="flex justify-end space-x-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Save Changes
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

EditDriveModal.propTypes = {
  drive: PropTypes.shape({
    drive_id: PropTypes.number.isRequired,
    name: PropTypes.string,
    description: PropTypes.string,
    start_date: PropTypes.string,
    end_date: PropTypes.string,
    photo: PropTypes.string,
    is_item_only: PropTypes.bool, // new
  }).isRequired,
  onClose: PropTypes.func.isRequired,
  onUpdateDrive: PropTypes.func.isRequired,
};

export default EditDriveModal;

================
File: components/Modals/ItemSelectionModal.js
================
// components/Modals/ItemSelectionModal.js

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import axios from 'axios';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const ItemSelectionModal = ({ driveId, onItemSelected, onClose }) => {
  const [defaultItems, setDefaultItems] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchDefaultItems();
  }, []);

  const fetchDefaultItems = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.get(`${apiUrl}/api/items/`, {
        withCredentials: true,
      });
      setDefaultItems(response.data);
    } catch (err) {
      console.error('Error fetching default items:', err);
      setError('Failed to load items. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const filteredItems = defaultItems.filter((item) =>
    item.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleAddItem = async (item) => {
    try {
      // POST to add the selected item to the drive.
      // For simplicity, we use quantity = 1 and assume no configuration.
      await axios.post(
        `${apiUrl}/api/drives/${driveId}/items`,
        {
          item_id: item.item_id,
          config_id: null,
          quantity: 1,
        },
        { withCredentials: true }
      );
      // Notify parent (e.g., to refresh the drive items list)
      if (onItemSelected) onItemSelected();
      onClose(); // Close the modal
    } catch (err) {
      console.error('Error adding item:', err);
      setError('Failed to add item. Please try again.');
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-lg p-6 max-w-lg w-full overflow-auto">
        <h2 className="text-xl font-semibold mb-4">Select an Item to Add</h2>
        {error && <p className="text-red-500 mb-4">{error}</p>}
        <input
          type="text"
          placeholder="Search items..."
          value={searchTerm}
          onChange={handleSearchChange}
          className="w-full border border-gray-300 rounded p-2 mb-4"
        />
        {loading ? (
          <p>Loading items...</p>
        ) : (
          <ul className="space-y-4 max-h-64 overflow-y-auto">
            {filteredItems.length === 0 ? (
              <p>No items match your search.</p>
            ) : (
              filteredItems.map((item) => (
                <li
                  key={item.item_id}
                  className="flex items-center justify-between bg-gray-50 p-4 rounded"
                >
                  <div className="flex items-center space-x-4">
                    {item.image_url && (
                      <img
                        src={item.image_url}
                        alt={item.name}
                        className="w-16 h-16 object-cover rounded"
                      />
                    )}
                    <div>
                      <h4 className="text-lg font-semibold">{item.name}</h4>
                      <p className="text-gray-600">${Number(item.price).toFixed(2)}</p>
                    </div>
                  </div>
                  <button
                    type="button"
                    onClick={() => handleAddItem(item)}
                    className="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600"
                    aria-label={`Add ${item.name} to drive`}
                  >
                    Add
                  </button>
                </li>
              ))
            )}
          </ul>
        )}
        <button
          type="button"
          onClick={onClose}
          className="mt-4 px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
        >
          Cancel
        </button>
      </div>
    </div>
  );
};

ItemSelectionModal.propTypes = {
  driveId: PropTypes.number.isRequired,
  onItemSelected: PropTypes.func, // Callback to refresh the drive items list
  onClose: PropTypes.func.isRequired,
};

export default ItemSelectionModal;

================
File: components/Modals/ModalRenderer.js
================
// ModalRenderer.js
import React from 'react';
import { useModal, MODAL_TYPES } from '../../contexts/ModalContext';
import AddChildModal from './AddChildModal';
import EditChildModal from './EditChildModal';
import AddDriveModal from './AddDriveModal';
import EditDriveModal from './EditDriveModal';
import ItemSelectionModal from './ItemSelectionModal'; // Import the new modal

const ModalRenderer = () => {
  const { modalState, closeModal } = useModal();

  if (!modalState.isOpen || !modalState.modalType) {
    return null;
  }

  const { modalType, modalProps } = modalState;

  switch (modalType) {
    case MODAL_TYPES.ADD_CHILD:
      return <AddChildModal onClose={closeModal} {...modalProps} />;
    case MODAL_TYPES.EDIT_CHILD:
      return <EditChildModal onClose={closeModal} {...modalProps} />;
    case MODAL_TYPES.ADD_DRIVE:
      return <AddDriveModal onClose={closeModal} {...modalProps} />;
    case MODAL_TYPES.EDIT_DRIVE:
      return <EditDriveModal onClose={closeModal} {...modalProps} />;
    case MODAL_TYPES.ITEM_SELECTION:  // New case added
      return <ItemSelectionModal onClose={closeModal} {...modalProps} />;
    default:
      return null;
  }
};

export default ModalRenderer;

================
File: components/Navbars/AdminNavbar.js
================
import React from "react";

// import UserDropdown from "components/Dropdowns/UserDropdown.js";

export default function Navbar() {
  return (
    <>
      {/* Navbar */}
      <nav className="absolute top-0 left-0 w-full z-10 bg-transparent md:flex-row md:flex-nowrap md:justify-start flex items-center p-4">
        <div className="w-full mx-autp items-center flex justify-between md:flex-nowrap flex-wrap md:px-10 px-4">
          {/* Brand */}
          <a
            className="text-white text-sm uppercase hidden lg:inline-block font-semibold"
            href="#pablo"
            onClick={(e) => e.preventDefault()}
          >
            Dashboard
          </a>
          {/* Form */}
          {/* <form className="md:flex hidden flex-row flex-wrap items-center lg:ml-auto mr-3">
            <div className="relative flex w-full flex-wrap items-stretch">
              <span className="z-10 h-full leading-snug font-normal absolute text-center text-blueGray-300 absolute bg-transparent rounded text-base items-center justify-center w-8 pl-3 py-3">
                <i className="fas fa-search"></i>
              </span>
              <input
                type="text"
                placeholder="Search here..."
                className="border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 relative bg-white bg-white rounded text-sm shadow outline-none focus:outline-none focus:ring w-full pl-10"
              />
            </div>
          </form>
          <ul className="flex-col md:flex-row list-none items-center hidden md:flex">
            <UserDropdown />
          </ul> */}
        </div>
      </nav>
      {/* End Navbar */}
    </>
  );
}

================
File: components/Navbars/AuthNavbar.js
================
// src/components/Navbars/AdminNavbar.js

import React, { useContext, useState, useEffect } from 'react';
import Link from 'next/link';
import { AuthContext } from '../../contexts/AuthContext';
import { useRouter } from 'next/router';
import Image from 'next/image';
import { FaShoppingCart } from 'react-icons/fa';
import { CartContext } from '../../contexts/CartContext';

const Navbar = () => {
  const { user, logout } = useContext(AuthContext);
  const [navbarOpen, setNavbarOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const router = useRouter();
  const { cart } = useContext(CartContext);
  const itemCount = cart?.items
    ? cart.items.reduce((total, item) => total + item.quantity, 0)
    : 0;

  // Handle scroll event to toggle navbar background
  useEffect(() => {
    const handleScroll = () => {
      const offset = window.scrollY;
      setScrolled(offset > 50);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Close navbar when route changes
  useEffect(() => {
    const handleRouteChange = () => {
      setNavbarOpen(false);
    };

    router.events.on('routeChangeStart', handleRouteChange);
    return () => {
      router.events.off('routeChangeStart', handleRouteChange);
    };
  }, [router.events]);

  const handleLogout = async (e) => {
    e.preventDefault();
    await logout();
    setNavbarOpen(false);
    router.push('/');
  };

  // Determine active link
  const isActive = (href) => router.pathname === href;

  return (
    <nav
      className={`fixed top-0 z-50 w-full transition-colors duration-300 ${scrolled || navbarOpen ? 'bg-secondary_green shadow-lg' : 'bg-transparent'
        }`}
    >
      <div className="container mx-auto px-4 py-3 flex flex-wrap items-center">
        {/* Brand + Toggler in one row */}
        <div className="flex w-full lg:w-auto items-center">
          {/* Brand (GiftDrive) centered */}
          <Link href="/">
            <div className="mx-auto leading-relaxed py-2 whitespace-nowrap cursor-pointer inter-semi-bold text-ggreen text-2xl flex items-center gap-2">
              <Image
                src="/MainGift.png"
                alt="GiftDrive Logo"
                width={128}
                height={128}
                className="h-8 w-auto"
                priority
              />
              GiftDrive
            </div>
          </Link>
          <button
            className="text-ggreen cursor-pointer text-xl leading-none px-3 py-1 border border-solid border-transparent rounded bg-transparent block lg:hidden outline-none focus:outline-none"
            type="button"
            onClick={() => setNavbarOpen(!navbarOpen)}
            aria-label="Toggle navigation menu"
            aria-expanded={navbarOpen}
            aria-controls="navbar-menu"
          >
            <svg
              className="h-6 w-6"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              aria-hidden="true"
            >
              {navbarOpen ? (
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              ) : (
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M4 6h16M4 12h16M4 18h16"
                />
              )}
            </svg>
          </button>
        </div>

        {/* Navbar Links */}
        <div
          className={`lg:flex flex-grow items-center transition-all duration-300 ease-in-out ${navbarOpen ? 'block bg-secondary-green lg:bg-transparent' : 'hidden'
            }`}
          id="navbar-menu"
        >
          <ul className="flex flex-col lg:flex-row list-none lg:ml-auto">
            <li className="flex items-center">
              <Link href="/visible/orglist">
                <span
                  className={`text-sm inter-regular uppercase px-3 py-2 flex items-center text-ggreen hover:text-gyellow ${isActive('/visible/orglist') ? 'text-blueGray-300' : ''
                    }`}
                >
                  Browse all Organizations
                </span>
              </Link>
            </li>
            <li className="flex items-center">
              <Link href="/visible/drivelist">
                <span
                  className={`text-sm inter-regular uppercase px-3 py-2 flex items-center text-ggreen hover:text-gyellow ${isActive('/visible/drivelist') ? 'text-blueGray-300' : ''
                    }`}
                >
                  Browse all Drives
                </span>
              </Link>
            </li>

            {user && (
              <>
                <li className="flex items-center">
                  <Link href="/visible/profile">
                    <span
                      className={`text-sm inter-regular uppercase px-3 py-2 flex items-center text-ggreen hover:text-gyellow ${isActive('/visible/profile') ? 'text-blueGray-300' : ''
                        }`}
                    >
                      Account
                    </span>
                  </Link>
                </li>

                {!!user.is_org_admin && (
                  <li className="flex items-center">
                    <Link href="/admin/dashboard">
                      <span
                        className={`text-sm inter-regular uppercase px-3 py-2 flex items-center text-ggreen hover:text-gyellow ${isActive('/admin/dashboard') ? 'text-blueGray-300' : ''
                          }`}
                      >
                        My Organization Dashboard
                      </span>
                    </Link>
                  </li>
                )}

                {!!user.is_super_admin && (
                  <li className="flex items-center">
                    <Link href="/admin/superAdmin">
                      <span
                        className={`text-sm inter-regular uppercase px-3 py-2 flex items-center text-ggreen hover:text-gyellow ${isActive('/admin/superAdmin') ? 'text-blueGray-300' : ''
                          }`}
                      >
                        Super Admin
                      </span>
                    </Link>
                  </li>
                )}

                <li className="flex items-center">
                  <button
                    onClick={handleLogout}
                    className="text-sm inter-regular uppercase px-3 py-2 flex items-center text-ggreen hover:text-gyellow cursor-pointer bg-transparent border-none"
                  >
                    Logout
                  </button>
                </li>
              </>
            )}

            {!user && (
              <>
                <li className="flex items-center">
                  <Link href="/auth/login">
                    <span
                      className={`text-sm inter-regular uppercase px-3 py-2 flex items-center text-ggreen hover:text-gyellow ${isActive('/auth/login') ? 'text-blueGray-300' : ''
                        }`}
                    >
                      Login
                    </span>
                  </Link>
                </li>
                <li className="flex items-center">
                  <Link href="/auth/register">
                    <span
                      className={`text-sm inter-regular uppercase px-3 py-2 flex items-center text-ggreen hover:text-gyellow ${isActive('/auth/register') ? 'text-blueGray-300' : ''
                        }`}
                    >
                      Register
                    </span>
                  </Link>
                </li>
              </>
            )}

            {!user?.is_org_admin && (
              <li className="flex items-center">
                <Link href="/visible/registerorg">
                  <span className="text-sm inter-regular uppercase px-3 py-2 flex items-center">
                    <button
                      className="bg-white text-blueGray-700 active:bg-blueGray-50 text-xs inter-regular uppercase px-4 py-2 rounded-full shadow hover:shadow-md outline-none focus:outline-none ease-linear transition-all duration-150"
                      type="button"
                    >
                      Create A Drive
                    </button>
                  </span>
                </Link>
              </li>
            )}
            {/* Cart Icon for Small Screens */}
            <li className="flex items-center lg:hidden">
              <Link href="/visible/cart">
                <div className="relative flex items-center">
                  <FaShoppingCart className="h-6 w-6 mr-1" />
                  {itemCount > 0 && (
                    <span className="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs inter-regular leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full">
                      {itemCount}
                    </span>
                  )}
                  <span className={`text-sm inter-regular uppercase px-3 py-2 flex items-center text-ggreen hover:text-gyellow ${isActive('/visible/cart') ? 'text-blueGray-300' : ''}`}>
                    Cart
                  </span>
                </div>
              </Link>
            </li>

          </ul>
        </div>
        {/* Cart Icon for Large Screens */}
        <div className="navbar-cart flex items-center hidden lg:flex">
          <Link href="/visible/cart">
            <div className="relative">
              <FaShoppingCart className="h-6 w-6 text-ggreen" />
              {itemCount > 0 && (
                <span className="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs inter-regular leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full">
                  {itemCount}
                </span>
              )}
            </div>
          </Link>
        </div>

      </div>
    </nav>
  );
};

export default Navbar;

================
File: components/PageChange/PageChange.js
================
import React from "react";

// reactstrap components
// import { Spinner } from "reactstrap";

// core components

export default function PageChange(props) {
  return (
    <div>
      <div
        className="bg-cover fixed z-40 w-full h-full top-0 left-0"
        style={{
          backgroundImage: "url('/img/img-1-1000x600.jpg')",
        }}
      ></div>
      <div className="top-0 left-0 w-full h-full block z-50 absolute bg-black bg-opacity-50"></div>
      <div className="my-32 mx-auto max-w-sm text-center relative z-50 top-0">
        <div className="block mb-4">
          <i className="fas fa-circle-notch animate-spin text-white mx-auto text-6xl"></i>
        </div>
        <h4 className="text-lg font-medium text-white">
          Loading page contents for: {props.path}
        </h4>
      </div>
    </div>
  );
}

================
File: components/Sidebar/Sidebar.js
================
// src/components/Sidebar.js

import React, { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import { FaBars, FaTimes, FaEdit, FaBullhorn, FaHistory, FaChartLine, FaQuestionCircle } from "react-icons/fa"; // Importing icons
import Image from 'next/image'; // Import Next.js Image component


const Sidebar = () => {
  const [collapseShow, setCollapseShow] = useState("hidden");
  const router = useRouter();

  // Define your admin sections with corresponding routes and icons
  const adminSections = [
    {
      name: "Drive Statistics",
      href: "/admin/dashboard",
      icon: <FaChartLine className="mr-2 text-sm" />,
    },
    {
      name: "Edit Organization Info",
      href: "/admin/editOrgInfo",
      icon: <FaEdit className="mr-2 text-sm" />,
    },
    {
      name: "Current Drives",
      href: "/admin/currentDrives",
      icon: <FaBullhorn className="mr-2 text-sm" />,
    },
    {
      name: "Future Drives",
      href: "/admin/futureDrives",
      icon: <FaHistory className="mr-2 text-sm" />,
    },
    {
      name: "Past Drives",
      href: "/admin/pastDrives",
      icon: <FaHistory className="mr-2 text-sm" />,
    },
    {
      name: "Help Page",
      href: "/admin/help",
      icon: <FaQuestionCircle className="mr-2 text-sm" />,
    },
  ];

  return (
    <>
      <nav className="md:left-0 md:block md:fixed md:top-0 md:bottom-0 md:overflow-y-auto md:flex-row md:flex-nowrap md:overflow-hidden shadow-xl bg-white flex flex-wrap items-center justify-between relative md:w-64 z-10 py-4 px-6">
        <div className="md:flex-col md:items-stretch md:min-h-full md:flex-nowrap px-0 flex flex-wrap items-center justify-between w-full mx-auto">
          
          {/* Toggler */}
          <button
            className="cursor-pointer text-black opacity-50 md:hidden px-3 py-1 text-xl leading-none bg-transparent rounded border border-solid border-transparent"
            type="button"
            onClick={() => setCollapseShow("bg-white m-2 py-3 px-6")}
          >
            <FaBars />
          </button>

          {/* Brand */}
          <Link href="/" className="text-black text-sm font-bold leading-relaxed py-2 whitespace-nowrap uppercase flex items-center">
            {/* Next.js Image component for optimization */}
            <Image
              src="https://giveagift-assets.nyc3.cdn.digitaloceanspaces.com/images/GiftDriveLogo.png"
              alt="GiftDrive Logo"
              width={24}
              height={24}
              className="inline-block h-6 w-6 mr-2"
            />
            GiftDrive
          </Link>

          {/* User Dropdown (Optional) */}
          {/* If you have user-related dropdowns, you can include them here */}
          {/* <ul className="md:hidden items-center flex flex-wrap list-none">
            <li className="inline-block relative">
              <NotificationDropdown />
            </li>
            <li className="inline-block relative">
              <UserDropdown />
            </li>
          </ul> */}

          {/* Collapse */}
          <div
            className={
              "md:flex md:flex-col md:items-stretch md:opacity-100 md:relative md:mt-4 md:shadow-none shadow absolute top-0 left-0 right-0 z-40 overflow-y-auto overflow-x-hidden h-auto items-center flex-1 rounded " +
              collapseShow
            }
          >
            {/* Collapse header */}
            <div className="md:min-w-full md:hidden block pb-4 mb-4 border-b border-solid border-blueGray-200">
              <div className="flex flex-wrap">
                <div className="w-6/12">
                  <Link
                    href="/"
                    className="md:block text-left md:pb-2 text-blueGray-600 mr-0 inline-block whitespace-nowrap text-sm uppercase font-bold p-4 px-0"
                  >
                    Organization Dashboard
                  </Link>
                </div>
                <div className="w-6/12 flex justify-end">
                  <button
                    type="button"
                    className="cursor-pointer text-black opacity-50 md:hidden px-3 py-1 text-xl leading-none bg-transparent rounded border border-solid border-transparent"
                    onClick={() => setCollapseShow("hidden")}
                  >
                    <FaTimes />
                  </button>
                </div>
              </div>
            </div>

            {/* Form (Optional) */}
            {/* If you need a search form within the sidebar on mobile, include it here */}
            {/* <form className="mt-6 mb-4 md:hidden">
              <div className="mb-3 pt-0">
                <input
                  type="text"
                  placeholder="Search"
                  className="border-0 px-3 py-2 h-12 border border-solid  border-blueGray-500 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-base leading-snug shadow-none outline-none focus:outline-none w-full font-normal"
                />
              </div>
            </form> */}

            {/* Divider */}
            <hr className="my-4 md:min-w-full" />

            {/* Heading */}
            <h6 className="md:min-w-full text-blueGray-500 text-xs uppercase font-bold block pt-1 pb-4 no-underline">
              Admin Sections
            </h6>

            {/* Navigation */}
            <ul className="md:flex-col md:min-w-full flex flex-col list-none">
              {adminSections.map((section) => (
                <li className="items-center" key={section.name}>
                  <Link
                    href={section.href}
                    className={
                      "text-xs uppercase py-3 font-bold block " +
                      (router.pathname === section.href
                        ? "text-blue-500 hover:text-blue-600"
                        : "text-blueGray-700 hover:text-blueGray-500")
                    }
                  >
                    {section.icon}
                    {section.name}
                  </Link>
                </li>
              ))}
            </ul>

            {/* Optional: Additional Sections */}
            {/* If you have more sections or nested navigation, include them here */}

          </div>
        </div>
      </nav>
    </>
  );
};

export default Sidebar;

================
File: components/UI/Breadcrumbs.js
================
// src/components/UI/Breadcrumbs.js

import Link from 'next/link';
import PropTypes from 'prop-types';
import React from 'react';

const Breadcrumbs = ({ links }) => {
  return (
    <nav className="flex mb-6" aria-label="Breadcrumb">
      <ol className="inline-flex items-center space-x-1 md:space-x-3">
        {links.map((link, index) => (
          <li key={index} className="inline-flex items-center">
            {index > 0 && (
              <svg
                className="w-6 h-6 text-gray-400"
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                  clipRule="evenodd"
                />
              </svg>
            )}
            <Link href={link.href} passHref
            className={`text-sm font-medium ${
                index === links.length - 1
                  ? 'text-gray-500'
                  : 'text-blue-600 hover:text-blue-800'
              }`}
              aria-current={index === links.length - 1 ? 'page' : undefined}>
                {link.label}
            </Link>
          </li>
        ))}
      </ol>
    </nav>
  );
};

Breadcrumbs.propTypes = {
  links: PropTypes.arrayOf(
    PropTypes.shape({
      href: PropTypes.string.isRequired,
      label: PropTypes.string.isRequired,
    })
  ).isRequired,
};

export default Breadcrumbs;

================
File: components/ErrorBoundary.js
================
// src/components/ErrorBoundary.js

import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // You can log the error to an error reporting service here
    console.error("Uncaught error:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="flex items-center justify-center min-h-screen bg-blueGray-100">
          <div className="text-center">
            <h1 className="text-4xl font-bold text-blueGray-800 mb-4">Something went wrong.</h1>
            <p className="text-blueGray-600">Please try refreshing the page or contact support if the problem persists.</p>
          </div>
        </div>
      );
    }

    return this.props.children; 
  }
}

export default ErrorBoundary;

================
File: components/Providers.js
================
// src/components/Providers.js

import React from "react";
import { AuthProvider } from '../contexts/AuthContext';
import { CartProvider } from '../contexts/CartContext';
import { StatisticsProvider } from '../contexts/StatisticsContext';

const Providers = ({ children }) => {
  return (
    <CartProvider>
      <AuthProvider>
        <StatisticsProvider>
          {children}
        </StatisticsProvider>
      </AuthProvider>
    </CartProvider>
  );
};

export default Providers;

================
File: contexts/AuthContext.js
================
// src/contexts/AuthContext.js

import React, { createContext, useState, useEffect, useContext } from 'react';
import PropTypes from 'prop-types';
import axios from 'axios';
import { CartContext } from './CartContext';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const { fetchCart, resetCart } = useContext(CartContext); // Access CartContext


  axios.defaults.withCredentials = true;

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await axios.get(`${apiUrl}/api/auth/me`);
        setUser(response.data.user);
        if (response.data.user) {
          fetchCart(); // Fetch the merged cart after login
        }
      } catch (error) {
        setUser(null);
      } finally {
        setLoading(false);
      }
    };

    fetchUser();
    if (fetchUser) {
      axios.post(`${apiUrl}/api/cart/merge`, {}, { withCredentials: true })
        .then(() => fetchCart())
        .catch((err) => console.error('Cart merge failed:', err));
    }
  }, []);

  const login = async (credentials) => {
      const response = await axios.post(`${apiUrl}/api/auth/login`, credentials);
      setUser(response.data.user);
  };

  const logout = async () => {
      await axios.post(`${apiUrl}/api/auth/logout`);
      setUser(null);
      resetCart(); 
  };

  return (
    <AuthContext.Provider value={{ user, setUser, loading, login, logout }}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

// PropTypes validation for AuthProvider
AuthProvider.propTypes = {
  children: PropTypes.node.isRequired,
};

================
File: contexts/CartContext.js
================
// src/contexts/CartContext.js

import React, { createContext, useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import axios from 'axios';
import { toast } from 'react-toastify';

export const CartContext = createContext();

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export const CartProvider = ({ children }) => {
  const [cart, setCart] = useState(null);
  const [loading, setLoading] = useState(true);

  const resetCart = () => {
    setCart(null); 
  };

  /**
   * Fetches the current cart from the backend.
   */
  const fetchCart = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`${apiUrl}/api/cart`, { withCredentials: true });
      setCart(response.data.cart);
    } catch (error) {
      console.error('Error fetching cart:', error.response?.data || error.message);
      toast.error('Failed to load cart. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCart();
  }, []);

  /**
   * Adds an item to the cart.
   */
  const addToCart = async (item_id, config_id = null, child_id = null, drive_id = null, quantity = 1) => {
    try {
      await axios.post(
        `${apiUrl}/api/cart/add`,
        { item_id, config_id, child_id, drive_id, quantity },
        { withCredentials: true }
      );
      fetchCart();
      toast.success('Item added to cart successfully!');
    } catch (error) {
      console.error('Error adding to cart:', error.response?.data || error.message);
      toast.error(error.response?.data?.error || 'Failed to add item to cart.');
    }
  };
  

  /**
   * Removes an item from the cart.
   */
  const removeFromCart = async (cart_item_id) => {
    try {
      await axios.post(
        `${apiUrl}/api/cart/remove`,
        { cart_item_id },
        { withCredentials: true }
      );
      fetchCart();
      toast.success('Item removed from cart.');
    } catch (error) {
      console.error('Error removing from cart:', error.response?.data || error.message);
      toast.error(error.response?.data?.error || 'Failed to remove item from cart.');
    }
  };

  /**
   * Updates the quantity of a cart item.
   */
  const updateCartItemQuantity = async (cart_item_id, quantity) => {
    try {
      await axios.post(
        `${apiUrl}/api/cart/update`,
        { cart_item_id, quantity },
        { withCredentials: true }
      );
      fetchCart();
      toast.success('Cart updated successfully.');
    } catch (error) {
      console.error('Error updating cart item quantity:', error.response?.data || error.message);
      toast.error(error.response?.data?.error || 'Failed to update cart item quantity.');
    }
  };

  return (
    <CartContext.Provider value={{ cart, addToCart, removeFromCart, updateCartItemQuantity, loading, fetchCart , resetCart,}}>
      {children}
    </CartContext.Provider>
  );
};

// PropTypes validation for CartProvider
CartProvider.propTypes = {
  children: PropTypes.node.isRequired,
};

================
File: contexts/ModalContext.js
================
import React, { createContext, useState, useContext } from 'react';
import PropTypes from 'prop-types';

// Define modal types
export const MODAL_TYPES = {
  ADD_CHILD: 'ADD_CHILD',
  EDIT_CHILD: 'EDIT_CHILD',
  ADD_DRIVE: 'ADD_DRIVE',
  EDIT_DRIVE: 'EDIT_DRIVE',
  ITEM_SELECTION: 'ITEM_SELECTION',
  // Add more modal types as needed
};

// Create the context
const ModalContext = createContext();

// Custom hook for easy access to the ModalContext
export const useModal = () => useContext(ModalContext);

// ModalProvider component
export const ModalProvider = ({ children }) => {
  const [modalState, setModalState] = useState({
    isOpen: false,
    modalType: null,
    modalProps: {},
  });

  const openModal = (modalType, modalProps = {}) => {
    setModalState({
      isOpen: true,
      modalType,
      modalProps,
    });
  };

  const closeModal = () => {
    setModalState({
      isOpen: false,
      modalType: null,
      modalProps: {},
    });
  };

  return (
    <ModalContext.Provider value={{ modalState, openModal, closeModal }}>
      {children}
    </ModalContext.Provider>
  );
};

ModalProvider.propTypes = {
  children: PropTypes.node.isRequired,
};

================
File: contexts/StatisticsContext.js
================
// contexts/StatisticsContext.js

import React, { createContext, useState } from 'react';
import PropTypes from 'prop-types'; // Import PropTypes

// Create the StatisticsContext
export const StatisticsContext = createContext();

// Create a provider component
export const StatisticsProvider = ({ children }) => {
  const [statistics, setStatistics] = useState(null);

  return (
    <StatisticsContext.Provider value={{ statistics, setStatistics }}>
      {children}
    </StatisticsContext.Provider>
  );
};

// Add prop validation
StatisticsProvider.propTypes = {
  children: PropTypes.node.isRequired, // Validates that children is a React node
};

================
File: layouts/Admin.js
================
// components/Admin.js

import React from "react";
import PropTypes from 'prop-types';

// Components
import AdminNavbar from "components/Navbars/AdminNavbar.js";
import Sidebar from "components/Sidebar/Sidebar.js";
import HeaderStats from "components/Headers/HeaderStats.js";
import FooterAdmin from "components/Footers/FooterAdmin.js";

const Admin = ({ children }) => {
  return (
    <>
      <Sidebar />
      <div className="relative md:ml-64 bg-blueGray-100">
        <AdminNavbar />
        {/* Header */}
        <HeaderStats />
        <div className="px-4 md:px-10 mx-auto w-full -m-24">
          {children}
          <FooterAdmin />
        </div>
      </div>
    </>
  );
};

Admin.propTypes = {
  children: PropTypes.node.isRequired,
};

export default Admin;

================
File: layouts/Auth.js
================
// components/Auth.js

import React from "react";
import PropTypes from "prop-types"; // Import PropTypes

// components
import Navbar from "components/Navbars/AuthNavbar.js";

export default function Auth({ children }) {
  return (
    <>
      <Navbar transparent />
      <main>
          {children}
      </main>
    </>
  );
}

// Add prop validation
Auth.propTypes = {
  children: PropTypes.node.isRequired, // Validate that children is a React node and required
};

================
File: pages/admin/currentDrives.js
================
// pages/CurrentDrives.js
import React, { useState, useEffect, useContext } from 'react';
import axios from 'axios';
import DriveCard from '../../components/Cards/DriveCard';
import { useModal, MODAL_TYPES } from '../../contexts/ModalContext';
import { AuthContext } from '../../contexts/AuthContext';
import Admin from 'layouts/Admin.js';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const CurrentDrives = () => {
  const [drives, setDrives] = useState([]);
  const { openModal } = useModal();
  const { user } = useContext(AuthContext);

  useEffect(() => {
    if (user && user.org_id) {
      fetchDrives();
    }
  }, [user]);

  const fetchDrives = async () => {
    try {
      const response = await axios.get(`${apiUrl}/api/drives/organization/${user.org_id}/current`, {
        withCredentials: true,
      });
      setDrives(response.data);
    } catch (error) {
      console.error('Error fetching current drives:', error);
    }
  };
  
  const handleAddDrive = (newDrive) => {
    setDrives([...drives, newDrive]);
  };

  const handleDeleteDrive = async (driveId) => {
    if (confirm('Are you sure you want to delete this drive?')) {
      try {
        await axios.delete(`${apiUrl}/api/drives/${driveId}`, { withCredentials: true });
        setDrives(drives.filter((drive) => drive.drive_id !== driveId));
      } catch (error) {
        console.error('Error deleting drive:', error);
      }
    }
  };

  const triggerAddDriveModal = () => {
    openModal(MODAL_TYPES.ADD_DRIVE, {
      onAddDrive: handleAddDrive,
    });
  };

  return (
    <div className="min-h-screen bg-gray-100 p-6 pt-32">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-semibold">Current Drives</h2>
        <button
          onClick={triggerAddDriveModal}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Add New Drive
        </button>
      </div>

      {drives.length > 0 ? (
        <div className="grid grid-cols-1 gap-6">
          {drives.map((drive) => (
            <DriveCard
              key={drive.drive_id}
              drive={drive}
              onDelete={handleDeleteDrive}
              onUpdateDrive={fetchDrives}
            />
          ))}
        </div>
      ) : (
        <p>No current drives available.</p>
      )}
    </div>
  );
};

CurrentDrives.layout = Admin;

export default CurrentDrives;

================
File: pages/admin/dashboard.js
================
// pages/dashboard.js

import React, { useState, useEffect, useContext } from "react";
import axios from "axios";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

// Import Chart Components
import CardLineChart from "components/Cards/CardLineChart";
import CardBarChart from "components/Cards/CardBarChart";
import CardPieChart from "components/Cards/CardPieChart";
import CardStats from "components/Cards/CardStats";

// Layout
import Admin from "layouts/Admin.js";

// Auth Context
import { AuthContext } from "../../contexts/AuthContext";
import { StatisticsContext } from "../../contexts/StatisticsContext"; // Import the StatisticsContext

export default function Dashboard() {
  const [localStatistics, setLocalStatistics] = useState(null);
  const { user, loading } = useContext(AuthContext);
  const { setStatistics: setGlobalStatistics } = useContext(StatisticsContext); // Destructure setStatistics

  const apiUrl = process.env.NEXT_PUBLIC_API_URL;

  const [startDate, setStartDate] = useState(
    new Date(new Date().setMonth(new Date().getMonth() - 1))
  );
  const [endDate, setEndDate] = useState(new Date());


  useEffect(() => {
    const fetchStatistics = async () => {
      try {
        if (user && user.org_id) {
          const response = await axios.get(
            `${apiUrl}/api/drives/organization/${user.org_id}/statistics`,
            {
              params: {
                startDate: startDate.toISOString(),
                endDate: endDate.toISOString(),
              },
              withCredentials: true,
            }
          );
          setLocalStatistics(response.data);
          setGlobalStatistics(response.data); // Update the global StatisticsContext
        }
      } catch (error) {
        console.error("Error fetching statistics:", error);
      }
    };

    if (!loading) {
      fetchStatistics();
    }
  }, [user, loading, apiUrl, setGlobalStatistics, startDate, endDate]);

  if (loading || !localStatistics) {
    return (
      <div className="flex justify-center items-center h-screen">
        <p className="text-xl">Loading statistics...</p>
      </div>
    );
  }

  return (
    <>
      <div className="flex justify-end p-4">
        <div className="mr-4">
          <label className="block text-sm font-medium text-white">Start Date</label>
          <DatePicker
            selected={startDate}
            onChange={(date) => setStartDate(date)}
            className="mt-1 block w-full border border-gray-300 rounded-md p-2 bg-white text-black"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-white">End Date</label>
          <DatePicker
            selected={endDate}
            onChange={(date) => setEndDate(date)}
            className="mt-1 block w-full border border-gray-300 rounded-md p-2 bg-white text-black"
          />
        </div>
      </div>
      {/* Charts Section */}
      <div className="flex flex-wrap mt-4">
        {/* Kids Gifted Status Pie Chart */}
        <div className="w-full xl:w-6/12 mb-12 xl:mb-0 px-4">
          <CardPieChart
            title="Donees Gifted Status"
            data={[
              localStatistics.kidsFullyGifted,
              localStatistics.kidsPartiallyGifted,
              localStatistics.kidsUngifted,
            ]}
            labels={["Fully Gifted", "Partially Gifted", "Ungifted"]}
            colors={["#0088FE", "#00C49F", "#FFBB28"]}
          />
        </div>

        {/* Gifts Status Pie Chart */}
        <div className="w-full xl:w-6/12 mb-12 xl:mb-0 px-4">
          <CardPieChart
            title="Gifts Status"
            data={[
              localStatistics.giftsPurchased,
              localStatistics.giftsInCarts,
              localStatistics.giftsUnpurchased,
            ]}
            labels={["Purchased", "In Carts", "Unpurchased"]}
            colors={["#FF8042", "#00C49F", "#FFBB28"]}
          />
        </div>
      </div>

      <div className="flex flex-wrap mt-4">
        {/* Leaderboard of Donors Bar Chart */}
        <div className="w-full xl:w-6/12 mb-12 xl:mb-0 px-4">
          <CardBarChart
            title="Leaderboard of Donors"
            subtitle="Top Donors"
            data={localStatistics.topDonors.map((donor) => donor.amount)}
            labels={localStatistics.topDonors.map((donor) => donor.name)}
            backgroundColor="#8884d8"
          />
        </div>

        {/* Page Views Over Time Line Chart */}
        {localStatistics.pageViewsOverTime && (
          <div className="w-full xl:w-6/12 mb-12 xl:mb-0 px-4">
            <CardLineChart
              title="Page Views Over Time"
              subtitle="Daily Page Views"
              data={localStatistics.pageViewsOverTime.map((pv) => pv.views)}
              labels={localStatistics.pageViewsOverTime.map((pv) =>
                new Date(pv.date).toLocaleDateString()
              )}
              borderColor="#4c51bf"
              backgroundColor="#4c51bf"
            />
          </div>
        )}
      </div>

      {/* Additional Statistics */}
      <div className="flex flex-wrap mt-4">
        {/* Financial Statistics */}
        <div className="w-full xl:w-6/12 mb-12 xl:mb-0 px-4">
          <CardStats
            statSubtitle="Total Money Spent"
            statTitle={`$${localStatistics.totalMoneySpent.toLocaleString()}`}
            statArrow="up"
            statPercent="5.45"
            statPercentColor="text-emerald-500"
            statDescripiron="Since last month"
            statIconName="fas fa-dollar-sign"
            statIconColor="bg-green-500"
          />
        </div>
        <div className="w-full xl:w-6/12 mb-12 xl:mb-0 px-4">
          <CardStats
            statSubtitle="Avg Donation per Person"
            statTitle={`$${localStatistics.avgMoneyDonatedPerPerson.toFixed(2)}`}
            statArrow="up"
            statPercent="2.34"
            statPercentColor="text-emerald-500"
            statDescripiron="Since last month"
            statIconName="fas fa-user-dollar"
            statIconColor="bg-blue-500"
          />
        </div>
        {/* Add more financial stats as needed */}
      </div>
    </>
  );
}

Dashboard.layout = Admin;

================
File: pages/admin/editOrgInfo.js
================
import React, { useState, useEffect, useContext } from 'react';
import axios from 'axios';
import PropTypes from 'prop-types';
import { AuthContext } from '../../contexts/AuthContext';
import Image from 'next/image';

import Admin from "layouts/Admin.js";

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const EditOrganizationInfo = () => {
  const { user } = useContext(AuthContext);
  const [organization, setOrganization] = useState({
    name: '',
    description: '',
    website: '',
    photo: null,
    address: '',
    city: '',
    country: '',
    postalCode: '',
  });
  const [previewPhoto, setPreviewPhoto] = useState(null); // State for new photo preview
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (user && user.org_id) {
      fetchOrganizationInfo();
    }

    // Cleanup the object URL when component unmounts or when a new file is selected
    return () => {
      if (previewPhoto) {
        URL.revokeObjectURL(previewPhoto);
      }
    };
  }, [user]);

  const fetchOrganizationInfo = async () => {
    try {
      const response = await axios.get(
        `${apiUrl}/api/organizations/${user.org_id}`,
        { withCredentials: true }
      );

      // Debugging log
      console.log('Fetched organization data:', response.data);

      // Assuming the API returns address details
      setOrganization({
        name: response.data.name || '',
        description: response.data.description || '',
        website: response.data.website || '',
        photo: response.data.photo || null,
        address: response.data.address || '',
        city: response.data.city || '',
        country: response.data.country || '',
        postalCode: response.data.postalCode || '',
      });
    } catch (error) {
      console.error('Error fetching organization info:', error);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setOrganization({ ...organization, [name]: value });
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setOrganization({ ...organization, photo: file });

    if (file) {
      // Revoke the previous object URL if it exists to prevent memory leaks
      if (previewPhoto) {
        URL.revokeObjectURL(previewPhoto);
      }
      const previewUrl = URL.createObjectURL(file);
      setPreviewPhoto(previewUrl);
    } else {
      // If no file is selected, remove the preview
      if (previewPhoto) {
        URL.revokeObjectURL(previewPhoto);
      }
      setPreviewPhoto(null);
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!organization.name || organization.name.length < 3) {
      newErrors.name = 'Organization name must be at least 3 characters long.';
    }
    if (organization.description.length > 500) {
      newErrors.description = 'Description must be under 500 characters.';
    }
    // Add more validations as needed

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) return;

    const formData = new FormData();
    formData.append('name', organization.name);
    formData.append('description', organization.description);
    formData.append('website', organization.website);
    formData.append('address', organization.address);
    formData.append('city', organization.city);
    formData.append('country', organization.country);
    formData.append('postalCode', organization.postalCode);
    if (organization.photo) {
      formData.append('photo', organization.photo);
    }

    try {
      setLoading(true);
      await axios.put(
        `${apiUrl}/api/organizations/${user.org_id}`,
        formData,
        {
          withCredentials: true,
          headers: { 'Content-Type': 'multipart/form-data' },
        }
      );
      alert('Organization info updated successfully!');
      setLoading(false);
      // Optionally, refetch organization info to update the state with the new photo URL
      fetchOrganizationInfo();
      // Reset preview photo after successful upload
      if (previewPhoto) {
        URL.revokeObjectURL(previewPhoto);
        setPreviewPhoto(null);
      }
    } catch (error) {
      console.error('Error updating organization info:', error);
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-blueGray-100 p-6 pt-32">
      <div className="relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded-lg bg-white border-0">
        <div className="rounded-t bg-white mb-0 px-6 py-6">
          <div className="text-center flex justify-between">
            <h6 className="text-blueGray-700 text-xl font-bold">Edit Organization Info</h6>
            <button
              className="bg-blueGray-700 active:bg-blueGray-600 text-white font-bold uppercase text-xs px-4 py-2 rounded shadow hover:shadow-md outline-none focus:outline-none mr-1 ease-linear transition-all duration-150"
              type="button"
              onClick={() => window.history.back()}
            >
              Cancel
            </button>
          </div>
        </div>
        <div className="flex-auto px-4 lg:px-10 py-10 pt-0">
          <form onSubmit={handleSubmit}>
            {/* Organization Information */}
            <h6 className="text-blueGray-400 text-sm mt-3 mb-6 font-bold uppercase">
              Organization Information
            </h6>
            <div className="flex flex-wrap">
              <div className="w-full lg:w-6/12 px-4">
                <div className="relative w-full mb-3">
                  <label
                    className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                    htmlFor="name"
                  >
                    Organization Name
                  </label>
                  <input
                    type="text"
                    name="name"
                    value={organization.name}
                    onChange={handleInputChange}
                    className={`border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150 ${
                      errors.name ? 'border-red-500' : ''
                    }`}
                    placeholder="Organization Name"
                    required
                    minLength={3}
                  />
                  {errors.name && (
                    <p className="text-red-500 text-xs mt-1">{errors.name}</p>
                  )}
                </div>
              </div>
              <div className="w-full lg:w-6/12 px-4">
                <div className="relative w-full mb-3">
                  <label
                    className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                    htmlFor="website"
                  >
                    Website
                  </label>
                  <input
                    type="url"
                    name="website"
                    value={organization.website}
                    onChange={handleInputChange}
                    className="border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                    placeholder="https://example.com"
                  />
                </div>
              </div>
              <div className="w-full px-4">
                <div className="relative w-full mb-3">
                  <label
                    className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                    htmlFor="description"
                  >
                    Description
                  </label>
                  <textarea
                    name="description"
                    value={organization.description}
                    onChange={handleInputChange}
                    className={`border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150 ${
                      errors.description ? 'border-red-500' : ''
                    }`}
                    placeholder="Organization Description"
                    maxLength={500}
                    rows="4"
                  ></textarea>
                  {errors.description && (
                    <p className="text-red-500 text-xs mt-1">{errors.description}</p>
                  )}
                </div>
              </div>
            </div>

            <hr className="mt-6 border-b-1 border-blueGray-300" />

            {/* Contact Information */}
            <h6 className="text-blueGray-400 text-sm mt-3 mb-6 font-bold uppercase">
              Contact Information
            </h6>
            <div className="flex flex-wrap">
              <div className="w-full lg:w-6/12 px-4">
                <div className="relative w-full mb-3">
                  <label
                    className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                    htmlFor="address"
                  >
                    Address
                  </label>
                  <input
                    type="text"
                    name="address"
                    value={organization.address}
                    onChange={handleInputChange}
                    className="border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                    placeholder="1234 Main St"
                  />
                </div>
              </div>
              <div className="w-full lg:w-3/12 px-4">
                <div className="relative w-full mb-3">
                  <label
                    className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                    htmlFor="city"
                  >
                    City
                  </label>
                  <input
                    type="text"
                    name="city"
                    value={organization.city}
                    onChange={handleInputChange}
                    className="border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                    placeholder="New York"
                  />
                </div>
              </div>
              <div className="w-full lg:w-3/12 px-4">
                <div className="relative w-full mb-3">
                  <label
                    className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                    htmlFor="country"
                  >
                    Country
                  </label>
                  <input
                    type="text"
                    name="country"
                    value={organization.country}
                    onChange={handleInputChange}
                    className="border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                    placeholder="United States"
                  />
                </div>
              </div>
              <div className="w-full lg:w-3/12 px-4">
                <div className="relative w-full mb-3">
                  <label
                    className="block uppercase text-blueGray-600 text-xs font-bold mb-2"
                    htmlFor="postalCode"
                  >
                    Postal Code
                  </label>
                  <input
                    type="text"
                    name="postalCode"
                    value={organization.postalCode}
                    onChange={handleInputChange}
                    className="border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                    placeholder="10001"
                  />
                </div>
              </div>
            </div>

            <hr className="mt-6 border-b-1 border-blueGray-300" />

            {/* Photo Upload */}
            <h6 className="text-blueGray-400 text-sm mt-3 mb-6 font-bold uppercase">
              Organization Photo
            </h6>
            <div className="flex flex-wrap">
              <div className="w-full px-4">
                <div className="relative w-full mb-3">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleFileChange}
                    className="border-0 px-3 py-3 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150"
                  />
                  {/* Display Current Photo */}
                  {organization.photo && typeof organization.photo === 'string' && (
                    <div className="mt-2 flex items-center">
                      <p className="text-blueGray-700 text-sm mr-2">Current Photo:</p>
                      <div className="relative w-32 h-32">
                        <Image
                          src={organization.photo}
                          alt="Organization Photo"
                          className="rounded object-cover"
                          layout="fill" // Use 'fill' with proper parent styling
                          objectFit="cover"
                          priority={true} // Optional: prioritize loading if necessary
                        />
                      </div>
                    </div>
                  )}
                  {/* Display New Photo Preview */}
                  {previewPhoto && (
                    <div className="mt-2 flex items-center">
                      <p className="text-blueGray-700 text-sm mr-2">New Photo Preview:</p>
                      <div className="relative w-32 h-32">
                        <Image
                          src={previewPhoto}
                          alt="New Organization Photo"
                          className="rounded object-cover"
                          layout="fill"
                          objectFit="cover"
                        />
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>

            <hr className="mt-6 border-b-1 border-blueGray-300" />

            {/* Submit Button */}
            <div className="flex justify-end">
              <button
                type="submit"
                className={`bg-blueGray-700 text-white active:bg-blueGray-600 font-bold uppercase text-xs px-4 py-2 rounded shadow hover:shadow-md outline-none focus:outline-none mr-1 ease-linear transition-all duration-150 ${
                  loading ? 'bg-blueGray-500 cursor-not-allowed' : ''
                }`}
                disabled={loading}
              >
                {loading ? 'Saving...' : 'Save Changes'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

EditOrganizationInfo.propTypes = {
  user: PropTypes.shape({
    org_id: PropTypes.number.isRequired,
  }),
};

EditOrganizationInfo.layout = Admin;

export default EditOrganizationInfo;

================
File: pages/admin/futureDrives.js
================
// pages/FutureDrives.js
import React, { useState, useEffect, useContext } from 'react';
import axios from 'axios';
import DriveCard from '../../components/Cards/DriveCard';
import { AuthContext } from '../../contexts/AuthContext';
import Admin from 'layouts/Admin.js';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const FutureDrives = () => {
  const [drives, setDrives] = useState([]);
  const { user } = useContext(AuthContext);

  useEffect(() => {
    if (user && user.org_id) {
      fetchFutureDrives();
    }
  }, [user]);

  const fetchFutureDrives = async () => {
    try {
      const response = await axios.get(
        `${apiUrl}/api/drives/organization/${user.org_id}/future`,
        { withCredentials: true }
      );
      setDrives(response.data);
    } catch (error) {
      console.error('Error fetching future drives:', error);
    }
  };

  const handleDeleteDrive = async (driveId) => {
    if (confirm('Are you sure you want to delete this future drive?')) {
      try {
        await axios.delete(`${apiUrl}/api/drives/${driveId}`, { withCredentials: true });
        setDrives(drives.filter((drive) => drive.drive_id !== driveId));
      } catch (error) {
        console.error('Error deleting drive:', error);
      }
    }
  };

  const handleUpdateDrive = (updatedDrive) => {
    setDrives((prevDrives) =>
      prevDrives.map((drive) =>
        drive.drive_id === updatedDrive.drive_id ? updatedDrive : drive
      )
    );
  };

  return (
    <div className="min-h-screen bg-gray-100 p-6 pt-32">
      <h2 className="text-2xl font-semibold mb-4">Future Drives</h2>
      {drives.length > 0 ? (
        <div className="grid grid-cols-1 gap-6">
          {drives.map((drive) => (
            <DriveCard
              key={drive.drive_id}
              drive={drive}
              onDelete={handleDeleteDrive}
              onUpdateDrive={handleUpdateDrive}
            />
          ))}
        </div>
      ) : (
        <p className="text-center text-gray-600 mt-10">No future drives available.</p>
      )}
    </div>
  );
};

FutureDrives.layout = Admin;

export default FutureDrives;

================
File: pages/admin/help.js
================
import React from 'react';

import Admin from "layouts/Admin.js";

const HelpPage = () => {
  const faqItems = [
    {
      question: "How do I create a new drive?",
      answer: "You can create a new drive by navigating to the 'Current Drives' section and clicking on the 'Add New Drive' button.",
    },
    {
      question: "How do I edit a drive?",
      answer: "To edit a drive, click the 'Edit' button on the relevant drive card in the Current Drives section.",
    },
    {
      question: "How do I delete a drive?",
      answer: "Click the 'Delete' button on the drive card. Please note that this action is irreversible.",
    },
    {
      question: "What is a drive?",
      answer: "A drive is a campaign where organizations collect donations or gifts for a specific purpose or group.",
    },
    {
      question: "How do I contact support?",
      answer: "You can contact support by sending an email to support@example.com.",
    },
  ];

  return (
    <div className="min-h-screen bg-gray-100 p-6 pt-32">
      <h2 className="text-2xl font-semibold mb-4">Help & FAQ</h2>

      <div className="space-y-6">
        {faqItems.map((item, index) => (
          <div
            key={index}
            className="bg-white p-4 rounded shadow-md hover:shadow-lg transition-shadow"
          >
            <h3 className="text-lg font-medium">{item.question}</h3>
            <p className="text-gray-600 mt-2">{item.answer}</p>
          </div>
        ))}
      </div>

      <div className="mt-10">
        <h3 className="text-lg font-medium mb-2">Need Further Assistance?</h3>
        <p className="text-gray-600">
          If your question isn&apos;t listed above, please reach out to our support team at:
        </p>
        <a
          href="mailto:support@example.com"
          className="text-blue-500 hover:underline"
        >
          support@example.com
        </a>
      </div>
    </div>
  );
};

HelpPage.layout = Admin;

export default HelpPage;

================
File: pages/admin/maps.js
================
import React from "react";

// components

import MapExample from "components/Maps/MapExample.js";

// layout for page

import Admin from "layouts/Admin.js";

export default function Maps() {
  return (
    <>
      <div className="flex flex-wrap">
        <div className="w-full px-4">
          <div className="relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded">
            <MapExample />
          </div>
        </div>
      </div>
    </>
  );
}

Maps.layout = Admin;

================
File: pages/admin/pastDrives.js
================
import React, { useState, useEffect, useContext } from 'react';
import axios from 'axios';
import DriveCard from '../../components/Cards/DriveCard';
import { AuthContext } from '../../contexts/AuthContext';

import Admin from "layouts/Admin.js";

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const PastDrives = () => {
  const [drives, setDrives] = useState([]);
  const { user } = useContext(AuthContext);

  useEffect(() => {
    if (user && user.org_id) {
      fetchPastDrives();
    }
  }, [user]);

  const fetchPastDrives = async () => {
    try {
      const response = await axios.get(
        `${apiUrl}/api/drives/organization/${user.org_id}/past`,
        { withCredentials: true }
      );
      setDrives(response.data);
    } catch (error) {
      console.error('Error fetching past drives:', error);
    }
  };

  const handleDeleteDrive = async (driveId) => {
    if (confirm('Are you sure you want to delete this drive? This action cannot be undone.')) {
      try {
        await axios.delete(`${apiUrl}/api/drives/${driveId}`, { withCredentials: true });
        setDrives(drives.filter((drive) => drive.drive_id !== driveId));
      } catch (error) {
        console.error('Error deleting drive:', error);
      }
    }
  };

  const handleUpdateDrive = (updatedDrive) => {
    setDrives((prevDrives) =>
      prevDrives.map((drive) =>
        drive.drive_id === updatedDrive.drive_id ? updatedDrive : drive
      )
    );
  };

  return (
    <div className="min-h-screen bg-gray-100 p-6 pt-32">
      <h2 className="text-2xl font-semibold mb-4">Past Drives</h2>

      {drives.length > 0 ? (
        <div className="grid grid-cols-1 gap-6">
          {drives.map((drive) => (
            <DriveCard
              key={drive.drive_id}
              drive={drive}
              onDelete={handleDeleteDrive}
              onUpdateDrive={handleUpdateDrive}
            />
          ))}
        </div>
      ) : (
        <p className="text-center text-gray-600 mt-10">No past drives available.</p>
      )}
    </div>
  );
};

PastDrives.layout = Admin;

export default PastDrives;

================
File: pages/admin/superAdmin.js
================
// src/pages/superadmin/organizations.js
import React, { useState, useEffect, useContext, useCallback } from 'react';
import { FaTrash } from 'react-icons/fa';
import Navbar from 'components/Navbars/AuthNavbar';
import axios from 'axios';
import { AuthContext } from '../../contexts/AuthContext';
import { useRouter } from 'next/router';

const OrganizationsAdminPage = () => {
  const { user } = useContext(AuthContext);
  const router = useRouter();
  const apiUrl = process.env.NEXT_PUBLIC_API_URL;

  // State variables for organizations
  const [organizations, setOrganizations] = useState([]);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    address: '',
    city: '',
    state: '',
    zip_code: '',
    website_link: '',
    photo: null,
  });
  const [errorMessage, setErrorMessage] = useState('');
  const [loading, setLoading] = useState(false);

  // State variables for unpurchased order items
  const [unpurchasedItems, setUnpurchasedItems] = useState([]);
  const [unpurchasedLoading, setUnpurchasedLoading] = useState(false);
  const [purchaseModal, setPurchaseModal] = useState(false);
  const [selectedOrderItem, setSelectedOrderItem] = useState(null);
  const [purchaseForm, setPurchaseForm] = useState({
    order_number: '',
    tracking_number: '',
  });
  const [purchaseLoading, setPurchaseLoading] = useState(false);
  const [purchaseError, setPurchaseError] = useState('');
  const [purchaseSuccess, setPurchaseSuccess] = useState('');

  // Fetch organizations
  const fetchOrganizations = useCallback(async () => {
    setLoading(true);
    try {
      const response = await axios.get(`${apiUrl}/api/organizations`, { withCredentials: true });
      setOrganizations(response.data);
      setErrorMessage('');
    } catch (error) {
      console.error('Error fetching organizations:', error);
      setErrorMessage('Failed to load organizations.');
    } finally {
      setLoading(false);
    }
  }, [apiUrl]);

  // Fetch unpurchased order items
  const fetchUnpurchasedItems = useCallback(async () => {
    setUnpurchasedLoading(true);
    try {
      const response = await axios.get(`${apiUrl}/api/order_items/unpurchased`, { withCredentials: true });
      setUnpurchasedItems(response.data);
    } catch (error) {
      console.error('Error fetching unpurchased order items:', error);
      // Optionally set an error state
    } finally {
      setUnpurchasedLoading(false);
    }
  }, [apiUrl]);

  // Handle authentication and fetch data
  useEffect(() => {
    if (!user) {
      router.push('/login');
    } else if (!user.is_super_admin) {
      router.push('/');
    } else {
      fetchOrganizations();
      fetchUnpurchasedItems();
    }
  }, [user, router, fetchOrganizations, fetchUnpurchasedItems]);

  // Handle input changes for organization form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // Handle file input change
  const handleFileChange = (e) => {
    setFormData((prev) => ({ ...prev, photo: e.target.files[0] }));
  };

  // Handle adding a new organization
  const handleAddOrganization = async (e) => {
    e.preventDefault();
    if (!formData.name) {
      setErrorMessage('Organization name is required.');
      return;
    }

    const submitData = new FormData();
    Object.keys(formData).forEach((key) => {
      if (formData[key] !== null) {
        submitData.append(key, formData[key]);
      }
    });

    setLoading(true);
    try {
      await axios.post(`${apiUrl}/api/organizations`, submitData, {
        withCredentials: true,
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      setErrorMessage('');
      setFormData({
        name: '',
        description: '',
        address: '',
        city: '',
        state: '',
        zip_code: '',
        website_link: '',
        photo: null,
      });
      fetchOrganizations();
    } catch (error) {
      console.error('Error adding organization:', error);
      setErrorMessage('Failed to add organization.');
    } finally {
      setLoading(false);
    }
  };

  // Handle deleting an organization
  const handleDeleteOrganization = async (org_id) => {
    if (confirm('Are you sure you want to delete this organization?')) {
      setLoading(true);
      try {
        await axios.delete(`${apiUrl}/api/organizations/${org_id}`, { withCredentials: true });
        fetchOrganizations();
      } catch (error) {
        console.error('Error deleting organization:', error);
        alert('Failed to delete organization.');
      } finally {
        setLoading(false);
      }
    }
  };

  // Handle opening the purchase modal
  const openPurchaseModal = (orderItem) => {
    setSelectedOrderItem(orderItem);
    setPurchaseForm({
      order_number: orderItem.order_number || '',
      tracking_number: orderItem.tracking_number || '',
    });
    setPurchaseError('');
    setPurchaseSuccess('');
    setPurchaseModal(true);
  };

  // Handle closing the purchase modal
  const closePurchaseModal = () => {
    setPurchaseModal(false);
    setSelectedOrderItem(null);
    setPurchaseForm({
      order_number: '',
      tracking_number: '',
    });
  };

  // Handle input changes for purchase form
  const handlePurchaseInputChange = (e) => {
    const { name, value } = e.target;
    setPurchaseForm((prev) => ({ ...prev, [name]: value }));
  };

  // Handle submitting the purchase form
  const handleSubmitPurchase = async (e) => {
    e.preventDefault();
    const { order_number, tracking_number } = purchaseForm;

    if (!order_number || !tracking_number) {
      setPurchaseError('Both order number and tracking number are required.');
      return;
    }

    setPurchaseLoading(true);
    try {
      await axios.post(
        `${apiUrl}/api/order_items/${selectedOrderItem.order_item_id}/purchase`,
        { order_number, tracking_number },
        { withCredentials: true }
      );
      setPurchaseSuccess('Order item marked as purchased successfully.');
      // Refresh the unpurchased items list
      fetchUnpurchasedItems();
      // Optionally, remove the item from the current list
      setUnpurchasedItems((prev) =>
        prev.filter((item) => item.order_item_id !== selectedOrderItem.order_item_id)
      );
      // Close the modal after a short delay
      setTimeout(() => {
        closePurchaseModal();
      }, 1500);
    } catch (error) {
      console.error('Error marking order item as purchased:', error);
      setPurchaseError(
        error.response?.data?.error || 'Failed to mark order item as purchased.'
      );
    } finally {
      setPurchaseLoading(false);
    }
  };

  return (
    <>
      <Navbar transparent />
      <div className="py-24 px-6 bg-gray-400 p-6">
        {/* Header */}
        <header className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold text-gray-800">Super Admin Dashboard</h1>
        </header>


        {/* Unpurchased Order Items Section */}
        <section className="bg-white p-6 rounded-lg shadow-md my-6">
          <h2 className="text-2xl font-semibold text-gray-700 mb-4">Unpurchased Order Items</h2>
          {unpurchasedLoading ? (
            <div className="flex justify-center items-center">
              <svg
                className="animate-spin h-8 w-8 text-blue-600"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  className="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="4"
                ></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8v8H4z"
                ></path>
              </svg>
              <span className="ml-2 text-gray-700">Loading unpurchased order items...</span>
            </div>
          ) : unpurchasedItems.length === 0 ? (
            <p className="text-gray-500">No unpurchased order items found.</p>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white table-fixed">
                <thead>
                  <tr>
                    <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider w-48">
                      Item Name
                    </th>
                    <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                      Quantity
                    </th>
                    <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                      Customer Email
                    </th>
                    <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                      Internal Item Order Number
                    </th>
                    <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                      Amazon Order Number
                    </th>
                    <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                      Tracking Number
                    </th>
                    <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {unpurchasedItems.map((item) => (
                    <tr key={item.order_item_id} className="hover:bg-gray-100" onClick={() => openPurchaseModal(item)}>
                      <td
                        className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 max-w-[12rem] truncate"
                        title={item.item_name} // Shows full text on hover
                      >
                        {item.item_name}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                        {item.quantity}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                        {item.customer_email}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                        {item.order_item_id}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                        {item.order_number || 'N/A'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                        {item.tracking_number || 'N/A'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                        <button
                          onClick={() => openPurchaseModal(item)}
                          className="flex items-center text-green-600 hover:text-green-800"
                        >
                          Mark as Purchased
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </section>

                {/* Organization Addition Form */}
      <section className="bg-white p-6 rounded-lg shadow-md mb-6">
        <h2 className="text-2xl font-semibold text-gray-700 mb-4">Add New Organization</h2>
        {errorMessage && (
          <div className="mb-4 px-4 py-2 rounded bg-red-100 text-red-700">
            {errorMessage}
          </div>
        )}
        <form onSubmit={handleAddOrganization} encType="multipart/form-data">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Name */}
            <div>
              <label htmlFor="name" className="block text-gray-700 font-medium mb-2">
                Name <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                name="name"
                id="name"
                value={formData.name}
                onChange={handleInputChange}
                required
                className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Website Link */}
            <div>
              <label htmlFor="website_link" className="block text-gray-700 font-medium mb-2">
                Website Link
              </label>
              <input
                type="url"
                name="website_link"
                id="website_link"
                value={formData.website_link}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="https://example.com"
              />
            </div>

            {/* City */}
            <div>
              <label htmlFor="city" className="block text-gray-700 font-medium mb-2">
                City
              </label>
              <input
                type="text"
                name="city"
                id="city"
                value={formData.city}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* State */}
            <div>
              <label htmlFor="state" className="block text-gray-700 font-medium mb-2">
                State
              </label>
              <input
                type="text"
                name="state"
                id="state"
                value={formData.state}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Zip Code */}
            <div>
              <label htmlFor="zip_code" className="block text-gray-700 font-medium mb-2">
                Zip Code
              </label>
              <input
                type="text"
                name="zip_code"
                id="zip_code"
                value={formData.zip_code}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Address */}
            <div className="md:col-span-2">
              <label htmlFor="address" className="block text-gray-700 font-medium mb-2">
                Address
              </label>
              <input
                type="text"
                name="address"
                id="address"
                value={formData.address}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Description */}
            <div className="md:col-span-2">
              <label htmlFor="description" className="block text-gray-700 font-medium mb-2">
                Description
              </label>
              <textarea
                name="description"
                id="description"
                value={formData.description}
                onChange={handleInputChange}
                rows="4"
                className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Provide a brief description of the organization..."
              ></textarea>
            </div>

            {/* Photo */}
            <div className="md:col-span-2">
              <label htmlFor="photo" className="block text-gray-700 font-medium mb-2">
                Photo
              </label>
              <input
                type="file"
                name="photo"
                id="photo"
                accept="image/*"
                onChange={handleFileChange}
                className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          {/* Submit Button */}
          <div className="mt-6">
            <button
              type="submit"
              disabled={loading}
              className={`w-full flex justify-center items-center px-6 py-3 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition-colors ${
                loading ? 'opacity-50 cursor-not-allowed' : ''
              }`}
            >
              {loading ? (
                <svg
                  className="animate-spin h-5 w-5 mr-3 text-white"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                  ></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8v8H4z"
                  ></path>
                </svg>
              ) : (
                'Add Organization'
              )}
              {loading ? 'Adding...' : 'Add Organization'}
            </button>
          </div>
        </form>
      </section>

      {/* Organization List */}
      <section className="bg-white p-6 rounded-lg shadow-md">
        <h2 className="text-2xl font-semibold text-gray-700 mb-4">Existing Organizations</h2>
        {loading ? (
          <div className="flex justify-center items-center">
            <svg
              className="animate-spin h-8 w-8 text-blue-600"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                className="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
              ></circle>
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8v8H4z"
              ></path>
            </svg>
            <span className="ml-2 text-gray-700">Loading organizations...</span>
          </div>
        ) : organizations.length === 0 ? (
          <p className="text-gray-500">No organizations found.</p>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full bg-white">
              <thead>
                <tr>
                  <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                    Name
                  </th>
                  <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                    Description
                  </th>
                  <th className="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody>
                {organizations.map((org) => (
                  <tr key={org.org_id} className="hover:bg-gray-100">
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          <div className="text-sm font-medium text-gray-900">{org.name}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                      {org.description.length > 100
                        ? `${org.description.substring(0, 100)}...`
                        : org.description}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                      <button
                        onClick={() => handleDeleteOrganization(org.org_id)}
                        className="flex items-center text-red-600 hover:text-red-800"
                      >
                        <FaTrash className="mr-1" />
                        Delete
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </section>


        {/* Purchase Modal */}
        {purchaseModal && selectedOrderItem && (
          <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div className="bg-white rounded-lg shadow-lg w-11/12 max-w-md p-6">
              <h3 className="text-xl font-semibold mb-4">Mark as Purchased</h3>
              {purchaseError && (
                <div className="mb-4 px-4 py-2 rounded bg-red-100 text-red-700">
                  {purchaseError}
                </div>
              )}
              {purchaseSuccess && (
                <div className="mb-4 px-4 py-2 rounded bg-green-100 text-green-700">
                  {purchaseSuccess}
                </div>
              )}
              <form onSubmit={handleSubmitPurchase}>
                <div className="mb-4">
                  <label htmlFor="order_number" className="block text-gray-700 font-medium mb-2">
                    Order Number <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    name="order_number"
                    id="order_number"
                    value={purchaseForm.order_number}
                    onChange={handlePurchaseInputChange}
                    required
                    className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                </div>
                <div className="mb-4">
                  <label htmlFor="tracking_number" className="block text-gray-700 font-medium mb-2">
                    Tracking Number <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    name="tracking_number"
                    id="tracking_number"
                    value={purchaseForm.tracking_number}
                    onChange={handlePurchaseInputChange}
                    required
                    className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                </div>
                <div className="flex justify-end">
                  <button
                    type="button"
                    onClick={closePurchaseModal}
                    className="mr-4 px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={purchaseLoading}
                    className={`px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 flex items-center ${
                      purchaseLoading ? 'opacity-50 cursor-not-allowed' : ''
                    }`}
                  >
                    {purchaseLoading && (
                      <svg
                        className="animate-spin h-5 w-5 mr-2 text-white"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8v8H4z"
                        ></path>
                      </svg>
                    )}
                    {purchaseLoading ? 'Processing...' : 'Mark as Purchased'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </>
  );
};

export default OrganizationsAdminPage;

================
File: pages/admin/tables.js
================
import React from "react";

// components

import CardTable from "components/Cards/CardTable.js";

// layout for page

import Admin from "layouts/Admin.js";

export default function Tables() {
  return (
    <>
      <div className="flex flex-wrap mt-4">
        <div className="w-full mb-12 px-4">
          <CardTable />
        </div>
        <div className="w-full mb-12 px-4">
          <CardTable color="dark" />
        </div>
      </div>
    </>
  );
}

Tables.layout = Admin;

================
File: pages/auth/login.js
================
import React, { useState, useContext, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import Auth from 'layouts/Auth.js';
import { AuthContext } from '../../contexts/AuthContext';
// const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export default function Login() {
  const { user, login } = useContext(AuthContext);
  const router = useRouter();

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [setError] = useState('');

  // const handleGoogleLogin = () => {
  //   window.location.href = `${apiUrl}/api/auth/google`;
  // };

  // const handleFacebookLogin = () => {
  //   window.location.href = `${apiUrl}/api/auth/facebook`;
  // };

  useEffect(() => {
    if (user && user.account_id) {
      router.push('../visible/profile');
    }
  }, [user]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      await login({ email, password });
    } catch (err) {
      console.error('Login failed:', err);
      setError(err.response?.data?.message || 'An error occurred during login.');
    }
  };

  return (
    <div className="min-h-screen bg-secondary_green flex items-center justify-center px-4">
      <div className="w-full lg:w-4/12">
        <div className="relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded-lg bg-white border-0">
          {/* <div className="rounded-t mb-0 px-6 py-6"> */}
          {/* <div className="text-center mb-3">
              <h6 className="text-gray-800 text-sm font-bold font-georgia">
                Sign in with
              </h6>
            </div> */}
          {/* {error && (
              <div className="text-center mb-3">
                <p className="text-red-500 text-sm">{error}</p>
              </div>
            )} */}
          {/* <div className="btn-wrapper text-center space-x-2">
              <button
                className="bg-ggreen text-white font-semibold px-6 py-3 rounded-full shadow hover:shadow-lg transition-all duration-150 inline-flex items-center"
                type="button"
                onClick={handleFacebookLogin}
              >
                <img
                  alt="Facebook Logo"
                  className="w-5 mr-2"
                  src="https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg"
                />
                Facebook
              </button>
              <button
                className="bg-ggreen text-white font-semibold px-6 py-3 rounded-full shadow hover:shadow-lg transition-all duration-150 inline-flex items-center"
                type="button"
                onClick={handleGoogleLogin}
              >
                <img
                  alt="Google Logo"
                  className="w-5 mr-2"
                  src="https://www.gstatic.com/images/branding/product/1x/gsa_512dp.png"
                />
                Google
              </button> */}
          {/* </div> */}
          {/* <hr className="mt-6 border-b-1 border-gray-300" /> */}
          {/* </div> */}
          <div className="flex-auto px-4 lg:px-10 py-10">
            {/* <div className="text-gray-600 text-center mb-3 font-bold">
              <small>Sign In Below</small>
            </div> */}
            <form onSubmit={handleSubmit}>
              <div className="relative w-full mb-3">
                <label
                  className="block uppercase text-gray-800 text-xs font-bold mb-2"
                  htmlFor="email"
                >
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="border-0 px-3 py-3 placeholder-gray-300 text-gray-800 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full transition-all duration-150"
                  placeholder="Email"
                  required
                  autoComplete="email"
                />
              </div>

              <div className="relative w-full mb-3">
                <label
                  className="block uppercase text-gray-800 text-xs font-bold mb-2"
                  htmlFor="password"
                >
                  Password
                </label>
                <input
                  type="password"
                  id="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="border-0 px-3 py-3 placeholder-gray-300 text-gray-800 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full transition-all duration-150"
                  placeholder="Password"
                  required
                  autoComplete="current-password"
                />
              </div>

              <div className="text-center mt-6">
                <button
                  className="bg-ggreen text-white font-semibold uppercase px-6 py-3 rounded-full shadow hover:shadow-lg transition-all duration-150 w-full"
                  type="submit"
                >
                  Sign In
                </button>
              </div>
            </form>
          </div>
        </div>
        <div className="flex flex-wrap mt-6 relative">
          <div className="w-1/2">
            <a
              href="#forgot-password"
              onClick={(e) => e.preventDefault()}
              className="text-gray-800"
            >
              <small>Forgot password?</small>
            </a>
          </div>
          <div className="w-1/2 text-right">
            <Link href="/auth/register" className="text-gray-800">
              <small>Create new account</small>
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}

Login.layout = Auth;

================
File: pages/auth/register.js
================
import React, { useState, useContext, useEffect } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import { AuthContext } from '../../contexts/AuthContext';
import Link from 'next/link';

// Import the Auth layout
import Auth from "layouts/Auth.js";

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const RegisterPage = () => {
  const { user, login } = useContext(AuthContext);
  const router = useRouter();

  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    confirmPassword: '',
  });

  const [error, setError] = useState('');

  // Redirect logic
  useEffect(() => {
    if (user) {
      router.push('../visible/profile');
    }
  }, [user, router]);

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Basic validation
    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match.');
      return;
    }

    try {
      // Send a POST request to the backend to register the user
      await axios.post(`${apiUrl}/api/auth/register`, {
        username: formData.username,
        email: formData.email,
        password: formData.password,
      }, { withCredentials: true });

      // Log the user in by updating the AuthContext
      await login({ email: formData.email, password: formData.password });

      // Redirect to the account page
      router.push('../visible/profile');
    } catch (err) {
      console.error('Registration failed:', err);
      setError(err.response?.data?.message || 'An error occurred during registration.');
    }
  };

  // const handleGoogleLogin = () => {
  //   window.location.href = `${apiUrl}/api/auth/google`;
  // };

  // const handleFacebookLogin = () => {
  //   window.location.href = `${apiUrl}/api/auth/facebook`;
  // };

  return (
    <div className="min-h-screen bg-secondary_green flex items-center justify-center px-4 pt-24">
      <div className="w-full lg:w-6/12 px-4">
        <div className="relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded-lg bg-white border-0">
          {/* Header Section with Social Logins */}
          <div className="rounded-t mb-0 px-6 py-6">
            {/* <div className="text-center mb-3">
              <h6 className="text-gray-800 text-sm font-bold font-georgia">
                Sign up with
              </h6>
            </div>
            <div className="btn-wrapper text-center space-x-2">

              <button
                className="bg-ggreen text-white font-semibold px-6 py-3 rounded-full shadow hover:shadow-lg transition-all duration-150 inline-flex items-center"
                type="button"
                onClick={handleGoogleLogin}
              >
                <img alt="Google" className="w-5 mr-2" src="https://www.gstatic.com/images/branding/product/1x/gsa_512dp.png" />
                Google
              </button>
              <button
                className="bg-ggreen text-white font-semibold px-6 py-3 rounded-full shadow hover:shadow-lg transition-all duration-150 inline-flex items-center"
                type="button"
                onClick={handleFacebookLogin}
              >
                <img alt="Facebook" className="w-5 mr-2" src="https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg" />
                Facebook
              </button>
            </div>
            <hr className="mt-6 border-b-1 border-gray-300" />*/}
          </div>
          {/* Form Section */}
          <div className="flex-auto px-4 lg:px-10 py-10 pt-0">
            {/* <div className="text-gray-600 text-center mb-3 font-bold">
              <small>Or sign up with your credentials</small>
            </div> */}
            {/* Display Error Message */}
            {error && (
              <div
                className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4"
                role="alert"
              >
                <span className="block sm:inline">{error}</span>
              </div>
            )}
            <form onSubmit={handleSubmit} noValidate>
              {/* Username */}
              <div className="relative w-full mb-3">
                <label
                  className="block uppercase text-gray-800 text-xs font-bold mb-2"
                  htmlFor="username"
                >
                  Username
                </label>
                <input
                  type="text"
                  name="username"
                  value={formData.username}
                  onChange={handleChange}
                  className="border-0 px-3 py-3 placeholder-gray-300 text-gray-800 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full transition-all duration-150"
                  placeholder="Username"
                  required
                  autoComplete="username"
                />
              </div>

              {/* Email */}
              <div className="relative w-full mb-3">
                <label
                  className="block uppercase text-gray-800 text-xs font-bold mb-2"
                  htmlFor="email"
                >
                  Email
                </label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  className="border-0 px-3 py-3 placeholder-gray-300 text-gray-800 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full transition-all duration-150"
                  placeholder="Email"
                  required
                  autoComplete="email"
                />
              </div>

              {/* Password */}
              <div className="relative w-full mb-3">
                <label
                  className="block uppercase text-gray-800 text-xs font-bold mb-2"
                  htmlFor="password"
                >
                  Password
                </label>
                <input
                  type="password"
                  name="password"
                  value={formData.password}
                  onChange={handleChange}
                  className="border-0 px-3 py-3 placeholder-gray-300 text-gray-800 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full transition-all duration-150"
                  placeholder="Password"
                  required
                  autoComplete="new-password"
                />
              </div>

              {/* Confirm Password */}
              <div className="relative w-full mb-3">
                <label
                  className="block uppercase text-gray-800 text-xs font-bold mb-2"
                  htmlFor="confirmPassword"
                >
                  Confirm Password
                </label>
                <input
                  type="password"
                  name="confirmPassword"
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  className="border-0 px-3 py-3 placeholder-gray-300 text-gray-800 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full transition-all duration-150"
                  placeholder="Confirm Password"
                  required
                  autoComplete="new-password"
                />
              </div>

              {/* Privacy Policy Agreement */}
              <div>
                <label className="inline-flex items-center cursor-pointer">
                  <input
                    id="customCheckRegister"
                    type="checkbox"
                    className="form-checkbox border-0 rounded text-gray-800 ml-1 w-5 h-5 transition-all duration-150"
                    required
                  />
                  <span className="ml-2 text-sm font-semibold text-gray-800">
                    I agree with the{' '}
                    <a
                      href="/privacy-policy" // Update with actual privacy policy route
                      className="text-ggreen"
                      onClick={(e) => e.preventDefault()}
                    >
                      Privacy Policy
                    </a>
                  </span>
                </label>
              </div>

              {/* Submit Button */}
              <div className="text-center mt-6">
                <button
                  className="bg-ggreen text-white font-semibold uppercase px-6 py-3 rounded-full shadow hover:shadow-lg transition-all duration-150 w-full"
                  type="submit"
                >
                  Create Account
                </button>
              </div>
            </form>
          </div>
        </div>
        {/* Additional Links */}
        <div className="flex flex-wrap mt-6 relative">
          <div className="w-full text-center">
            <Link href="/auth/login" className="text-gray-800">
              <small>Already have an account?</small>
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

RegisterPage.layout = Auth;

export default RegisterPage;

================
File: pages/visible/child/[id].js
================
// src/pages/visible/child/[id].js

import { useRouter } from 'next/router';
import React, { useContext, useState } from 'react';
import PropTypes from 'prop-types';
import { CartContext } from '../../../contexts/CartContext';
import Link from 'next/link';
import Footer from 'components/Footers/Footer';
import Navbar from 'components/Navbars/AuthNavbar';
import { FaArrowLeft } from 'react-icons/fa';
import Breadcrumbs from 'components/UI/Breadcrumbs'; // Ensure this component exists
import Image from 'next/image';
import axios from 'axios';
import { toast } from 'react-toastify';

const ChildDetailPage = ({ child }) => {
  const router = useRouter();
  const { cart, addToCart, removeFromCart } = useContext(CartContext);
  const [quantities, setQuantities] = useState({});

  console.log('Rendered Child:', child);

  if (!child) {
    return (
      <>
        <Navbar />
        <main className="min-h-screen flex items-center justify-center bg-secondary_green text-gray-800 relative">
          <p className="text-gray-600 text-lg">Child not found.</p>
        </main>
        <Footer />
      </>
    );
  }

  const handleAddToCart = (item, quantity) => {
    const itemId = item.item_id;
    const configId = item.config_id || null;
    const childId = child.child_id;

    if (!itemId) {
      console.error('Missing item_id');
      toast.error('Invalid item. Please try again.');
      return;
    }

    addToCart(itemId, configId, childId, quantity);
  };

  const handleRemoveFromCart = (cartItemId) => {
    removeFromCart(cartItemId);
  };

  const isItemAdded = (item) => {
    return cart?.items?.some(
      (ci) =>
        ci.item_id === item.item_id &&
        ci.config_id === (item.config_id || null) &&
        ci.child_id === child.child_id
    );
  };

  const getCartItemId = (item) => {
    const cartItem = cart?.items?.find(
      (ci) =>
        ci.item_id === item.item_id &&
        ci.config_id === (item.config_id || null) &&
        ci.child_id === child.child_id
    );
    return cartItem ? cartItem.cart_item_id : null;
  };

  const handleQuantityChange = (itemId, value, max) => {
    const newQuantity = Math.max(1, Math.min(Number(value), max));
    setQuantities((prev) => ({
      ...prev,
      [itemId]: newQuantity,
    }));
  };

  return (
    <>
      <Navbar />
      <main className="min-h-screen bg-secondary_green text-gray-800 relative pt-32 pb-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Breadcrumb Navigation */}
          <Breadcrumbs
            links={[
              { href: '/', label: 'Home' },
              { href: '/visible/orglist', label: 'Organizations' },
              { href: `/drive/${child.drive_id}`, label: child.drive_name },
              { href: `/drive/${child.drive_id}/child/${child.child_id}`, label: child.child_name },
            ]}
          />

          {/* Back Button */}
          <button
            onClick={() => router.back()}
            className="flex items-center mb-6 px-4 py-2 bg-ggreen text-white rounded-md hover:bg-ggreen-dark transition-colors focus:outline-none focus:ring-2 focus:ring-ggreen"
            aria-label="Go back to previous page"
          >
            <FaArrowLeft className="mr-2" />
            Back
          </button>

          {/* Child Details */}
          <div className="bg-white shadow-md rounded-lg overflow-hidden mb-8">
            <div className="flex flex-col md:flex-row">
              {/* Child Image */}
              {child.photo && (
                <div className="md:w-1/3 flex justify-center items-center p-6">
                  <Image
                    src={child.photo}
                    alt={child.child_name}
                    width={192}
                    height={192}
                    className="object-cover rounded-full"
                  />
                </div>
              )}
              {/* Child Info */}
              <div className="md:w-2/3 p-6 flex flex-col justify-center">
                <h1 className="text-3xl inter-bold text-ggreen mb-2">
                  {child.child_name}
                </h1>
                <p className="text-gray-600 mb-2">
                  Associated with Drive:{' '}
                  <Link href={`/drive/${child.drive_id}`} className="text-ggreen hover:underline">
                    {child.drive_name}
                  </Link>
                </p>
                {child.age && (
                  <p className="text-gray-600 mb-1">
                    <strong>Age:</strong> {child.age}
                  </p>
                )}
                {child.gender && (
                  <p className="text-gray-600 mb-1">
                    <strong>Gender:</strong> {child.gender}
                  </p>
                )}
                {child.description && (
                  <p className="text-gray-600">{child.description}</p>
                )}
              </div>
            </div>
          </div>

          {/* Items Needed */}
          <div className="bg-white shadow-md rounded-lg p-6">
            <h2 className="text-2xl inter-semi-bold text-ggreen mb-6">
              Items Needed
            </h2>
            {child.items && child.items.length > 0 ? (
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {child.items.map((item) => {
                  const isAdded = isItemAdded(item);
                  const cartItemId = getCartItemId(item);
                  const isOutOfStock = item.remaining <= 0;
                  const maxQuantity = item.remaining;
                  return (
                    <div
                      key={item.child_item_id}
                      className={`border p-4 rounded-lg shadow-sm ${isAdded ? 'border-green-500' : 'border-gray-200'
                        } flex flex-col justify-between`}
                    >
                      {/* Item Image */}
                      {item.item_photo && (
                        <div className="flex justify-center">
                          <Image
                            src={item.item_photo}
                            alt={item.item_name || 'Item Image'}
                            width={128}
                            height={128}
                            className="object-cover rounded-lg mb-4"
                          />
                        </div>
                      )}
                      {/* Item Info */}
                      <div className="flex-grow">
                        <h3 className="text-lg inter-semi-bold text-ggreen mb-2">
                          {item.item_name}
                        </h3>
                        <p className="text-gray-600 mb-2">
                          ${Number(item.price).toFixed(2)}
                        </p>
                        <p className="text-gray-600 text-sm">
                          Needed: {item.needed} | Purchased: {item.purchased} | Remaining: {item.remaining}
                        </p>
                        {item.description && (
                          <p className="text-gray-600 mb-2">{item.description}</p>
                        )}
                      </div>
                      {/* Users with Item in Cart (optional) */}
                      {item.users_with_item_in_cart > 1 && (
                        <div className="bg-yellow-100 text-yellow-800 text-sm rounded-lg p-2 mb-2">
                          {item.users_with_item_in_cart} other {item.users_with_item_in_cart === 2 ? 'person' : 'people'} have this item in their cart
                        </div>
                      )}
                      {/* Quantity Selector and Add/Remove Button */}
                      <div className="mt-4">
                        {item.needed > 1 ? (
                          <>
                            <div className="flex items-center mb-2">
                              <label htmlFor={`quantity-${item.child_item_id}`} className="mr-2 text-gray-700">
                                Quantity:
                              </label>
                              <input
                                type="number"
                                id={`quantity-${item.child_item_id}`}
                                name={`quantity-${item.child_item_id}`}
                                min="1"
                                max={maxQuantity}
                                value={quantities[item.item_id] || 1}
                                onChange={(e) =>
                                  handleQuantityChange(item.item_id, e.target.value, maxQuantity)
                                }
                                className="w-16 px-2 py-1 border border-gray-300 rounded text-center focus:outline-none focus:ring-2 focus:ring-ggreen"
                                disabled={isOutOfStock}
                              />
                            </div>
                            <button
                              onClick={() =>
                                isAdded
                                  ? handleRemoveFromCart(cartItemId)
                                  : handleAddToCart(item, quantities[item.item_id] || 1)
                              }
                              className={`w-full py-2 rounded-lg text-white transition-colors ${isAdded
                                  ? 'bg-red-500 hover:bg-red-600'
                                  : isOutOfStock
                                    ? 'bg-gray-400 cursor-not-allowed'
                                    : 'bg-ggreen hover:bg-ggreen-dark'
                                }`}
                              aria-label={
                                isAdded
                                  ? `Remove ${item.item_name} from cart`
                                  : isOutOfStock
                                    ? `${item.item_name} is fully purchased`
                                    : `Add ${item.item_name} to cart`
                              }
                              disabled={isOutOfStock}
                            >
                              {isAdded ? 'Remove' : isOutOfStock ? 'Out of Stock' : 'Add'}
                            </button>
                          </>
                        ) : (
                          <button
                            onClick={() =>
                              isAdded ? handleRemoveFromCart(cartItemId) : handleAddToCart(item, 1)
                            }
                            className={`w-full py-2 rounded-lg text-white transition-colors ${isAdded
                                ? 'bg-red-500 hover:bg-red-600'
                                : isOutOfStock
                                  ? 'bg-gray-400 cursor-not-allowed'
                                  : 'bg-ggreen hover:bg-ggreen-dark'
                              }`}
                            aria-label={
                              isAdded
                                ? `Remove ${item.item_name} from cart`
                                : isOutOfStock
                                  ? `${item.item_name} is fully purchased`
                                  : `Add ${item.item_name} to cart`
                            }
                            disabled={isOutOfStock}
                          >
                            {isAdded ? 'Remove' : isOutOfStock ? 'Out of Stock' : 'Add'}
                          </button>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            ) : (
              <p className="text-gray-600">No items are currently needed for this child.</p>
            )}
          </div>
        </div>
      </main>
      <Footer />
    </>
  );
};

ChildDetailPage.propTypes = {
  child: PropTypes.shape({
    child_id: PropTypes.number.isRequired,
    child_name: PropTypes.string.isRequired,
    drive_id: PropTypes.number.isRequired,
    drive_name: PropTypes.string.isRequired,
    photo: PropTypes.string,
    age: PropTypes.number,
    gender: PropTypes.string,
    description: PropTypes.string,
    items: PropTypes.arrayOf(
      PropTypes.shape({
        child_item_id: PropTypes.number.isRequired,
        item_id: PropTypes.number.isRequired,
        config_id: PropTypes.number,
        item_name: PropTypes.string.isRequired,
        item_photo: PropTypes.string,
        price: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
        users_with_item_in_cart: PropTypes.number.isRequired,
        description: PropTypes.string,
        size: PropTypes.string,
        color: PropTypes.string,
        needed: PropTypes.number.isRequired,
        purchased: PropTypes.number.isRequired,
        remaining: PropTypes.number.isRequired,
      })
    ).isRequired,
  }).isRequired,
};

export async function getServerSideProps(context) {
  const { id } = context.params;
  const apiUrl = process.env.NEXT_PUBLIC_API_URL;

  try {
    // Fetch child details
    const childResponse = await axios.get(`${apiUrl}/api/children/${id}`, {
      withCredentials: true,
    });
    const childData = childResponse.data;

    if (!childData || !childData.child_id) {
      console.warn(`Child with ID ${id} not found.`);
      return {
        props: {
          child: null,
        },
      };
    }

    // Fetch items associated with the child
    const itemsResponse = await axios.get(`${apiUrl}/api/children/${childData.child_id}/items`, {
      withCredentials: true,
    });
    const itemsData = itemsResponse.data;

    const items = Array.isArray(itemsData)
      ? itemsData.map((item) => ({
        child_item_id: item.child_item_id,
        item_id: item.item_id,
        config_id: item.config_id || null,
        item_name: item.item_name,
        item_photo: item.item_photo || '/img/default-item.png',
        price: Number(item.price),
        users_with_item_in_cart: Number(item.users_with_item_in_cart) || 0,
        description: item.description || null,
        size: item.size || null,
        color: item.color || null,
        needed: Number(item.needed) || 0,
        purchased: Number(item.purchased) || 0,
        remaining: Number(item.remaining) || 0,
      }))
      : [];

    const child = {
      child_id: childData.child_id,
      child_name: childData.child_name,
      drive_id: childData.drive_id,
      drive_name: childData.drive_name,
      photo: childData.photo || '/img/default-child.png',
      age: childData.age || null,
      gender: childData.gender || null,
      description: childData.description || null,
      items: items,
    };

    return {
      props: {
        child,
      },
    };
  } catch (error) {
    console.error('Error fetching child or items data:', error.message);
    return {
      props: {
        child: null,
      },
    };
  }
}

export default ChildDetailPage;

================
File: pages/visible/drive/[id].js
================
import axios from 'axios';
import React, { useContext, useState } from 'react';
// Removed Link from 'next/link' because we won't navigate away now
import PropTypes from 'prop-types';
import { useRouter } from 'next/router';
import Navbar from 'components/Navbars/AuthNavbar.js';
import Footer from 'components/Footers/Footer.js';
import { FaArrowLeft } from 'react-icons/fa';
import Breadcrumbs from 'components/UI/Breadcrumbs.js';
import Image from 'next/image';
import { CartContext } from 'contexts/CartContext';

// Import your ChildModal
import ChildModal from 'components/Modals/ChildModal';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const DrivePage = ({ drive }) => {
  const router = useRouter();
  const { cart, addToCart, removeFromCart } = useContext(CartContext);
  const [driveQuantities, setDriveQuantities] = useState({});

  // State for showing/hiding Child Modal
  const [selectedChildId, setSelectedChildId] = useState(null);
  const [isModalOpen, setModalOpen] = useState(false);

  // Open modal and store which child was clicked
  const openChildModal = (childId) => {
    setSelectedChildId(childId);
    setModalOpen(true);
  };

  // Close modal
  const closeChildModal = () => {
    setSelectedChildId(null);
    setModalOpen(false);
  };

  // Early return if drive is null to avoid runtime errors
  if (!drive) {
    return (
      <>
        <Navbar />
        <main className="min-h-screen flex items-center justify-center bg-secondary_green text-gray-800">
          <p className="text-gray-600 text-lg">Drive not found.</p>
        </main>
        <Footer />
      </>
    );
  }

  // Use aggregated totals if available
  const totalNeeded =
    Number(drive.totalNeeded) ||
    drive.items?.reduce((sum, item) => sum + (Number(item.needed) || 0), 0);
  const totalDonated =
    Number(drive.totalPurchased) ||
    drive.items?.reduce(
      (sum, item) =>
        sum + ((Number(item.needed) || 0) - (Number(item.remaining) || 0)),
      0
    );

  const totalRemaining = totalNeeded - totalDonated;
  const progressPercentage = totalNeeded ? (totalDonated / totalNeeded) * 100 : 0;

  // Placeholder top donors
  const topDonors = [
    { name: 'Bethia Maglioni', items: 5 },
    { name: 'Margaret Whitman', items: 3 },
    { name: 'Maxwell Krupp', items: 3 },
  ];

  // Helper: Check if a drive item is already in the cart
  const isDriveItemAdded = (item) => {
    return cart?.items?.some(
      (ci) =>
        ci.item_id === item.item_id &&
        ci.config_id === (item.config_id || null) &&
        ci.drive_id === drive.drive_id
    );
  };

  // Helper: Get the cart_item_id for a drive item
  const getDriveCartItemId = (item) => {
    const cartItem = cart?.items?.find(
      (ci) =>
        ci.item_id === item.item_id &&
        ci.config_id === (item.config_id || null) &&
        ci.drive_id === drive.drive_id
    );
    return cartItem ? cartItem.cart_item_id : null;
  };

  // Handle quantity change for drive items
  const handleDriveQuantityChange = (itemId, value, max) => {
    const newQuantity = Math.max(1, Math.min(Number(value), max));
    setDriveQuantities((prev) => ({
      ...prev,
      [itemId]: newQuantity,
    }));
  };

  // Handle adding a drive item to the cart
  const handleAddToCartDrive = (item, quantity) => {
    const itemId = item.item_id;
    const configId = item.config_id || null;
    addToCart(itemId, configId, null, drive.drive_id, quantity);
  };

  return (
    <>
      <Navbar />
      <main className="min-h-screen bg-secondary_green text-gray-800 relative pt-24 pb-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Breadcrumb Navigation */}
          <Breadcrumbs
            links={[
              { href: '/', label: 'Home' },
              { href: '/visible/orglist', label: 'Organizations' },
              { href: `/drive/${drive.id}`, label: drive.name },
            ]}
          />

          {/* Back Button */}
          <button
            onClick={() => router.back()}
            className="flex items-center mb-6 px-4 py-2 bg-ggreen text-white rounded-md hover:bg-ggreen-dark transition-colors focus:outline-none focus:ring-2 focus:ring-ggreen"
            aria-label="Go back to previous page"
          >
            <FaArrowLeft className="mr-2" />
            Back
          </button>

          {/* Drive Title & Basic Info */}
          <div className="mb-6">
            <h1 className="text-3xl font-semibold text-ggreen mb-2">{drive.name}</h1>
            <div className="text-gray-600 flex flex-wrap gap-4 items-center">
              <p className="font-medium">{totalNeeded} Items Needed</p>
              {drive.location && <p className="font-medium">{drive.location}</p>}
            </div>
          </div>

          {/* Two-column layout: Left = progress/items, Right = org info */}
          <div className="flex flex-col md:flex-row gap-8">
            {/* Left Column */}
            <div className="md:w-2/3 space-y-6">
              <div className="flex">
                {/* Drive Progress */}
                <div className="border-2 border-ggreen shadow rounded-lg p-6 w-1/2 mr-4">
                  <h2 className="text-xl font-semibold text-ggreen mb-4">Drive Progress</h2>
                  <div className="bg-gray-200 w-full h-4 rounded-full mb-2">
                    <div
                      className="border-2 border-ggreen bg-ggreen h-4 rounded-full"
                      style={{ width: `${progressPercentage}%` }}
                    ></div>
                  </div>
                  <p className="text-sm text-gray-700 mb-2">
                    Items Donated: <strong>{totalDonated}</strong>
                  </p>
                  <p className="text-sm text-gray-700 mb-4">
                    Items Still Needed: <strong>{totalRemaining}</strong>
                  </p>
                </div>

                {/* Top Donors */}
                <div className="border-2 border-ggreen shadow rounded-lg p-6 w-1/2">
                  <h3 className="text-lg font-semibold text-ggreen mb-2">Top Donors</h3>
                  <ul className="text-sm text-gray-700 list-disc list-inside space-y-1 list-none">
                    {topDonors.map((donor, idx) => (
                      <li key={idx}>
                        {idx + 1}. {donor.name} ({donor.items} items)
                      </li>
                    ))}
                  </ul>
                </div>
              </div>

              {/* Items Section */}
              {drive.items && drive.items.length > 0 && (
                <section>
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    {drive.items.map((item) => {
                      const added = isDriveItemAdded(item);
                      const cartItemId = getDriveCartItemId(item);
                      const isOutOfStock = item.remaining <= 0;
                      const maxQuantity = item.remaining;
                      return (
                        <div
                          key={item.drive_item_id}
                          className="border-2 border-ggreen p-4 rounded-lg shadow-sm flex flex-col justify-between"
                        >
                          {/* Item image */}
                          {item.item_photo && (
                            <div className="flex justify-center mb-4">
                              <Image
                                src={item.item_photo || '/img/default-item.png'}
                                alt={item.item_name}
                                width={96}
                                height={96}
                                className="object-cover rounded-md"
                              />
                            </div>
                          )}
                          {/* Item name & details */}
                          <h3 className="text-lg text-ggreen font-medium mb-1">
                            {item.item_name}
                          </h3>
                          <p className="text-gray-600 text-sm mb-2">{item.description}</p>
                          <p className="text-gray-800 font-bold mb-2">
                            ${Number(item.price).toFixed(2)}
                          </p>
                          <p className="text-sm text-gray-600 mb-2">
                            <strong>Needed:</strong> {item.needed} &nbsp;
                            <strong>Remaining:</strong> {item.remaining}
                          </p>

                          {/* Quantity + Buttons */}
                          <div className="mt-4">
                            {item.needed > 1 ? (
                              <>
                                <div className="flex items-center mb-2">
                                  <label
                                    htmlFor={`quantity-drive-${item.drive_item_id}`}
                                    className="mr-2 text-gray-700"
                                  >
                                    Quantity:
                                  </label>
                                  <input
                                    type="number"
                                    id={`quantity-drive-${item.drive_item_id}`}
                                    min="1"
                                    max={maxQuantity}
                                    value={driveQuantities[item.item_id] || 1}
                                    onChange={(e) =>
                                      handleDriveQuantityChange(
                                        item.item_id,
                                        e.target.value,
                                        maxQuantity
                                      )
                                    }
                                    className="w-16 px-2 py-1 border border-gray-300 rounded text-center focus:outline-none focus:ring-2 focus:ring-ggreen"
                                    disabled={isOutOfStock}
                                  />
                                </div>
                                <div className="flex gap-2">
                                  <button
                                    onClick={() =>
                                      added
                                        ? removeFromCart(cartItemId)
                                        : handleAddToCartDrive(
                                          item,
                                          driveQuantities[item.item_id] || 1
                                        )
                                    }
                                    className={`w-full py-2 rounded-lg text-white transition-colors ${added
                                      ? 'bg-red-500 hover:bg-red-600'
                                      : isOutOfStock
                                        ? 'bg-gray-400 cursor-not-allowed'
                                        : 'bg-ggreen hover:bg-ggreen-dark'
                                      }`}
                                    disabled={isOutOfStock}
                                  >
                                    {added
                                      ? 'Remove'
                                      : isOutOfStock
                                        ? 'Out of Stock'
                                        : 'Add to Cart'}
                                  </button>
                                  <button
                                    className={`w-full py-2 rounded-lg border transition-colors ${isOutOfStock
                                      ? 'border-gray-400 text-gray-400 cursor-not-allowed'
                                      : 'border-ggreen text-ggreen hover:bg-gray-100'
                                      }`}
                                    disabled={isOutOfStock}
                                  >
                                    Purchase in Person
                                  </button>
                                </div>
                              </>
                            ) : (
                              <div className="flex gap-2">
                                <button
                                  onClick={() =>
                                    added
                                      ? removeFromCart(cartItemId)
                                      : handleAddToCartDrive(item, 1)
                                  }
                                  className={`w-full py-2 rounded-lg text-white transition-colors ${added
                                    ? 'bg-red-500 hover:bg-red-600'
                                    : isOutOfStock
                                      ? 'bg-gray-400 cursor-not-allowed'
                                      : 'bg-ggreen hover:bg-ggreen-dark'
                                    }`}
                                  disabled={isOutOfStock}
                                >
                                  {added ? 'Remove' : isOutOfStock ? 'Out of Stock' : 'Add'}
                                </button>
                                <button
                                  className={`w-full py-2 rounded-lg border transition-colors ${isOutOfStock
                                    ? 'border-gray-400 text-gray-400 cursor-not-allowed'
                                    : 'border-ggreen text-ggreen hover:bg-gray-100'
                                    }`}
                                  disabled={isOutOfStock}
                                >
                                  Purchase in Person
                                </button>
                              </div>
                            )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </section>
              )}

              {/* Children Section */}
              {drive.children && drive.children.length > 0 && (
                <section>
                  <h2 className="text-2xl font-semibold text-ggreen mb-4">
                    Children in {drive.name}
                  </h2>
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    {drive.children.map((child) => (
                      <div
                        key={child.child_id}
                        onClick={() => openChildModal(child.child_id)}
                        className="cursor-pointer block border-2 border-ggreen shadow-md rounded-lg overflow-hidden hover:shadow-lg transition-shadow"
                      >
                        {child.child_photo && (
                          <div className="flex justify-center mt-4">
                            <Image
                              src={child.child_photo || '/img/default-child.png'}
                              alt={child.child_name}
                              width={96}
                              height={96}
                              className="object-cover rounded-full"
                            />
                          </div>
                        )}
                        <div className="p-4 text-center">
                          <h3 className="text-lg font-semibold text-ggreen mb-2">
                            {child.child_name}
                          </h3>
                          {child.age && (
                            <p className="text-gray-600">
                              <strong>Age:</strong> {child.age}
                            </p>
                          )}
                          {child.gender && (
                            <p className="text-gray-600">
                              <strong>Gender:</strong> {child.gender}
                            </p>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </section>
              )}

              {(!drive.children || drive.children.length === 0) &&
                (!drive.items || drive.items.length === 0) && (
                  <p className="text-ggreen text-lg">No children or items for this drive.</p>
                )}
            </div>

            {/* Right Column: Organization / Share Info */}
            <div className="md:w-1/3 space-y-6">
              <div className="border-2 border-ggreen shadow rounded-lg p-6">
                <h2 className="text-xl font-semibold text-ggreen mb-4">Organization</h2>
                <p className="text-gray-700 mb-2">
                  <strong>Org Name:</strong> {drive.organization_name || 'Williston Federated Church'}
                </p>
                <p className="text-gray-700 mb-2">
                  <strong>Drive Organizer:</strong> {drive.organizer_name || 'Logan Vaughan'}
                </p>
                <p className="text-gray-700 mb-4">
                  <strong>Donors:</strong> {drive.donorsCount || 8}
                </p>
                <button className="px-4 py-2 bg-ggreen text-white rounded-md hover:bg-ggreen-dark">
                  Share / Add
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Child Modal at the bottom */}
      <ChildModal
        isOpen={isModalOpen}
        onClose={closeChildModal}
        childId={selectedChildId}
      />

      <Footer />
    </>
  );
};

DrivePage.propTypes = {
  drive: PropTypes.shape({
    id: PropTypes.string.isRequired,
    drive_id: PropTypes.number,
    name: PropTypes.string.isRequired,
    description: PropTypes.string,
    photo: PropTypes.string,
    location: PropTypes.string,
    organization_name: PropTypes.string,
    organizer_name: PropTypes.string,
    donorsCount: PropTypes.number,
    totalNeeded: PropTypes.number,
    totalPurchased: PropTypes.number,
    children: PropTypes.arrayOf(
      PropTypes.shape({
        child_id: PropTypes.string.isRequired,
        child_name: PropTypes.string.isRequired,
        child_photo: PropTypes.string,
        age: PropTypes.number,
        gender: PropTypes.string,
      })
    ),
    items: PropTypes.arrayOf(
      PropTypes.shape({
        drive_item_id: PropTypes.number.isRequired,
        item_id: PropTypes.number.isRequired,
        item_name: PropTypes.string.isRequired,
        item_photo: PropTypes.string,
        description: PropTypes.string,
        price: PropTypes.number,
        needed: PropTypes.number,
        remaining: PropTypes.number,
      })
    ),
  }),
};

export async function getServerSideProps(context) {
  const { id } = context.params;
  try {
    const driveResponse = await axios.get(`${apiUrl}/api/drives/${id}`);
    const drive = driveResponse.data;

    // Items
    const itemsResponse = await axios.get(`${apiUrl}/api/drives/${id}/items`);
    drive.items = itemsResponse.data;

    // Aggregates
    const aggregateResponse = await axios.get(`${apiUrl}/api/drives/${id}/aggregate`);
    const aggregate = aggregateResponse.data;
    drive.totalNeeded = aggregate.totalNeeded;
    drive.totalPurchased = aggregate.totalPurchased;

    // So "drive.id" equals "drive.drive_id"
    drive.id = drive.drive_id;

    return {
      props: { drive },
    };
  } catch (error) {
    console.error('Error fetching drive data:', error.message);
    return {
      props: { drive: null },
    };
  }
}

export default DrivePage;

================
File: pages/visible/organization/[id].js
================
// src/pages/organization/[id].js

import Link from 'next/link';
import axios from 'axios';
import { useRouter } from 'next/router';
import React from 'react';
import PropTypes from 'prop-types';
import Navbar from 'components/Navbars/AuthNavbar.js';
import Footer from 'components/Footers/Footer.js';
import Breadcrumbs from 'components/UI/Breadcrumbs';
import Image from 'next/image';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const OrganizationPage = ({ organization }) => {
  const router = useRouter();

  if (!organization) {
    return (
      <>
        {/* Use non-transparent Navbar for consistency */}
        <Navbar />
        <main className="min-h-screen flex items-center justify-center bg-secondary_green text-gray-800 relative">
          <p className="text-gray-600 text-lg">Organization not found.</p>
        </main>
        <Footer />
      </>
    );
  }

  return (
    <>
      {/* Use non-transparent Navbar to match the drive page */}
      <Navbar />
      <main className="min-h-screen bg-secondary_green text-gray-800 relative pt-24 pb-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Breadcrumb Navigation */}
          <Breadcrumbs
            links={[
              { href: '/', label: 'Home' },
              { href: '/visible/orglist', label: 'Organizations' },
              {
                href: `/organization/${organization.org_id}`,
                label: organization.name,
              },
            ]}
          />

          {/* Back Button */}
          <button
            onClick={() => router.back()}
            className="flex items-center mb-6 px-4 py-2 bg-ggreen text-white rounded-md hover:bg-ggreen-dark transition-colors focus:outline-none focus:ring-2 focus:ring-ggreen"
            aria-label="Go back to previous page"
          >
            <svg
              className="w-4 h-4 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 19l-7-7 7-7"
              />
            </svg>
            Back
          </button>

          {/* Organization Heading */}
          <h1 className="text-3xl font-semibold text-ggreen mb-4">
            {organization.name}
          </h1>

          {/* Organization Info Card */}
          <div className="bg-white shadow rounded-lg p-6 mb-10 flex flex-col md:flex-row">
            {/* Organization Image */}
            {organization.photo && (
              <div className="md:w-1/3 flex justify-center items-center mb-6 md:mb-0 md:mr-6">
                <Image
                  src={organization.photo || '/img/default-org.png'}
                  alt={organization.name}
                  width={256}
                  height={256}
                  className="object-cover rounded-lg"
                />
              </div>
            )}

            {/* Organization Details */}
            <div className="md:w-2/3">
              <p className="text-gray-600 mb-4">{organization.description}</p>
              {organization.location && (
                <p className="text-gray-600 mb-2">
                  <strong>Location:</strong> {organization.location}
                </p>
              )}
              {organization.founded && (
                <p className="text-gray-600">
                  <strong>Founded:</strong>{' '}
                  {new Date(organization.founded).toLocaleDateString()}
                </p>
              )}
            </div>
          </div>

          {/* Drives Section */}
          <div>
            <h2 className="text-2xl font-semibold text-ggreen mb-4">
              Drives from {organization.name}
            </h2>
            {organization.drives && organization.drives.length > 0 ? (
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {organization.drives.map((drive) => (
                  <Link
                    key={drive.drive_id}
                    href={`/visible/drive/${drive.drive_id}`}
                    className="border border-gray-200 bg-white p-4 rounded-lg shadow-sm hover:shadow-lg transition-shadow flex flex-col"
                  >
                      {/* Drive Image */}
                      {drive.photo && (
                        <div className="relative w-full h-48 mb-4">
                          <Image
                            src={drive.photo || '/img/default-drive.png'}
                            alt={drive.name}
                            layout="fill"
                            objectFit="cover"
                            className="rounded-md"
                          />
                        </div>
                      )}
                      {/* Drive Info */}
                      <h3 className="text-lg font-medium text-ggreen mb-2">
                        {drive.name}
                      </h3>
                      <p className="text-gray-600 text-sm">{drive.description}</p>
                  </Link>
                ))}
              </div>
            ) : (
              <p className="text-gray-600">
                No drives available for this organization.
              </p>
            )}
          </div>
        </div>
      </main>
      <Footer />
    </>
  );
};

OrganizationPage.propTypes = {
  organization: PropTypes.shape({
    org_id: PropTypes.number.isRequired,
    photo: PropTypes.string,
    name: PropTypes.string.isRequired,
    description: PropTypes.string,
    location: PropTypes.string,
    founded: PropTypes.string,
    drives: PropTypes.arrayOf(
      PropTypes.shape({
        drive_id: PropTypes.number.isRequired,
        photo: PropTypes.string,
        name: PropTypes.string.isRequired,
        description: PropTypes.string,
      })
    ),
  }),
};

export async function getServerSideProps(context) {
  const { id } = context.params;

  try {
    const response = await axios.get(`${apiUrl}/api/organizations/${id}`);
    const organization = response.data;

    return {
      props: {
        organization,
      },
    };
  } catch (error) {
    console.error('Error fetching organization data:', error);
    return {
      props: {
        organization: null,
      },
    };
  }
}

export default OrganizationPage;

================
File: pages/visible/about.js
================
// pages/about.js

import React from "react";
import Image from "next/image";

// components
import Navbar from "components/Navbars/AuthNavbar.js";
import Footer from "components/Footers/Footer.js";

export default function About() {
  return (
    <>
      <Navbar transparent />
      <main>
        {/* 1. Main Header Section */}
        <div className="relative pt-16 pb-32 flex content-center items-center justify-center min-h-[75vh]">
          {/* Background Image */}
          <div className="absolute top-0 w-full h-full">
            <Image
              src="https://giveagift-assets.nyc3.cdn.digitaloceanspaces.com/images/aboutpage-header.png"
              alt="About Us Background"
              layout="fill"
              objectFit="cover"
              quality={100}
              priority
            />
            <span
              id="blackOverlay"
              className="w-full h-full absolute opacity-75 bg-black"
            ></span>
          </div>

          {/* Content Container */}
          <div className="container relative mx-auto px-4">
            <div className="items-center flex flex-wrap">
              <div className="w-full lg:w-6/12 px-4 ml-auto mr-auto text-center">
                <div className="pr-0 lg:pr-12">
                  {/* Heading */}
                  <h1 className="text-white font-semibold text-4xl sm:text-5xl md:text-6xl">
                    About Gyftly
                  </h1>

                  {/* Paragraph */}
                  <p className="mt-4 text-lg sm:text-xl text-blueGray-200">
                    At Gyftly, we believe that everyone deserves a little joy,
                    especially during the holidays. Our platform bridges the gap
                    between organizations and generous supporters to help children
                    in need.
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Decorative SVG */}
          <div
            className="top-auto bottom-0 left-0 right-0 w-full absolute pointer-events-none overflow-hidden h-16"
            style={{ transform: "translateZ(0)" }}
          >
            <svg
              className="absolute bottom-0 overflow-hidden"
              xmlns="http://www.w3.org/2000/svg"
              preserveAspectRatio="none"
              version="1.1"
              viewBox="0 0 2560 100"
              x="0"
              y="0"
            >
              <polygon
                className="text-blueGray-200 fill-current"
                points="2560 0 2560 100 0 100"
              ></polygon>
            </svg>
          </div>
        </div>

        {/* 2. Our Mission Section */}
        <section className="pb-20 bg-blueGray-200 ">
          <div className="container mx-auto px-4">
            <div className="text-center mb-12">
              <h2 className="text-4xl font-semibold text-blueGray-700">
                Our Mission
              </h2>
              <p className="mt-4 text-lg text-blueGray-500">
                We aim to empower communities by providing a platform for
                effortless giving. Together, we can ensure every child feels
                loved and supported.
              </p>
            </div>

            <div className="flex flex-wrap">
              {/* Core Value 1 */}
              <div className="w-full md:w-4/12 px-4 text-center">
                <div className="relative flex flex-col min-w-0 break-words bg-white w-full mb-8 shadow-lg rounded-lg">
                  <div className="px-4 py-5 flex-auto">
                    <div className="text-white p-3 text-center inline-flex items-center justify-center w-12 h-12 mb-5 shadow-lg rounded-full bg-emerald-400">
                      <i className="fas fa-heart"></i>
                    </div>
                    <h6 className="text-xl font-semibold">Compassion</h6>
                    <p className="mt-2 mb-4 text-blueGray-500">
                      Putting love and care into every interaction.
                    </p>
                  </div>
                </div>
              </div>

              {/* Core Value 2 */}
              <div className="w-full md:w-4/12 px-4 text-center">
                <div className="relative flex flex-col min-w-0 break-words bg-white w-full mb-8 shadow-lg rounded-lg">
                  <div className="px-4 py-5 flex-auto">
                    <div className="text-white p-3 text-center inline-flex items-center justify-center w-12 h-12 mb-5 shadow-lg rounded-full bg-blue-400">
                      <i className="fas fa-hand-holding-heart"></i>
                    </div>
                    <h6 className="text-xl font-semibold">Generosity</h6>
                    <p className="mt-2 mb-4 text-blueGray-500">
                      Connecting kind hearts with meaningful causes.
                    </p>
                  </div>
                </div>
              </div>

              {/* Core Value 3 */}
              <div className="w-full md:w-4/12 px-4 text-center">
                <div className="relative flex flex-col min-w-0 break-words bg-white w-full mb-8 shadow-lg rounded-lg">
                  <div className="px-4 py-5 flex-auto">
                    <div className="text-white p-3 text-center inline-flex items-center justify-center w-12 h-12 mb-5 shadow-lg rounded-full bg-red-400">
                      <i className="fas fa-globe"></i>
                    </div>
                    <h6 className="text-xl font-semibold">Community</h6>
                    <p className="mt-2 mb-4 text-blueGray-500">
                      Strengthening bonds to build a brighter future.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* 3. Our Story Section */}
        <section className="py-20 bg-blueGray-800">
          <div className="container mx-auto px-4">
            <div className="text-center mb-12">
              <h2 className="text-4xl font-semibold text-white">Our Story</h2>
              <p className="text-lg leading-relaxed m-4 text-blueGray-200">
                Gyftly started with a simple idea: make giving accessible and
                impactful. Over the years, we&apos;ve grown into a community-driven
                platform dedicated to helping those in need.
              </p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div className="bg-blueGray-100 shadow-lg rounded-lg overflow-hidden">
                <Image
                  src="https://giveagift-assets.nyc3.cdn.digitaloceanspaces.com/images/aboutpage-story1.png"
                  alt="Our Beginnings"
                  layout="responsive"
                  width={400}
                  height={250}
                />
                <div className="px-4 py-5">
                  <h6 className="text-xl font-semibold text-blueGray-700">
                    Humble Beginnings
                  </h6>
                  <p className="mt-2 text-blueGray-500">
                    Our journey began with a small team passionate about making a
                    difference during the holidays.
                  </p>
                </div>
              </div>
              <div className="bg-blueGray-100 shadow-lg rounded-lg overflow-hidden">
                <Image
                  src="https://giveagift-assets.nyc3.cdn.digitaloceanspaces.com/images/aboutpage-story2.png"
                  alt="Our Vision"
                  layout="responsive"
                  width={400}
                  height={250}
                />
                <div className="px-4 py-5">
                  <h6 className="text-xl font-semibold text-blueGray-700">
                    Growing Together
                  </h6>
                  <p className="mt-2 text-blueGray-500">
                    With the support of our community, we&apos;ve expanded to
                    connect hundreds of organizations with compassionate donors.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </section>
      </main>
      <Footer />
    </>
  );
}

================
File: pages/visible/cancel.js
================
// pages/checkout/cancel.js
import Link from 'next/link';
import Navbar from 'components/Navbars/AuthNavbar';
import Footer from 'components/Footers/Footer';
import React from 'react';

const CancelPage = () => {
  return (
    <>
      <Navbar transparent />
      <main className="pt-20 min-h-[80vh] bg-gray-800">
        <div className="container mx-auto px-4 py-8 text-center text-white">
          <h2 className="text-3xl font-semibold mb-4">Payment Canceled</h2>
          <p className="mb-6">Your payment was canceled. You can continue shopping.</p>
          <div className='flex flex-col'>
          <Link href="/visible/cart" className="text-blue-400 hover:underline">
            Back to Cart
          </Link>
          <Link href="/visible/orglist" className="text-blue-400 hover:underline">
            Browse Organizations
          </Link>
          </div>
        </div>
      </main>
      <Footer />
    </>
  );
};

export default CancelPage;

================
File: pages/visible/cart.js
================
import React, { useContext, useEffect, useState } from 'react';
import { CartContext } from '../../contexts/CartContext';
import { AuthContext } from '../../contexts/AuthContext';
import Link from 'next/link';
import Navbar from 'components/Navbars/AuthNavbar';
import Footer from 'components/Footers/Footer';
import { loadStripe } from '@stripe/stripe-js';
import axios from 'axios';
import { toast } from 'react-toastify';
import { useRouter } from 'next/router';

// Initialize Stripe outside of component to avoid recreating on every render
const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY);

const CartPage = () => {
  const { cart, removeFromCart, updateCartItemQuantity, loading } = useContext(CartContext);
  const { user } = useContext(AuthContext);
  const [cartItems, setCartItems] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const router = useRouter();

  // Guest checkout modal state
  const [isGuestCheckout, setIsGuestCheckout] = useState(false);
  const [guestInfo, setGuestInfo] = useState({
    first_name: '',
    last_name: '',
    email: '',
    address: '',
    city: '',
    state: '',
    zip_code: '',
    phone_number: '',
  });

  useEffect(() => {
    if (cart && cart.items) {
      setCartItems(cart.items);
    } else {
      setCartItems([]);
    }
  }, [cart]);

  // Remove item handler
  const handleRemoveItem = async (cartItemId) => {
    try {
      await removeFromCart(cartItemId);
    } catch (error) {
      console.error('Error removing item:', error);
      toast.error('Failed to remove item. Please try again.');
    }
  };

  // Update quantity handler
  const handleUpdateQuantity = async (cartItemId, quantity) => {
    if (quantity < 1) {
      toast.warn('Quantity must be at least 1.');
      return;
    }
    try {
      await updateCartItemQuantity(cartItemId, quantity);
    } catch (error) {
      console.error('Error updating quantity:', error);
      toast.error('Failed to update quantity. Please try again.');
    }
  };

  // Proceed to checkout (authenticated)
  const handleProceedToCheckout = async () => {
    setIsProcessing(true);
    try {
      const response = await axios.post(
        `${process.env.NEXT_PUBLIC_API_URL}/api/checkout/create-checkout-session`,
        {},
        {
          headers: { 'Content-Type': 'application/json' },
          withCredentials: true,
        }
      );
      const { sessionId } = response.data;
      if (!sessionId) throw new Error('No session ID returned from the server.');

      const stripe = await stripePromise;
      const { error } = await stripe.redirectToCheckout({ sessionId });
      if (error) {
        console.error('Stripe Checkout error:', error);
        toast.error('An error occurred while redirecting to checkout.');
      }
    } catch (error) {
      console.error('Error proceeding to checkout:', error.response?.data || error.message);
      toast.error('Failed to initiate checkout. Please try again.');
    } finally {
      setIsProcessing(false);
    }
  };

  // Guest checkout submission
  const handleGuestCheckout = async (e) => {
    e.preventDefault();
    setIsProcessing(true);

    try {
      // Basic form validation
      if (
        !guestInfo.first_name ||
        !guestInfo.last_name ||
        !guestInfo.email ||
        !guestInfo.address ||
        !guestInfo.city ||
        !guestInfo.state ||
        !guestInfo.zip_code
      ) {
        toast.error('Please fill in all required fields.');
        setIsProcessing(false);
        return;
      }

      const response = await axios.post(
        `${process.env.NEXT_PUBLIC_API_URL}/api/checkout/guest`,
        { buyer_info: guestInfo },
        {
          headers: { 'Content-Type': 'application/json' },
          withCredentials: true,
        }
      );

      if (response.data.order_id) {
        toast.success('Order placed successfully!');
        router.push(`/visible/order-success?order_id=${response.data.order_id}`);
      } else {
        throw new Error('No order ID returned.');
      }
    } catch (error) {
      console.error('Error during guest checkout:', error.response?.data || error.message);
      toast.error(error.response?.data?.error || 'Failed to place order. Please try again.');
    } finally {
      setIsProcessing(false);
      setIsGuestCheckout(false);
    }
  };

  // Calculate total price
  const totalPrice = cartItems.reduce(
    (total, item) => total + (item.price || 0) * (item.quantity || 1),
    0
  );

  // Increment quantity
  const incrementQuantity = (item) => {
    if (item.quantity < item.maxAvailable) {
      handleUpdateQuantity(item.cart_item_id, item.quantity + 1);
    } else {
      toast.warn('You have reached the maximum available quantity for this item.');
    }
  };

  // Decrement quantity
  const decrementQuantity = (item) => {
    if (item.quantity === 1) {
      const confirmRemove = window.confirm('Do you want to remove this item from your cart?');
      if (confirmRemove) {
        handleRemoveItem(item.cart_item_id);
      }
    } else {
      handleUpdateQuantity(item.cart_item_id, item.quantity - 1);
    }
  };

  return (
    <>
      <Navbar transparent />
      <main className="pt-24 min-h-screen bg-secondary_green text-gray-800">
        <div className="container mx-auto px-4 py-8">
          {loading ? (
            <div className="flex justify-center items-center">
              <p>Loading your cart...</p>
            </div>
          ) : cartItems.length === 0 ? (
            <div className="flex flex-col items-center justify-center">
              <h2 className="text-3xl inter-semi-bold mb-4">Your Cart is Empty</h2>
              <Link href="/visible/orglist" className="text-ggreen hover:underline">
                Browse Organizations
              </Link>
            </div>
          ) : (
            <>
              <h2 className="text-3xl inter-semi-bold mb-6">Your Cart</h2>
              <div className="bg-white shadow-lg rounded-lg overflow-hidden">
                <table className="w-full">
                  <thead>
                    <tr className="text-left border-b">
                      <th className="px-6 py-4">Product</th>
                      <th className="px-6 py-4">Price</th>
                      <th className="px-6 py-4">Quantity</th>
                      <th className="px-6 py-4">Total</th>
                      <th className="px-6 py-4">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {cartItems.map((item) => (
                      <tr key={item.cart_item_id} className="border-b">
                        {/* Product Info */}
                        <td className="px-6 py-4 flex items-center">
                          {item.image_url ? (
                            <img
                              src={item.image_url}
                              alt={item.item_name}
                              className="w-16 h-16 object-cover mr-4 rounded"
                            />
                          ) : (
                            <div className="w-16 h-16 bg-gray-300 mr-4 rounded"></div>
                          )}
                          <div>
                            <div className="inter-semi-bold">{item.item_name}</div>
                            {(item.size || item.color) && (
                              <div className="text-sm text-gray-600">
                                {item.size && <span>Size: {item.size} </span>}
                                {item.color && <span>Color: {item.color}</span>}
                              </div>
                            )}
                            {item.child_id ? (
                              <div className="text-sm text-gray-600">
                                Child:&nbsp;
                                <Link href={`/visible/child/${item.child_id}`} className="text-ggreen hover:underline">
                                    {item.child_name || 'View Child'}
                                </Link>
                              </div>
                            ) : (
                              item.drive_id && (
                                <div className="text-sm text-gray-600 italic">
                                  Item-only drive
                                </div>
                              )
                            )}
                          </div>
                        </td>

                        {/* Price */}
                        <td className="px-6 py-4">${Number(item.price).toFixed(2)}</td>

                        {/* Quantity Controls */}
                        <td className="px-6 py-4">
                          <div className="flex items-center">
                            <button
                              onClick={() => decrementQuantity(item)}
                              className="px-2 py-1 border border-gray-300 rounded-lg text-gray-800"
                              aria-label={`Decrease quantity of ${item.item_name}`}
                            >
                              -
                            </button>
                            <span className="mx-2 w-8 text-center">{item.quantity}</span>
                            <button
                              onClick={() => incrementQuantity(item)}
                              className={`px-2 py-1 border border-gray-300 rounded-lg text-gray-800 ${
                                item.quantity >= item.maxAvailable ? 'bg-gray-200 cursor-not-allowed' : ''
                              }`}
                              disabled={item.quantity >= item.maxAvailable}
                              aria-label={`Increase quantity of ${item.item_name}`}
                            >
                              +
                            </button>
                          </div>
                        </td>

                        {/* Subtotal */}
                        <td className="px-6 py-4">
                          ${(Number(item.price) * Number(item.quantity)).toFixed(2)}
                        </td>

                        {/* Remove Button */}
                        <td className="px-6 py-4">
                          <button
                            onClick={() => handleRemoveItem(item.cart_item_id)}
                            className="text-red-500 hover:underline"
                            aria-label={`Remove ${item.item_name} from cart`}
                          >
                            Remove
                          </button>
                        </td>
                      </tr>
                    ))}
                    <tr>
                      <td colSpan="3" className="px-6 py-4 text-right inter-semi-bold">
                        Total:
                      </td>
                      <td className="px-6 py-4 inter-semi-bold">${totalPrice.toFixed(2)}</td>
                      <td></td>
                    </tr>
                  </tbody>
                </table>
              </div>
              {/* Checkout Buttons */}
              <div className="flex justify-end mt-6 space-x-4">
                {user ? (
                  <button
                    onClick={handleProceedToCheckout}
                    className={`bg-ggreen text-white inter-semi-bold px-6 py-3 rounded-full hover:shadow-lg transition-all duration-150 ${
                      isProcessing ? 'opacity-50 cursor-not-allowed' : ''
                    }`}
                    disabled={isProcessing}
                    aria-label="Proceed to Checkout"
                  >
                    {isProcessing ? 'Processing...' : 'Proceed to Checkout'}
                  </button>
                ) : (
                  <button
                    onClick={() => setIsGuestCheckout(true)}
                    className={`bg-ggreen text-white inter-semi-bold px-6 py-3 rounded-full hover:shadow-lg transition-all duration-150 ${
                      isProcessing ? 'opacity-50 cursor-not-allowed' : ''
                    }`}
                    disabled={isProcessing}
                    aria-label="Checkout as Guest"
                  >
                    Checkout as Guest
                  </button>
                )}
              </div>
            </>
          )}
        </div>

        {/* Guest Checkout Modal */}
        {isGuestCheckout && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-lg w-11/12 md:w-1/2 lg:w-1/3 p-6">
              <h2 className="text-2xl inter-semi-bold mb-4">Guest Checkout</h2>
              <form onSubmit={handleGuestCheckout} className="space-y-4">
                <div>
                  <label htmlFor="first_name" className="block text-gray-800">
                    First Name<span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    id="first_name"
                    name="first_name"
                    value={guestInfo.first_name}
                    onChange={(e) =>
                      setGuestInfo({ ...guestInfo, first_name: e.target.value })
                    }
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded text-gray-800 focus:outline-none focus:ring transition-all duration-150"
                  />
                </div>
                <div>
                  <label htmlFor="last_name" className="block text-gray-800">
                    Last Name<span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    id="last_name"
                    name="last_name"
                    value={guestInfo.last_name}
                    onChange={(e) =>
                      setGuestInfo({ ...guestInfo, last_name: e.target.value })
                    }
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded text-gray-800 focus:outline-none focus:ring transition-all duration-150"
                  />
                </div>
                <div>
                  <label htmlFor="email" className="block text-gray-800">
                    Email<span className="text-red-500">*</span>
                  </label>
                  <input
                    type="email"
                    id="email"
                    name="email"
                    value={guestInfo.email}
                    onChange={(e) =>
                      setGuestInfo({ ...guestInfo, email: e.target.value })
                    }
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded text-gray-800 focus:outline-none focus:ring transition-all duration-150"
                  />
                </div>
                <div>
                  <label htmlFor="address" className="block text-gray-800">
                    Address<span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    id="address"
                    name="address"
                    value={guestInfo.address}
                    onChange={(e) =>
                      setGuestInfo({ ...guestInfo, address: e.target.value })
                    }
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded text-gray-800 focus:outline-none focus:ring transition-all duration-150"
                  />
                </div>
                <div className="flex space-x-4">
                  <div className="w-1/2">
                    <label htmlFor="city" className="block text-gray-800">
                      City<span className="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      id="city"
                      name="city"
                      value={guestInfo.city}
                      onChange={(e) =>
                        setGuestInfo({ ...guestInfo, city: e.target.value })
                      }
                      required
                      className="w-full px-3 py-2 border border-gray-300 rounded text-gray-800 focus:outline-none focus:ring transition-all duration-150"
                    />
                  </div>
                  <div className="w-1/2">
                    <label htmlFor="state" className="block text-gray-800">
                      State<span className="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      id="state"
                      name="state"
                      value={guestInfo.state}
                      onChange={(e) =>
                        setGuestInfo({ ...guestInfo, state: e.target.value })
                      }
                      required
                      className="w-full px-3 py-2 border border-gray-300 rounded text-gray-800 focus:outline-none focus:ring transition-all duration-150"
                    />
                  </div>
                </div>
                <div>
                  <label htmlFor="zip_code" className="block text-gray-800">
                    ZIP Code<span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    id="zip_code"
                    name="zip_code"
                    value={guestInfo.zip_code}
                    onChange={(e) =>
                      setGuestInfo({ ...guestInfo, zip_code: e.target.value })
                    }
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded text-gray-800 focus:outline-none focus:ring transition-all duration-150"
                  />
                </div>
                <div>
                  <label htmlFor="phone_number" className="block text-gray-800">
                    Phone Number
                  </label>
                  <input
                    type="tel"
                    id="phone_number"
                    name="phone_number"
                    value={guestInfo.phone_number}
                    onChange={(e) =>
                      setGuestInfo({ ...guestInfo, phone_number: e.target.value })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded text-gray-800 focus:outline-none focus:ring transition-all duration-150"
                  />
                </div>
                <div className="flex justify-end space-x-4">
                  <button
                    type="button"
                    onClick={() => setIsGuestCheckout(false)}
                    className="px-4 py-2 bg-gray-800 text-white rounded-full hover:bg-gray-700 transition-colors"
                    aria-label="Cancel Guest Checkout"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className={`px-4 py-2 bg-ggreen text-white rounded-full hover:shadow-lg transition-colors ${
                      isProcessing ? 'opacity-50 cursor-not-allowed' : ''
                    }`}
                    disabled={isProcessing}
                    aria-label="Submit Guest Checkout"
                  >
                    {isProcessing ? 'Processing...' : 'Submit'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </main>
      <Footer />
    </>
  );
};

export default CartPage;

================
File: pages/visible/drivelist.js
================
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Navbar from 'components/Navbars/AuthNavbar.js';
import Footer from 'components/Footers/Footer.js';
import DriveListCard from 'components/Cards/DriveListCard';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export default function DriveList() {
  const [drives, setDrives] = useState([]);
  const [searchInput, setSearchInput] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Fetch drives with search and pagination
  const fetchDrives = async (currentPage, reset = false) => {
    setLoading(true);
    setError(null);
    try {
      const params = {
        page: currentPage,
        limit: 6,
      };

      if (searchQuery) {
        params.search = searchQuery;
      }

      const response = await axios.get(`${apiUrl}/api/drives`, { params });

      if (response.data && response.data.length > 0) {
        setDrives((prev) => (reset ? response.data : [...prev, ...response.data]));
        if (response.data.length < 6) {
          setHasMore(false);
        }
      } else {
        setHasMore(false);
      }
    } catch (err) {
      console.error('Error fetching drives:', err);
      setError('Failed to load drives. Please try again later.');
      setHasMore(false);
    }
    setLoading(false);
  };

  // Refetch when search query changes
  useEffect(() => {
    setDrives([]);
    setPage(1);
    setHasMore(true);
    fetchDrives(1, true);
  }, [searchQuery]);

  // Fetch next page when page changes
  useEffect(() => {
    if (page === 1) return;
    fetchDrives(page, false);
  }, [page]);

  // Debounce search input updates
  useEffect(() => {
    const delayDebounceFn = setTimeout(() => {
      const trimmedInput = searchInput.trim();
      setSearchQuery(trimmedInput);
    }, 500);

    return () => clearTimeout(delayDebounceFn);
  }, [searchInput]);

  const loadMore = () => {
    if (hasMore && !loading) {
      setPage((prev) => prev + 1);
    }
  };

  return (
    <>
      <Navbar transparent />
      <main className="min-h-screen bg-secondary_green text-gray-800 relative">
        {/* Search Section */}
        <section className="relative px-4 py-12 sm:py-20 bg-background">
          <div className="container mx-auto">
            <h2 className="inter-regular text-ggreen text-3xl sm:text-4xl text-center mb-6 pt-12">
              Find a Drive to Support
            </h2>
            <form
              className="w-full max-w-4xl mx-auto mb-6"
              onSubmit={(e) => {
                e.preventDefault();
                setSearchQuery(searchInput.trim());
              }}
            >
              <div className="relative">
                <span className="absolute inset-y-0 left-0 pl-3 flex items-center">
                  <svg
                    className="h-5 w-5 text-gray-400"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    aria-hidden="true"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                    />
                  </svg>
                </span>
                <input
                  type="text"
                  placeholder="Search for drives..."
                  value={searchInput}
                  onChange={(e) => setSearchInput(e.target.value)}
                  className="block w-full pl-10 pr-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ggreen focus:border-transparent"
                  aria-label="Search for drives"
                />
              </div>
            </form>
          </div>
        </section>

        {/* Error Message */}
        {error && (
          <section className="py-4 bg-red-100">
            <div className="container mx-auto px-4">
              <p className="text-center text-red-600">{error}</p>
            </div>
          </section>
        )}

        {/* Drives Section */}
        <section id="drives" className="relative py-20 bg-white">
          <div className="container mx-auto px-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 items-stretch">
              {drives.length > 0 ? (
                drives.map((drive) => (
                  <DriveListCard key={drive.drive_id} drive={drive} />
                ))
              ) : (
                <p className="text-center text-gray-600 col-span-full">No drives found.</p>
              )}
            </div>
            {hasMore && (
              <div className="flex justify-center mt-8">
                <button
                  onClick={loadMore}
                  disabled={loading}
                  className={`bg-white text-ggreen border-2 border-solid border-ggreen active:bg-ggreen-dark text-sm inter-bold uppercase px-6 py-3 rounded-full shadow hover:shadow-lg outline-none focus:outline-none ${
                    loading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'
                  } transition-all duration-150`}
                >
                  {loading ? 'Loading...' : 'Load More'}
                </button>
              </div>
            )}
            {!hasMore && drives.length > 0 && (
              <p className="text-center text-gray-600 mt-4">No more drives to display.</p>
            )}
          </div>
        </section>
      </main>
      <Footer />
    </>
  );
}

================
File: pages/visible/orglist.js
================
// src/pages/visible/orglist.js

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Navbar from 'components/Navbars/AuthNavbar.js';
import Footer from 'components/Footers/Footer.js';
import OrganizationCard from 'components/Cards/OrganizationCard';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export default function OrgList() {
  const [organizations, setOrganizations] = useState([]);
  const [searchInput, setSearchInput] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedState, setSelectedState] = useState('All');
  const [selectedCity, setSelectedCity] = useState('All');
  const [featuredOnly, setFeaturedOnly] = useState(true);
  const [states, setStates] = useState([]);
  const [cities, setCities] = useState([]);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Fetch filter options (states and cities)
  useEffect(() => {
    const fetchFilterOptions = async () => {
      try {
        const statesResponse = await axios.get(`${apiUrl}/api/organizations/states`);
        setStates(statesResponse.data);

        const citiesResponse = await axios.get(`${apiUrl}/api/organizations/cities`);
        setCities(citiesResponse.data);
      } catch (error) {
        console.error('Error fetching filter options:', error);
        setError('Failed to load filter options. Please try again later.');
        setStates(['California', 'Texas', 'New York']);
        setCities(['Los Angeles', 'Houston', 'New York City']);
      }
    };

    fetchFilterOptions();
  }, []);

  // Handle search form submission
  const handleSearch = (e) => {
    e.preventDefault();
    setSearchQuery(searchInput.trim());
    setFeaturedOnly(searchInput.trim() === '' ? true : false);
  };

  // Debounce search input updates
  useEffect(() => {
    const delayDebounceFn = setTimeout(() => {
      const trimmedInput = searchInput.trim();
      setSearchQuery(trimmedInput);
      if (trimmedInput !== '') {
        setFeaturedOnly(false);
      } else {
        setFeaturedOnly(true);
      }
    }, 500);

    return () => clearTimeout(delayDebounceFn);
  }, [searchInput]);

  // Fetch organizations with filtering and pagination
  const fetchOrganizations = async (currentPage, reset = false) => {
    setLoading(true);
    setError(null);
    try {
      const params = {
        page: currentPage,
        limit: 6,
        featured: featuredOnly.toString(),
      };

      if (searchQuery !== '') {
        params.search = searchQuery;
      }

      if (selectedState !== 'All') {
        params.state = selectedState;
      }

      if (selectedCity !== 'All') {
        params.city = selectedCity;
      }

      const response = await axios.get(`${apiUrl}/api/organizations/featured`, { params });

      if (response.data && response.data.length > 0) {
        setOrganizations((prev) => (reset ? response.data : [...prev, ...response.data]));
        if (response.data.length < 6) {
          setHasMore(false);
        }
      } else {
        setHasMore(false);
      }
    } catch (error) {
      console.error('Error fetching organizations:', error);
      setError('Failed to load organizations. Please try again later.');
      setHasMore(false);
    }
    setLoading(false);
  };

  // Refetch when filters/search change
  useEffect(() => {
    setOrganizations([]);
    setPage(1);
    setHasMore(true);
    fetchOrganizations(1, true);
  }, [featuredOnly, selectedState, selectedCity, searchQuery]);

  // Pagination: fetch more organizations when page changes
  useEffect(() => {
    if (page === 1) return;
    fetchOrganizations(page, false);
  }, [page]);

  const loadMore = () => {
    if (hasMore && !loading) {
      setPage((prev) => prev + 1);
    }
  };

  // Update cities based on selected state
  useEffect(() => {
    const fetchCitiesByState = async () => {
      if (selectedState === 'All') {
        try {
          const citiesResponse = await axios.get(`${apiUrl}/api/organizations/cities`);
          setCities(citiesResponse.data);
        } catch (error) {
          console.error('Error fetching cities:', error);
          setCities(['Los Angeles', 'Houston', 'New York City']);
        }
      } else {
        try {
          const citiesResponse = await axios.get(`${apiUrl}/api/organizations/cities`, {
            params: { state: selectedState },
          });
          setCities(citiesResponse.data);
        } catch (error) {
          console.error('Error fetching cities:', error);
          setCities(['Los Angeles', 'San Francisco', 'New York City']);
        }
      }
      setSelectedCity('All');
    };

    fetchCitiesByState();
  }, [selectedState]);

  return (
    <>
      <Navbar transparent />
      <main className="min-h-screen bg-secondary_green text-gray-800 relative">
        {/* Search and Filter Bar Section */}
        <section className="relative px-4 py-12 sm:py-20 bg-background ">
          <div className="container mx-auto">
            <h2 className="inter-regular text-ggreen text-3xl sm:text-4xl text-center mb-6 pt-12">
              Find the Perfect Organization for Your Cause
            </h2>
            <form onSubmit={handleSearch} className="w-full max-w-4xl mx-auto">
              {/* Search Bar */}
              <div className="mb-6">
                <div className="relative">
                  <span className="absolute inset-y-0 left-0 pl-3 flex items-center">
                    <svg
                      className="h-5 w-5 text-gray-400"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      aria-hidden="true"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                      />
                    </svg>
                  </span>
                  <input
                    type="text"
                    placeholder="Search for organizations..."
                    value={searchInput}
                    onChange={(e) => setSearchInput(e.target.value)}
                    className="block w-full pl-10 pr-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-ggreen focus:border-transparent"
                    aria-label="Search for organizations"
                  />
                </div>
              </div>
              {/* Filter Menu */}
              <div className="flex flex-col space-y-4 md:space-y-0 md:flex-row md:space-x-4">
                {/* State Filter */}
                <div className="flex-1">
                  <label htmlFor="state" className="sr-only">
                    State
                  </label>
                  <select
                    id="state"
                    name="state"
                    value={selectedState}
                    onChange={(e) => setSelectedState(e.target.value)}
                    className="block w-full pl-3 pr-10 py-3 border border-gray-300 bg-white rounded-md focus:outline-none focus:ring-2 focus:ring-ggreen focus:border-transparent sm:text-sm"
                    aria-label="Filter by state"
                  >
                    <option value="All">All States</option>
                    {states.map((state) => (
                      <option key={state} value={state}>
                        {state}
                      </option>
                    ))}
                  </select>
                </div>
                {/* City Filter */}
                <div className="flex-1">
                  <label htmlFor="city" className="sr-only">
                    City
                  </label>
                  <select
                    id="city"
                    name="city"
                    value={selectedCity}
                    onChange={(e) => setSelectedCity(e.target.value)}
                    className="block w-full pl-3 pr-10 py-3 border border-gray-300 bg-white rounded-md focus:outline-none focus:ring-2 focus:ring-ggreen focus:border-transparent sm:text-sm"
                    aria-label="Filter by city"
                  >
                    <option value="All">All Cities</option>
                    {cities.map((city) => (
                      <option key={city} value={city}>
                        {city}
                      </option>
                    ))}
                  </select>
                </div>
                {/* Featured Filter */}
                <div className="flex items-center">
                  <input
                    id="featured"
                    type="checkbox"
                    checked={featuredOnly}
                    onChange={(e) => setFeaturedOnly(e.target.checked)}
                    className="h-4 w-4 text-ggreen focus:ring-ggreen border-gray-300 rounded"
                    aria-label="Filter by featured organizations"
                  />
                  <label htmlFor="featured" className="ml-2 block text-sm text-gray-800">
                    Featured Only
                  </label>
                </div>
                {/* Search Button */}
                <div className="flex items-center">
                  <button
                    type="submit"
                    className="ml-2 bg-ggreen text-white px-4 py-2 rounded-md hover:bg-ggreen-dark focus:outline-none focus:ring-2 focus:ring-ggreen"
                  >
                    Search
                  </button>
                </div>
              </div>
            </form>
          </div>
        </section>

        {/* Error Message */}
        {error && (
          <section className="py-4 bg-red-100">
            <div className="container mx-auto px-4">
              <p className="text-center text-red-600">{error}</p>
            </div>
          </section>
        )}

        {/* Organizations Section */}
        <section id="organizations" className="relative py-20 bg-white">
          <div className="container mx-auto px-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 items-stretch">
              {organizations.length > 0 ? (
                organizations.map((org) => (
                  <OrganizationCard key={org.org_id} org={org} />
                ))
              ) : (
                <p className="text-center text-gray-600 col-span-full">No organizations found.</p>
              )}
            </div>
            {hasMore && (
              <div className="flex justify-center mt-8">
                <button
                  onClick={loadMore}
                  disabled={loading}
                  className={`bg-white text-ggreen border-2 border-solid border-ggreen active:bg-ggreen-dark text-sm inter-bold uppercase px-6 py-3 rounded-full shadow hover:shadow-lg outline-none focus:outline-none ${
                    loading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'
                  } transition-all duration-150`}
                >
                  {loading ? 'Loading...' : 'Load More'}
                </button>
              </div>
            )}
            {!hasMore && organizations.length > 0 && (
              <p className="text-center text-gray-600 mt-4">No more organizations to display.</p>
            )}
          </div>
        </section>
      </main>
      <Footer />
    </>
  );
}

================
File: pages/visible/profile.js
================
import React, { useState, useEffect, useContext } from 'react';
import axios from 'axios';
import { AuthContext } from '../../contexts/AuthContext';
import { useRouter } from 'next/router';
import Navbar from '../../components/Navbars/AuthNavbar';
import Footer from '../../components/Footers/Footer';

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

const AccountPage = () => {
  const [orders, setOrders] = useState([]);
  const [error, setError] = useState(null);
  const router = useRouter();
  const { user, loading } = useContext(AuthContext);

  useEffect(() => {
    const fetchAccountData = async () => {
      try {
        if (!user || !user.account_id) {
          setError('User not authenticated.');
          return;
        }
        // Fetch user's orders
        const ordersResponse = await axios.get(`${apiUrl}/api/orders`, { withCredentials: true });
        setOrders(ordersResponse.data || []);
      } catch (err) {
        console.error('Error fetching account data:', err);
        setError('Failed to load account information.');
      }
    };

    if (!loading) {
      fetchAccountData();
    }
  }, [user, loading]);

  if (loading) {
    return (
      <>
        <Navbar transparent />
        <main className="min-h-screen bg-secondary_green text-gray-800">
          <div className="container mx-auto px-4 py-20">
            <p className="text-center text-xl">Loading...</p>
          </div>
        </main>
        <Footer />
      </>
    );
  }

  if (error) {
    return (
      <>
        <Navbar transparent />
        <main className="min-h-screen bg-secondary_green text-gray-800">
          <div className="container mx-auto px-4 py-20">
            <p className="text-center text-red-500 text-xl">{error}</p>
          </div>
        </main>
        <Footer />
      </>
    );
  }

  if (!user) {
    if (typeof window !== 'undefined') {
      router.push('/auth/login');
    }
    return null;
  }

  return (
    <>
      <Navbar transparent />
      <main className="min-h-screen bg-secondary_green text-gray-800 pt-24">
        <section className="py-16">
          <div className="container mx-auto px-4">
            <div className="bg-white shadow-xl rounded-lg p-6">
              <div className="flex flex-col items-center">
                <h3 className="text-4xl font-semibold mb-2 text-gray-800">
                  {user.username}
                </h3>
                <div className="text-sm mb-2 text-gray-600 font-bold uppercase">
                  <i className="fas fa-envelope mr-2 text-lg text-gray-600"></i>
                  {user.email}
                </div>
                <div className="flex flex-wrap justify-center mt-4">
                  <button
                    className="bg-ggreen text-white text-sm font-bold uppercase px-6 py-3 rounded-full shadow hover:shadow-lg transition-all duration-150 mr-2 mb-2"
                    type="button"
                    onClick={() => router.push('/account/update-profile')}
                  >
                    Update Profile
                  </button>
                  <button
                    className="bg-ggreen text-white text-sm font-bold uppercase px-6 py-3 rounded-full shadow hover:shadow-lg transition-all duration-150 mr-2 mb-2"
                    type="button"
                    onClick={() => router.push('/account/change-password')}
                  >
                    Change Password
                  </button>
                </div>
              </div>

              <div className="mt-10 py-10 border-t border-gray-200">
                <h2 className="text-2xl font-semibold text-gray-800 mb-4">Your Order History</h2>
                {orders.length > 0 ? (
                  <div className="overflow-x-auto">
                    <table className="min-w-full bg-white">
                      <thead>
                        <tr>
                          <th className="py-2 px-4 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                            Order ID
                          </th>
                          <th className="py-2 px-4 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                            Date
                          </th>
                          <th className="py-2 px-4 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                            Total Amount
                          </th>
                          <th className="py-2 px-4 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                            Items
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {orders.map(order => (
                          <tr key={order.order_id} className="border-b">
                            <td className="py-2 px-4 text-sm text-gray-800">
                              #{order.order_id}
                            </td>
                            <td className="py-2 px-4 text-sm text-gray-800">
                              {new Date(order.order_date).toLocaleDateString()}
                            </td>
                            <td className="py-2 px-4 text-sm text-gray-800">
                              ${Number(order.total_amount).toFixed(2)}
                            </td>
                            <td className="py-2 px-4 text-sm text-gray-800">
                              <ul className="list-disc list-inside">
                                {order.items.map(item => (
                                  <li key={item.order_item_id}>
                                    {item.item_name} {item.size && `(${item.size}`}{item.size && item.color && `, ${item.color})`} - Qty: {item.quantity}
                                  </li>
                                ))}
                              </ul>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <p className="text-gray-600">You have no orders yet.</p>
                )}
              </div>
            </div>
          </div>
        </section>
      </main>
      <Footer />
    </>
  );
};

export default AccountPage;

================
File: pages/visible/registerdrive.js
================
import React, { useState, useContext, useEffect } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import Auth from 'layouts/Auth.js';
import { AuthContext } from 'contexts/AuthContext';

const NewDriveWizard = () => {
  const router = useRouter();
  const { user, loading } = useContext(AuthContext);

  // Redirect if the user is not logged in or not an org admin
  useEffect(() => {
    if (!loading) {
      if (!user) {
        router.push('/auth/login');
      } else if (!user.is_org_admin) {
        router.push('/visible/registerorg');
      }
    }
  }, [user, loading, router]);

  // State for drive data
  const [driveData, setDriveData] = useState({
    startDate: '',
    endDate: '',
    driveTitle: '',
    driveDescription: '',
    drivePhoto: null,
  });

  // Track current step (3 steps)
  const [currentStep, setCurrentStep] = useState(1);
  const totalSteps = 3;

  const handleChange = (e) => {
    const { name, value, type, checked, files } = e.target;
    if (type === 'file') {
      setDriveData((prev) => ({
        ...prev,
        [name]: files[0],
      }));
    } else {
      setDriveData((prev) => ({
        ...prev,
        [name]: type === 'checkbox' ? checked : value,
      }));
    }
  };

  const handleSubmit = async () => {
    // Create a FormData instance to include the file
    const formData = new FormData();
    formData.append('name', driveData.driveTitle);
    formData.append('description', driveData.driveDescription);
    formData.append('start_date', driveData.startDate);
    formData.append('end_date', driveData.endDate);
    formData.append('photo', driveData.drivePhoto);

    try {
      await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/api/drives`, formData, {
        withCredentials: true,
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      router.push('../admin/currentDrives');
    } catch (err) {
      console.error('Error creating new drive:', err);
      alert('Failed to create drive. Please check your input and try again.');
    }
  };

  // Navigation handlers
  const nextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep((prev) => prev + 1);
    } else {
      handleSubmit();
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep((prev) => prev - 1);
    }
  };

  // Validate current step's fields
  let isStepValid = false;
  if (currentStep === 1) {
    isStepValid = driveData.driveTitle.trim() !== '' && driveData.driveDescription.trim() !== '';
  } else if (currentStep === 2) {
    isStepValid = driveData.startDate.trim() !== '' && driveData.endDate.trim() !== '';
  } else if (currentStep === 3) {
    isStepValid = driveData.drivePhoto !== null;
  }

  // Render fields based on the current step
  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-4">
            <h2 className="text-2xl font-bold mb-4">First, Let&apos;s Set Up Your Drive</h2>
            <h3 className="text-lg font-semibold">Drive Title</h3>
            <input
              type="text"
              name="driveTitle"
              value={driveData.driveTitle}
              onChange={handleChange}
              placeholder="e.g. Food Drive 2025"
              required
              className="border px-3 py-2 w-full rounded"
            />
            <h3 className="text-lg font-semibold">Drive Description</h3>
            <textarea
              name="driveDescription"
              value={driveData.driveDescription}
              onChange={handleChange}
              placeholder="Describe your drive..."
              required
              className="border px-3 py-2 w-full rounded"
            />
          </div>
        );
      case 2:
        return (
          <div className="space-y-8">
            <h2 className="text-2xl font-bold mb-4">Set the Dates for Your Drive</h2>
            <div className="flex space-x-4">
              <div className="w-1/2">
                <h3 className="text-lg font-semibold">Start Date</h3>
                <input
                  type="date"
                  name="startDate"
                  value={driveData.startDate}
                  onChange={handleChange}
                  required
                  className="border px-3 py-2 w-full rounded"
                />
              </div>
              <div className="w-1/2">
                <h3 className="text-lg font-semibold">End Date</h3>
                <input
                  type="date"
                  name="endDate"
                  value={driveData.endDate}
                  onChange={handleChange}
                  required
                  className="border px-3 py-2 w-full rounded"
                />
              </div>
            </div>
          </div>
        );
      case 3:
        return (
          <div className="space-y-4">
            <label className="block text-lg font-semibold">Pick a Photo For Your Drive</label>
            <div className="mb-4 border-2 border-dashed border-gray-300 p-4 rounded text-center">
              <p>No image selected. Please upload your drive&apos;s photo.</p>
            </div>
            <input
              type="file"
              name="drivePhoto"
              onChange={handleChange}
              accept="image/*"
              required
              className="hidden"
              id="drivePhotoInput"
            />
            <label
              htmlFor="drivePhotoInput"
              className="cursor-pointer inline-block bg-ggreen text-white px-6 py-2 rounded-full hover:bg-teal-800"
            >
              Choose Photo
            </label>
          </div>
        );
      default:
        return null;
    }
  };

  // Calculate progress percentage
  const progressPercentage = (currentStep / totalSteps) * 100;

  return (
    <div className="container mx-auto px-4 min-h-screen flex flex-col pt-40 pb-64">
      {/* Main Content */}
      <div className="flex-1">
        {renderStep()}
      </div>

      {/* Footer / Navigation Buttons */}
      <div className="mt-12 flex">
        <div className="w-full mr-8">
          <div className="w-full bg-gray-200 rounded-full">
            <div
              style={{ width: `${Math.round(progressPercentage)}%` }}
              className="bg-ggreen text-xs font-medium text-blue-100 text-center p-1 leading-none rounded-full"
            />
          </div>
          <p className="text-center mt-2">
            Step {currentStep} of {totalSteps}
          </p>
        </div>

        <div className="flex justify-between">
          {currentStep > 1 && (
            <button
              onClick={prevStep}
              className="border-2 border-ggreen text-ggreen px-12 py-3 mr-4 rounded-full hover:bg-ggreen hover:text-white"
            >
              Back
            </button>
          )}
          <button
            onClick={nextStep}
            disabled={!isStepValid}
            className={`border-2 border-ggreen bg-ggreen text-white px-12 py-3 rounded-full hover:bg-teal-800 ${
              !isStepValid ? 'opacity-50 cursor-not-allowed' : ''
            }`}
          >
            {currentStep === totalSteps ? 'Create Drive' : 'Next'}
          </button>
        </div>
      </div>
    </div>
  );
};

NewDriveWizard.layout = Auth;
export default NewDriveWizard;

================
File: pages/visible/registerorg.js
================
// pages/register-org.js

import React, { useState, useContext, useEffect } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import Auth from 'layouts/Auth.js';
import { AuthContext } from 'contexts/AuthContext';

const RegisterOrganization = () => {
  const router = useRouter();
  const { user, loading } = useContext(AuthContext);

  // If not loading and no user, force login
  useEffect(() => {
    if (!loading) {
      if (!user) {
        router.push('/auth/login');
      } else if (user && user.is_org_admin) {
        router.push('/visible/registerdrive');
      }
    }
  }, [user, loading, router]);

  // State to hold form data and image preview URL
  const [orgData, setOrgData] = useState({
    orgName: '',
    orgWebsite: '',
    orgDescription: '',
    streetAddress: '',
    city: '',
    state: '',
    zipCode: '',
    orgPhoto: null,
  });
  const [previewUrl, setPreviewUrl] = useState(null);

  // Track the current step of the wizard
  const [currentStep, setCurrentStep] = useState(1);
  const totalSteps = 3;

  // Update form state on input change
  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'orgPhoto') {
      const file = files[0];
      setOrgData((prev) => ({
        ...prev,
        orgPhoto: file,
      }));
      setPreviewUrl(URL.createObjectURL(file));
    } else {
      setOrgData((prev) => ({
        ...prev,
        [name]: value,
      }));
    }
  };

  // Submit the form when finished
  const handleSubmit = async () => {
    const formData = new FormData();
    formData.append('name', orgData.orgName);
    formData.append('description', orgData.orgDescription);
    formData.append('address', orgData.streetAddress);
    formData.append('city', orgData.city);
    formData.append('state', orgData.state);
    formData.append('zip_code', orgData.zipCode);
    formData.append('website_link', orgData.orgWebsite);
    formData.append('photo', orgData.orgPhoto);

    try {
      await axios.post(
        `${process.env.NEXT_PUBLIC_API_URL}/api/organizations/register`,
        formData,
        { withCredentials: true, headers: { 'Content-Type': 'multipart/form-data' } }
      );
      router.push('/registerdrive');
    } catch (err) {
      console.error('Error registering organization:', err);
      alert('Failed to register organization. Please check your input and try again.');
    }
  };

  // Navigate to next step or submit if on final step
  const nextStep = () => {
    // Validate required fields for current step
    if (currentStep === 1) {
      if (!orgData.orgName || !orgData.orgWebsite || !orgData.orgDescription) {
        alert('Please fill in all required fields.');
        return;
      }
    } else if (currentStep === 2) {
      if (!orgData.streetAddress || !orgData.city || !orgData.state || !orgData.zipCode) {
        alert('Please fill in all required fields.');
        return;
      }
    } else if (currentStep === 3) {
      if (!orgData.orgPhoto) {
        alert('Please upload a photo of your organization.');
        return;
      }
    }

    if (currentStep < totalSteps) {
      setCurrentStep((prev) => prev + 1);
    } else {
      handleSubmit();
    }
  };

  // Navigate back to previous step
  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep((prev) => prev - 1);
    }
  };

  // Render fields based on the current step
  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-4">
            <h2 className="text-2xl font-bold mb-4">First, Let&apos;s Set Up Your Organization</h2>
            <h3 className="text-lg font-semibold">Organization Name</h3>
            <input
              type="text"
              name="orgName"
              value={orgData.orgName}
              onChange={handleChange}
              placeholder="e.g. Salvation Army"
              required
              className="border px-3 py-2 w-full rounded"
            />
            <h3 className="text-lg font-semibold">Organization Website</h3>
            <input
              type="text"
              name="orgWebsite"
              value={orgData.orgWebsite}
              onChange={handleChange}
              placeholder="e.g. salvationarmyusa.org"
              required
              className="border px-3 py-2 w-full rounded"
            />
            <h3 className="text-lg font-semibold">Description</h3>
            <textarea
              name="orgDescription"
              value={orgData.orgDescription}
              onChange={handleChange}
              placeholder="Donate today to help a neighbor in need find comprehensive aid through The Salvation Army's support programs."
              required
              className="border px-3 py-2 w-full rounded"
            />
          </div>
        );
      case 2:
        return (
          <div className="space-y-8">
            <h2 className="text-2xl font-bold mb-4">Where should we send donations?</h2>
            <input
              type="text"
              name="streetAddress"
              value={orgData.streetAddress}
              onChange={handleChange}
              placeholder="Street Address"
              required
              className="border px-3 py-2 w-full rounded"
            />
            <div className="flex space-x-4">
              <input
                type="text"
                name="city"
                value={orgData.city}
                onChange={handleChange}
                placeholder="City"
                required
                className="border px-3 py-2 w-full rounded"
              />
              <input
                type="text"
                name="state"
                value={orgData.state}
                onChange={handleChange}
                placeholder="State"
                required
                className="border px-3 py-2 w-full rounded"
              />
            </div>
            <input
              type="text"
              name="zipCode"
              value={orgData.zipCode}
              onChange={handleChange}
              placeholder="Zip Code"
              required
              className="border px-3 py-2 w-full rounded"
            />
          </div>
        );
      case 3:
        return (
          <div className="space-y-4">
            <label className="block text-lg font-semibold">Pick a Photo For Your Organization</label>
            {previewUrl ? (
              <div className="mb-4">
                <img
                  src={previewUrl}
                  alt="Preview"
                  className="max-w-full h-auto rounded shadow-md"
                />
              </div>
            ) : (
              <div className="mb-4 border-2 border-dashed border-gray-300 p-4 rounded text-center">
                <p>No image selected. Please upload your organization&apos;s photo.</p>
              </div>
            )}
            <input
              type="file"
              name="orgPhoto"
              onChange={handleChange}
              accept="image/*"
              required
              className="hidden"
              id="orgPhotoInput"
            />
            <label
              htmlFor="orgPhotoInput"
              className="cursor-pointer inline-block bg-ggreen text-white px-6 py-2 rounded-full hover:bg-teal-800"
            >
              Choose Photo
            </label>
          </div>
        );
      default:
        return null;
    }
  };

  // Calculate progress percentage
  const progressPercentage = (currentStep / totalSteps) * 100;

  return (
    <div className="container mx-auto mt-20 px-4 min-h-screen flex flex-col pt-20 pb-64">
      {/* Main Content */}
      <div className="flex-1">
        {renderStep()}
      </div>

      {/* Footer / Navigation Buttons */}
      <div className="mt-12 flex">
        <div className="w-full mr-8">
          <div className="w-full bg-gray-200 rounded-full">
            <div
              style={{ width: `${Math.round(progressPercentage)}%` }}
              className="bg-ggreen text-xs font-medium text-blue-100 text-center p-1 leading-none rounded-full"
            />
          </div>
          <p className="text-center mt-2">
            Step {currentStep} of {totalSteps}
          </p>
        </div>

        <div className="flex justify-between">
          {currentStep > 1 && (
            <button
              onClick={prevStep}
              className="border-2 border-ggreen text-ggreen px-12 py-3 mr-4 rounded-full hover:bg-ggreen hover:text-white"
            >
              Back
            </button>
          )}
          <button
            onClick={nextStep}
            className="border-2 border-ggreen bg-ggreen text-white px-12 py-3 rounded-full hover:bg-teal-800"
          >
            {currentStep === totalSteps ? 'Submit' : 'Next'}
          </button>
        </div>
      </div>
    </div>
  );
};

RegisterOrganization.layout = Auth;
export default RegisterOrganization;

================
File: pages/visible/success.js
================
// pages/checkout/success.js
import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import Navbar from 'components/Navbars/AuthNavbar';
import Footer from 'components/Footers/Footer';
import Link from 'next/link';

const SuccessPage = () => {
  const router = useRouter();
  const { session_id } = router.query;
  const [order, setOrder] = useState(null);

  useEffect(() => {
    if (session_id) {
      // Optionally, fetch order details using the session_id
      // This depends on how you've structured your backend
      axios
        .get(`/api/orders/${session_id}`)
        .then((response) => setOrder(response.data))
        .catch((error) => console.error('Error fetching order:', error));
    }
  }, [session_id]);

  return (
    <>
      <Navbar transparent />
      <main className="pt-20 min-h-[80vh] bg-gray-800">
        <div className="container mx-auto px-4 py-8 text-center text-white">
          <h2 className="text-3xl font-semibold mb-4">Thank You for Your Purchase!</h2>
          <p className="mb-6">Your order has been placed successfully.</p>
          {order && (
            <div>
              <h3 className="text-2xl font-semibold">Order Details</h3>
              {/* Display order details */}
            </div>
          )}
          <Link href="/visible/orglist" className="text-blue-400 hover:underline">
            Continue Shopping
          </Link>
        </div>
      </main>
      <Footer />
    </>
  );
};

export default SuccessPage;

================
File: pages/_app.js
================
// src/pages/_app.js

import React, { Suspense } from "react";
import Head from "next/head";
import Router from "next/router";
import NProgress from 'nprogress';
import 'nprogress/nprogress.css';
import Providers from 'components/Providers';
import ErrorBoundary from 'components/ErrorBoundary';
import { ModalProvider } from '../contexts/ModalContext';
import ModalRenderer from '../components/Modals/ModalRenderer';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

import "@fortawesome/fontawesome-free/css/all.min.css";
import "styles/index.css";

import PropTypes from 'prop-types';

// Configure NProgress
NProgress.configure({ showSpinner: false });

// Route Change Events for NProgress
Router.events.on('routeChangeStart', () => {
  NProgress.start();
});

Router.events.on('routeChangeComplete', () => {
  NProgress.done();
});

Router.events.on('routeChangeError', () => {
  NProgress.done();
});

const MyApp = ({ Component, pageProps }) => {
  const Layout = Component.layout || (({ children }) => <>{children}</>);

  return (
    <>
      <Head>
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, shrink-to-fit=no"
        />
        <link rel="icon" href="/favicon.ico" />
        <meta name="description" content="GiftDrive.org - Connecting donors with organizations to make a positive impact." />
        {/* Open Graph Meta Tags */}
        <meta property="og:title" content="GiftDrive.org" />
        <meta property="og:description" content="Connecting donors with organizations to make a positive impact." />
        <meta property="og:image" content="https://giveagift-assets.nyc3.cdn.digitaloceanspaces.com/images/GiftDriveOGImage.png" />
        <meta property="og:url" content="https://giftdrive.org" />
        <meta property="og:type" content="website" />
        {/* Twitter Card Meta Tags */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content="GiftDrive.org" />
        <meta name="twitter:description" content="Connecting donors with organizations to make a positive impact." />
        <meta name="twitter:image" content="https://giveagift-assets.nyc3.cdn.digitaloceanspaces.com/images/GiftDriveTwitterImage.png" />
        <meta name="theme-color" content="#ffffff" />
        <title>GiftDrive.org</title>
        <link rel="preconnect" href="https://fonts.googleapis.com"></link>
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="true"></link>
        <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet"></link>
      </Head>
      <Providers>
        <ErrorBoundary>
          <Layout>
            <Suspense fallback={<div className="flex justify-center items-center min-h-screen">Loading...</div>}>
              <ModalProvider>
                <Component {...pageProps} />
                <ToastContainer />
                <ModalRenderer />
              </ModalProvider>
            </Suspense>
          </Layout>
        </ErrorBoundary>
      </Providers>
    </>
  );
};

MyApp.propTypes = {
  Component: PropTypes.elementType.isRequired,
  pageProps: PropTypes.object.isRequired,
};

export default MyApp;

================
File: pages/_document.js
================
import React from "react";
import Document, { Html, Head, Main, NextScript } from "next/document";

class MyDocument extends Document {
  render() {
    return (
      <Html lang="en">
        <Head>
          <meta charSet="utf-8" />
          <meta name="theme-color" content="#000000" />
          <link rel="shortcut icon" href="/img/brand/favicon.ico" />
          <link
            rel="apple-touch-icon"
            sizes="76x76"
            href="/img/brand/apple-icon.png"
          />
        </Head>
        <body className="text-blueGray-700 antialiased">
          <div id="page-transition"></div>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;

================
File: pages/_error.js
================
import React, { Component } from "react";
import Router from "next/router";

export default class _error extends Component {
  componentDidMount = () => {
    Router.push("/");
  };

  render() {
    return <div />;
  }
}

================
File: pages/404.js
================
import React from "react";
import Navbar from 'components/Navbars/AuthNavbar.js';
import Footer from 'components/Footers/Footer.js';

// pages/404.js

import Link from 'next/link';

const Custom404 = () => {
  return (
    <>
    <Navbar />
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-500 px-4">
      {/* 404 Heading */}
      <h1 className="text-6xl font-bold text-gray-800 mb-4">404</h1>
      
      {/* Subheading */}
      <h2 className="text-2xl font-semibold text-gray-700 mb-6">Page Not Found</h2>
      
      {/* Description */}
      <p className="text-gray-600 mb-6 text-center">
        Oops! The page you are looking for doesn&apos;t exist or has been moved.
      </p>
      
      {/* Home Button */}
      <Link href="/" className="px-6 py-3 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors duration-300">
          Go Back Home
      </Link>
    </div>
    <Footer />
    </>
  );
};

export default Custom404;

================
File: pages/index.js
================
// pages/index.js

import React from "react";
import Link from "next/link";
import Image from "next/image";

// components
import Navbar from "components/Navbars/AuthNavbar.js";
import Footer from "components/Footers/Footer.js";

export default function Landing() {
  return (
    <>
      <Navbar transparent />
      <main className="min-h-screen bg-secondary_green text-gray-800 relative">
        {/* Hero Section */}
        <section className="bg-background px-4 py-12 sm:py-20">
          <div className="max-w-7xl mx-auto flex flex-col items-center text-center">
            <h1 className="inter-regular text-ggreen text-6xl sm:text-5xl mt-20 mb-4">
              Organize physical item donation
            </h1>
            <h1 className="inter-regular text-ggreen text-3xl sm:text-5xl mt-4 mb-4">
              drives for any occassion.
            </h1>
            {/* CTA Buttons */}
            <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-32 mb-20">
              <Link href="/visible/orglist">
                <div className="px-6 py-3 text-ggreen inter-semi-bold cursor-pointer">
                  Find a Donation Drive Page
                </div>
              </Link>
              <Link href="/visible/registerorg">
                <div className="px-6 py-3 bg-ggreen text-white inter-semi-bold rounded-full cursor-pointer">
                  Get Started, It&apos;s Free
                </div>
              </Link>
            </div>

          </div>
        </section>

        <section className="px-4 py-12 sm:py-20">
          <div className="max-w-7xl mx-auto">
            <h2 className="inter-bold text-2xl sm:text-3xl text-center mb-10">
              How It Works
            </h2>
            <div className="grid grid-cols-1 sm:grid-cols-4 gap-8 text-center">
              {[1, 2, 3, 4].map((step) => (
                <div
                  key={step}
                  className="bg-white rounded-xl p-6 shadow w-64 h-64 mx-auto flex flex-col"
                >
                  {/* Step Number in a Circle */}
                  <div className="flex items-center justify-center w-16 h-24 rounded-full bg-ggreen text-white font-bold mx-auto mt-4 mb-12">
                    {step}
                  </div>

                  <h3 className="inter-semi-bold mb-2">
                    {step === 1 && "Identify a Drive"}
                    {step === 2 && "Choose a Child"}
                    {step === 3 && "Purchase Gifts"}
                    {step === 4 && "Make a Difference"}
                  </h3>
                  <p className="inter-medium text-gray-600">
                    {step === 1 &&
                      "Find or create a gift drive for children in need."}
                    {step === 2 &&
                      "Browse children's wishlists and pick one to sponsor."}
                    {step === 3 &&
                      "Select and purchase items from their wishlist."}
                    {step === 4 &&
                      "Help a child feel special and cared for."}
                  </p>
                </div>
              ))}
            </div>
          </div>
        </section>


        {/* Who It’s For Section */}
        <section className="bg-white px-4 py-12">
          <div className="max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
            {/* Left side: Heading, description, bullet points */}
            <div>
              <h2 className="inter-bold text-2xl sm:text-3xl mb-2">
                Who It’s For
              </h2>
              <p className="inter-medium text-gray-600 mb-6">
                GiftDrive is designed for anyone organizing a donation drive for physical goods.
              </p>
              <div className="grid grid-cols-2 gap-2">
                <ul className="inter-medium list-disc list-inside text-gray-700 space-y-2">
                  <li>Giving & Angel Tree</li>
                  <li>Food & Meal</li>
                  <li>School Supplies</li>
                  <li>Disaster Relief</li>

                </ul>
                <ul className="inter-medium list-disc list-inside text-gray-700 space-y-2">
                  <li>Toy & Clothing</li>
                  <li>Homeless Shelter</li>
                  <li>Healthcare Supplies</li>
                  <li>Refuge Support</li>
                </ul>
              </div>
            </div>

            {/* Right side: 2×2 grid of images */}
            <div className="grid grid-cols-2 gap-2 mx-24">
              <div className="w-full h-40 relative">
                <Image
                  src="/example1.png"
                  alt="Example 1"
                  width={200}
                  height={200}
                />
              </div>
              <div className="w-full h-40 mb-12 relative">
                <Image
                  src="/example2.png"
                  alt="Example 2"
                  width={200}
                  height={200}
                />
              </div>
              <div className="w-full h-40 relative">
                <Image
                  src="/example3.png"
                  alt="Example 3"
                  width={200}
                  height={200}
                />
              </div>
              <div className="w-full h-40 mb-8 relative">
                <Image
                  src="/example4.png"
                  alt="Example 4"
                  width={200}
                  height={200}
                />
              </div>
            </div>
          </div>
        </section>

        {/* Recommended By Section */}
        <section className="bg-secondary_green px-4 py-12">
          <div className="max-w-7xl mx-auto">
            {/* Section Heading */}
            <h2 className="text-center text-2xl sm:text-3xl inter-bold mb-8">
              Recommended By
            </h2>

            {/* Logo Row */}

            <div className="flex flex-wrap items-center justify-center gap-24 bg-ggreen rounded-full p-2 mb-4">
              {/* Logo 1 */}
              <div className="relative w-24 h-24">
                <Image
                  src="/lund.png"
                  alt="Lund"
                  fill
                  style={{ objectFit: 'contain' }}
                />
              </div>

              {/* Logo 2 */}
              <div className="relative w-24 h-24">
                <Image
                  src="/wfs.png"
                  alt="WFS"
                  fill
                  style={{ objectFit: 'contain' }}
                />
              </div>

              {/* Logo 3 */}
              <div className="relative w-24 h-24">
                <Image
                  src="/tsa.png"
                  alt="TSA"
                  fill
                  style={{ objectFit: 'contain' }}
                />
              </div>

              {/* Logo 4 */}
              <div className="relative w-24 h-24">
                <Image
                  src="/uvmch.png"
                  alt="UVMCH"
                  fill
                  style={{ objectFit: 'contain' }}
                />
              </div>

              {/* Logo 5 */}
              <div className="relative w-24 h-24">
                <Image
                  src="/bgcw.png"
                  alt="BGCW"
                  fill
                  style={{ objectFit: 'contain' }}
                />
              </div>
            </div>

            {/* Testimonial Cards */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              {/* Card 1 */}
              <div className="bg-white border border-gray-200 rounded-lg p-6 shadow">
                <p className="text-gray-700 mb-4">
                  “GiftDrive made organizing our school&apos;s back-to-school supplies drive
                  easier than ever. We reached our goal way faster than in previous years,
                  and it was super simple to share with everyone!”
                </p>
                <p className="inter-semi-bold text-gray-900">Rowan Vexley</p>
                <p className="text-sm text-gray-500">Westbrook Elementary, Oregon</p>
              </div>

              {/* Card 2 */}
              <div className="bg-white border border-gray-200 rounded-lg p-6 shadow">
                <p className="text-gray-700 mb-4">
                  “Thanks to GiftDrive, we were finally able to take our drive online,
                  something we&apos;ve been aiming to do for years! We hit our goal and
                  saved a lot of time and effort in the busy holiday season!”
                </p>
                <p className="inter-semi-bold text-gray-900">Lila Fairbrooke</p>
                <p className="text-sm text-gray-500">Haven Hope Shelter, Maine</p>
              </div>

              {/* Card 3 */}
              <div className="bg-white border border-gray-200 rounded-lg p-6 shadow">
                <p className="text-gray-700 mb-4">
                  “You won&apos;t regret taking your drive online with GiftDrive. Being able
                  to track progress in real time and have items shipped directly to us
                  saved so much hassle. There&apos;s no going back!”
                </p>
                <p className="inter-semi-bold text-gray-900">Jaxon Tremont</p>
                <p className="text-sm text-gray-500">
                  Star Community Church, Illinois
                </p>
              </div>
            </div>
          </div>
        </section>

        {/* Final Call to Action */}
        {/* Final Call to Action */}
        <section className="px-4 py-12 bg-white">
          <div className="max-w-7xl mx-auto bg-secondary_green rounded-xl shadow p-6 md:p-12 flex flex-col md:flex-row items-center gap-8">
            {/* Image (Left Column) */}
            <div className="w-full md:w-1/2">
              <Image
                src="/donationdrive.jpg"
                alt="Donation Drive"
                width={500}
                height={300}
                className="w-full h-auto rounded-md object-cover"
              />
            </div>

            {/* Text + Buttons (Right Column) */}
            <div className="w-full md:w-1/2">
              <h2 className="text-2xl sm:text-3xl font-bold mb-4">
                Start organizing a donation drive today.
              </h2>
              <p className="text-gray-700 mb-6">
                Create a free donation page for your drive
              </p>
              <div className="flex space-x-4">
                <Link href="/visible/registerorg">
                  <button className="px-6 py-3 bg-ggreen text-white font-semibold rounded-full cursor-pointer">
                    Get Started
                  </button>
                </Link>
                <Link href="/visible/learn-more">
                  <button className="px-6 py-3 bg-transparent text-ggreen font-semibold rounded-full cursor-pointer">
                    Learn More
                  </button>
                </Link>
              </div>
            </div>
          </div>
        </section>

      </main>
      <Footer />
    </>
  );
}

================
File: styles/index.css
================
@tailwind base;

@tailwind components;

@tailwind utilities;


:root {
  --background: #f6f8f5;
  --foreground: #171717;

}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}


.inter-semi-bold {
  font-family: "Inter", sans-serif;
  font-optical-sizing: auto;
  font-weight: 600;
  font-style: normal;
}

.inter-medium {
  font-family: "Inter", sans-serif;
  font-optical-sizing: auto;
  font-weight: 400;
  font-style: normal;
}

.inter-regular {
  font-family: "Inter", sans-serif;
  font-optical-sizing: auto;
  font-weight: 500;
  font-style: normal;
}

.inter-bold {
  font-family: "Inter", sans-serif;
  font-optical-sizing: auto;
  font-weight: 700;
  font-style: normal;
}

/* 
@font-face {
  font-family: 'Georgia Pro';
  src: url('/fonts/GeorgiaPro-Regular.ttf') format('truetype');
  font-weight: 400;
  font-style: normal;
}

@font-face {
  font-family: 'Georgia Pro';
  src: url('/fonts/GeorgiaPro-Bold.ttf') format('truetype');
  font-weight: 700;
  font-style: normal;
}

@font-face {
  font-family: 'Georgia Pro';
  src: url('/fonts/GeorgiaPro-Italic.ttf') format('truetype');
  font-weight: 400;
  font-style: italic;
} */

.uniform-image-size {
    width: 100%; /* Ensure the image spans the full width of the container */
    height: 200px; /* Set a fixed height */
    object-fit: cover; /* Crop or scale the image to fit the dimensions */
  }

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

.next/
out/

commit.sh

repopack-output.txt

.env

================
File: eslint.config.mjs
================
import globals from "globals";
import pluginJs from "@eslint/js";
import pluginReact from "eslint-plugin-react";


export default [
  {files: ["**/*.{js,mjs,cjs,jsx}"]},
  {languageOptions: { globals: {...globals.browser, ...globals.node} }},
  pluginJs.configs.recommended,
  pluginReact.configs.flat.recommended,
];

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "baseUrl": "."
  }
}

================
File: next.config.js
================
// next.config.js

/** @type {import('next').NextConfig} */
const nextConfig = {
    reactStrictMode: true,
    images: {
      domains: ['giveagift-assets.nyc3.cdn.digitaloceanspaces.com', 'nyc3.digitaloceanspaces.com', 'm.media-amazon.com'],
    },
  };
  
  module.exports = nextConfig;

================
File: package.json
================
{
  "name": "giftdrive",
  "version": "1.0.0",
  "description": "A brief description of your project.",
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/your-repo.git"
  },
  "license": "MIT",
  "dependencies": {
    "@fortawesome/fontawesome-free": "^6.6.0",
    "@headlessui/react": "^2.2.0",
    "@heroicons/react": "^2.2.0",
    "@popperjs/core": "^2.11.7",
    "@react-google-maps/api": "^2.20.3",
    "@stripe/stripe-js": "^5.4.0",
    "@tailwindcss/line-clamp": "^0.4.4",
    "axios": "^1.7.7",
    "chart.js": "^2.9.4",
    "components": "^0.1.0",
    "dotenv": "^16.4.5",
    "eslint-config-next": "^15.0.1",
    "express-rate-limit": "^7.4.1",
    "express-validator": "^7.2.0",
    "layouts": "^3.0.2",
    "multer": "^1.4.5-lts.1",
    "next": "^13.4.6",
    "nprogress": "^0.2.0",
    "prettier": "^3.3.3",
    "prop-types": "^15.8.1",
    "react": "18.2.0",
    "react-datepicker": "^7.5.0",
    "react-dom": "18.2.0",
    "react-icons": "^5.3.0",
    "react-infinite-scroll-component": "^6.1.0",
    "react-toastify": "^11.0.2",
    "recharts": "^2.13.3",
    "styles": "^0.2.1",
    "typescript": "^4.9.5",
    "validator": "^13.12.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@tailwindcss/forms": "^0.5.3",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.57.1",
    "eslint-plugin-react": "^7.37.2",
    "globals": "^15.11.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14"
  },
  "scripts": {
    "start": "next start",
    "build": "next build",
    "dev": "next dev",
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx"
  },
  "eslintConfig": {
    "extends": [
      "next",
      "next/core-web-vitals"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: tailwind.config.js
================
const plugin = require("tailwindcss/plugin");
const colors = require("tailwindcss/colors");

module.exports = {
  mode: 'jit',
  purge: {
    enabled: true,
    content: [
      // Components: All JS/JSX/TS/TSX files in the components directory and its subdirectories
      "./components/**/*.{js,jsx,ts,tsx}",
  
      // Contexts: All JS/JSX/TS/TSX files in the contexts directory and its subdirectories
      "./contexts/**/*.{js,jsx,ts,tsx}",
  
      // Layouts: All JS/JSX/TS/TSX files in the layouts directory and its subdirectories
      "./layouts/**/*.{js,jsx,ts,tsx}",
  
      // Pages: All JS/JSX/TS/TSX files in the pages directory and its subdirectories
      "./pages/**/*.{js,jsx,ts,tsx}",
  
      // Public: Any HTML files in the public directory (if you have any)
      "./public/**/*.html",
  
      // Styles: All CSS and SCSS files in the styles directory
      "./styles/**/*.{css,scss}",
  
      // Utils: All JS/JSX/TS/TSX files in the utils directory and its subdirectories
      "./utils/**/*.{js,jsx,ts,tsx}",
  
      // Add any other directories or file types as needed
    ],
    options: {
      safelist: [],
    },
  },
  theme: {
    extend: {
      colors: {
        ...colors,
        background: "var(--background)",
        foreground: "var(--foreground)",
        'ggreen': '#11393B',
        'gyellow': 'rgb(0, 190, 29)',
        'secondary_green':'#F6F3EE'
      },
      fontFamily: {
        georgia: ['Georgia Pro', 'serif'],
      },
      minHeight: {
        "screen-75": "75vh",
      },
      fontSize: {
        55: "55rem",
      },
      opacity: {
        80: ".8",
      },
      zIndex: {
        2: 2,
        3: 3,
      },
      inset: {
        "-100": "-100%",
        "-225-px": "-225px",
        "-160-px": "-160px",
        "-150-px": "-150px",
        "-94-px": "-94px",
        "-50-px": "-50px",
        "-29-px": "-29px",
        "-20-px": "-20px",
        "25-px": "25px",
        "40-px": "40px",
        "95-px": "95px",
        "145-px": "145px",
        "195-px": "195px",
        "210-px": "210px",
        "260-px": "260px",
      },
      height: {
        "95-px": "95px",
        "70-px": "70px",
        "350-px": "350px",
        "500-px": "500px",
        "600-px": "600px",
      },
      maxHeight: {
        "860-px": "860px",
      },
      maxWidth: {
        "100-px": "100px",
        "120-px": "120px",
        "150-px": "150px",
        "180-px": "180px",
        "200-px": "200px",
        "210-px": "210px",
        "580-px": "580px",
      },
      minWidth: {
        "140-px": "140px",
        48: "12rem",
      },
      backgroundSize: {
        full: "100%",
      },
    },
  },
  variants: [
    "responsive",
    "group-hover",
    "focus-within",
    "first",
    "last",
    "odd",
    "even",
    "hover",
    "focus",
    "active",
    "visited",
    "disabled",
  ],
  plugins: [
    require("@tailwindcss/forms"),
    plugin(function ({ addComponents, theme }) {
      const screens = theme("screens", {});
      addComponents([
        {
          ".container": { width: "100%" },
        },
        {
          [`@media (min-width: ${screens.sm})`]: {
            ".container": {
              "max-width": "640px",
            },
          },
        },
        {
          [`@media (min-width: ${screens.md})`]: {
            ".container": {
              "max-width": "768px",
            },
          },
        },
        {
          [`@media (min-width: ${screens.lg})`]: {
            ".container": {
              "max-width": "1024px",
            },
          },
        },
        {
          [`@media (min-width: ${screens.xl})`]: {
            ".container": {
              "max-width": "1280px",
            },
          },
        },
        {
          [`@media (min-width: ${screens["2xl"]})`]: {
            ".container": {
              "max-width": "1280px",
            },
          },
        },
      ]);
    }),
  ],
};
